[
    {
        "URL": "https://leetcode.com/problems/minimum-moves-to-equal-array-elements-ii/",
        "Title": "Minimum Moves to Equal Array Elements II ",
        "Description": "b'Given an integer array nums of size n, return the minimum number of moves required to make all array elements equal.\\nIn one move, you can increment or decrement an element of the array by 1.\\nTest cases are designed so that the answer will fit in a 32-bit integer.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [1,2,3]\\nOutput: 2\\nExplanation:\\nOnly two moves are needed (remember each move increments or decrements one element):\\n[1,2,3]  =>  [2,2,3]  =>  [2,2,2]\\n\\nExample 2:\\nInput: nums = [1,10,2,9]\\nOutput: 16\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nn == nums.length\\n1 <= nums.length <= 105\\n-109 <= nums[i] <= 109\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/two-sum",
        "Title": "Two Sum ",
        "Description": "b'Given an array of integers nums\\xc2\\xa0and an integer target, return indices of the two numbers such that they add up to target.\\nYou may assume that each input would have exactly one solution, and you may not use the same element twice.\\nYou can return the answer in any order.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [2,7,11,15], target = 9\\nOutput: [0,1]\\nExplanation: Because nums[0] + nums[1] == 9, we return [0, 1].\\n\\nExample 2:\\nInput: nums = [3,2,4], target = 6\\nOutput: [1,2]\\n\\nExample 3:\\nInput: nums = [3,3], target = 6\\nOutput: [0,1]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n2 <= nums.length <= 104\\n-109 <= nums[i] <= 109\\n-109 <= target <= 109\\nOnly one valid answer exists.\\n\\n\\xc2\\xa0\\nFollow-up:\\xc2\\xa0Can you come up with an algorithm that is less than\\xc2\\xa0O(n2)\\xc2\\xa0time complexity?'"
    },
    {
        "URL": "https://leetcode.com/problems/add-two-numbers",
        "Title": "Add Two Numbers ",
        "Description": "b'You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum\\xc2\\xa0as a linked list.\\nYou may assume the two numbers do not contain any leading zero, except the number 0 itself.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: l1 = [2,4,3], l2 = [5,6,4]\\nOutput: [7,0,8]\\nExplanation: 342 + 465 = 807.\\n\\nExample 2:\\nInput: l1 = [0], l2 = [0]\\nOutput: [0]\\n\\nExample 3:\\nInput: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]\\nOutput: [8,9,9,9,0,0,0,1]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of nodes in each linked list is in the range [1, 100].\\n0 <= Node.val <= 9\\nIt is guaranteed that the list represents a number that does not have leading zeros.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/longest-substring-without-repeating-characters",
        "Title": "Longest Substring Without Repeating Characters ",
        "Description": "b'Given a string s, find the length of the longest substring without repeating characters.\\n\\xc2\\xa0\\nExample 1:\\nInput: s = \"abcabcbb\"\\nOutput: 3\\nExplanation: The answer is \"abc\", with the length of 3.\\n\\nExample 2:\\nInput: s = \"bbbbb\"\\nOutput: 1\\nExplanation: The answer is \"b\", with the length of 1.\\n\\nExample 3:\\nInput: s = \"pwwkew\"\\nOutput: 3\\nExplanation: The answer is \"wke\", with the length of 3.\\nNotice that the answer must be a substring, \"pwke\" is a subsequence and not a substring.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n0 <= s.length <= 5 * 104\\ns consists of English letters, digits, symbols and spaces.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/median-of-two-sorted-arrays",
        "Title": "Median of Two Sorted Arrays ",
        "Description": "b'Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.\\nThe overall run time complexity should be O(log (m+n)).\\n\\xc2\\xa0\\nExample 1:\\nInput: nums1 = [1,3], nums2 = [2]\\nOutput: 2.00000\\nExplanation: merged array = [1,2,3] and median is 2.\\n\\nExample 2:\\nInput: nums1 = [1,2], nums2 = [3,4]\\nOutput: 2.50000\\nExplanation: merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nnums1.length == m\\nnums2.length == n\\n0 <= m <= 1000\\n0 <= n <= 1000\\n1 <= m + n <= 2000\\n-106 <= nums1[i], nums2[i] <= 106\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/longest-palindromic-substring",
        "Title": "Longest Palindromic Substring ",
        "Description": "b'Given a string s, return the longest palindromic substring in s.\\n\\xc2\\xa0\\nExample 1:\\nInput: s = \"babad\"\\nOutput: \"bab\"\\nExplanation: \"aba\" is also a valid answer.\\n\\nExample 2:\\nInput: s = \"cbbd\"\\nOutput: \"bb\"\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= s.length <= 1000\\ns consist of only digits and English letters.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/zigzag-conversion",
        "Title": "Zigzag Conversion ",
        "Description": "b'The string \"PAYPALISHIRING\" is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)\\nP   A   H   N\\nA P L S I I G\\nY   I   R\\n\\nAnd then read line by line: \"PAHNAPLSIIGYIR\"\\nWrite the code that will take a string and make this conversion given a number of rows:\\nstring convert(string s, int numRows);\\n\\n\\xc2\\xa0\\nExample 1:\\nInput: s = \"PAYPALISHIRING\", numRows = 3\\nOutput: \"PAHNAPLSIIGYIR\"\\n\\nExample 2:\\nInput: s = \"PAYPALISHIRING\", numRows = 4\\nOutput: \"PINALSIGYAHRPI\"\\nExplanation:\\nP     I    N\\nA   L S  I G\\nY A   H R\\nP     I\\n\\nExample 3:\\nInput: s = \"A\", numRows = 1\\nOutput: \"A\"\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= s.length <= 1000\\ns consists of English letters (lower-case and upper-case), \\',\\' and \\'.\\'.\\n1 <= numRows <= 1000\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/reverse-integer",
        "Title": "Reverse Integer ",
        "Description": "b'Given a signed 32-bit integer x, return x with its digits reversed. If reversing x causes the value to go outside the signed 32-bit integer range [-231, 231 - 1], then return 0.\\nAssume the environment does not allow you to store 64-bit integers (signed or unsigned).\\n\\xc2\\xa0\\nExample 1:\\nInput: x = 123\\nOutput: 321\\n\\nExample 2:\\nInput: x = -123\\nOutput: -321\\n\\nExample 3:\\nInput: x = 120\\nOutput: 21\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n-231 <= x <= 231 - 1\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/string-to-integer-atoi",
        "Title": "String to Integer (atoi) ",
        "Description": "b'Implement the myAtoi(string s) function, which converts a string to a 32-bit signed integer (similar to C/C++\\'s atoi function).\\nThe algorithm for myAtoi(string s) is as follows:\\n\\nRead in and ignore any leading whitespace.\\nCheck if the next character (if not already at the end of the string) is \\'-\\' or \\'+\\'. Read this character in if it is either. This determines if the final result is negative or positive respectively. Assume the result is positive if neither is present.\\nRead in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.\\nConvert these digits into an integer (i.e. \"123\" -> 123, \"0032\" -> 32). If no digits were read, then the integer is 0. Change the sign as necessary (from step 2).\\nIf the integer is out of the 32-bit signed integer range [-231, 231 - 1], then clamp the integer so that it remains in the range. Specifically, integers less than -231 should be clamped to -231, and integers greater than 231 - 1 should be clamped to 231 - 1.\\nReturn the integer as the final result.\\n\\nNote:\\n\\nOnly the space character \\' \\' is considered a whitespace character.\\nDo not ignore any characters other than the leading whitespace or the rest of the string after the digits.\\n\\n\\xc2\\xa0\\nExample 1:\\nInput: s = \"42\"\\nOutput: 42\\nExplanation: The underlined characters are what is read in, the caret is the current reader position.\\nStep 1: \"42\" (no characters read because there is no leading whitespace)\\n         ^\\nStep 2: \"42\" (no characters read because there is neither a \\'-\\' nor \\'+\\')\\n         ^\\nStep 3: \"42\" (\"42\" is read in)\\n           ^\\nThe parsed integer is 42.\\nSince 42 is in the range [-231, 231 - 1], the final result is 42.\\n\\nExample 2:\\nInput: s = \"   -42\"\\nOutput: -42\\nExplanation:\\nStep 1: \"   -42\" (leading whitespace is read and ignored)\\n            ^\\nStep 2: \"   -42\" (\\'-\\' is read, so the result should be negative)\\n             ^\\nStep 3: \"   -42\" (\"42\" is read in)\\n               ^\\nThe parsed integer is -42.\\nSince -42 is in the range [-231, 231 - 1], the final result is -42.\\n\\nExample 3:\\nInput: s = \"4193 with words\"\\nOutput: 4193\\nExplanation:\\nStep 1: \"4193 with words\" (no characters read because there is no leading whitespace)\\n         ^\\nStep 2: \"4193 with words\" (no characters read because there is neither a \\'-\\' nor \\'+\\')\\n         ^\\nStep 3: \"4193 with words\" (\"4193\" is read in; reading stops because the next character is a non-digit)\\n             ^\\nThe parsed integer is 4193.\\nSince 4193 is in the range [-231, 231 - 1], the final result is 4193.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n0 <= s.length <= 200\\ns consists of English letters (lower-case and upper-case), digits (0-9), \\' \\', \\'+\\', \\'-\\', and \\'.\\'.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/palindrome-number",
        "Title": "Palindrome Number ",
        "Description": "b'Given an integer x, return true if x is palindrome integer.\\nAn integer is a palindrome when it reads the same backward as forward.\\n\\nFor example, 121 is a palindrome while 123 is not.\\n\\n\\xc2\\xa0\\nExample 1:\\nInput: x = 121\\nOutput: true\\nExplanation: 121 reads as 121 from left to right and from right to left.\\n\\nExample 2:\\nInput: x = -121\\nOutput: false\\nExplanation: From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome.\\n\\nExample 3:\\nInput: x = 10\\nOutput: false\\nExplanation: Reads 01 from right to left. Therefore it is not a palindrome.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n-231\\xc2\\xa0<= x <= 231\\xc2\\xa0- 1\\n\\n\\xc2\\xa0\\nFollow up: Could you solve it without converting the integer to a string?'"
    },
    {
        "URL": "https://leetcode.com/problems/regular-expression-matching",
        "Title": "Regular Expression Matching ",
        "Description": "b'Given an input string s\\xc2\\xa0and a pattern p, implement regular expression matching with support for \\'.\\' and \\'*\\' where:\\n\\n\\'.\\' Matches any single character.\\xe2\\x80\\x8b\\xe2\\x80\\x8b\\xe2\\x80\\x8b\\xe2\\x80\\x8b\\n\\'*\\' Matches zero or more of the preceding element.\\n\\nThe matching should cover the entire input string (not partial).\\n\\xc2\\xa0\\nExample 1:\\nInput: s = \"aa\", p = \"a\"\\nOutput: false\\nExplanation: \"a\" does not match the entire string \"aa\".\\n\\nExample 2:\\nInput: s = \"aa\", p = \"a*\"\\nOutput: true\\nExplanation: \\'*\\' means zero or more of the preceding element, \\'a\\'. Therefore, by repeating \\'a\\' once, it becomes \"aa\".\\n\\nExample 3:\\nInput: s = \"ab\", p = \".*\"\\nOutput: true\\nExplanation: \".*\" means \"zero or more (*) of any character (.)\".\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= s.length\\xc2\\xa0<= 20\\n1 <= p.length\\xc2\\xa0<= 30\\ns contains only lowercase English letters.\\np contains only lowercase English letters, \\'.\\', and\\xc2\\xa0\\'*\\'.\\nIt is guaranteed for each appearance of the character \\'*\\', there will be a previous valid character to match.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/container-with-most-water",
        "Title": "Container With Most Water ",
        "Description": "b'You are given an integer array height of length n. There are n vertical lines drawn such that the two endpoints of the ith line are (i, 0) and (i, height[i]).\\nFind two lines that together with the x-axis form a container, such that the container contains the most water.\\nReturn the maximum amount of water a container can store.\\nNotice that you may not slant the container.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: height = [1,8,6,2,5,4,8,3,7]\\nOutput: 49\\nExplanation: The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49.\\n\\nExample 2:\\nInput: height = [1,1]\\nOutput: 1\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nn == height.length\\n2 <= n <= 105\\n0 <= height[i] <= 104\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/integer-to-roman",
        "Title": "Integer to Roman ",
        "Description": "b'Roman numerals are represented by seven different symbols:\\xc2\\xa0I, V, X, L, C, D and M.\\nSymbol       Value\\nI             1\\nV             5\\nX             10\\nL             50\\nC             100\\nD             500\\nM             1000\\nFor example,\\xc2\\xa02 is written as II\\xc2\\xa0in Roman numeral, just two one\\'s added together. 12 is written as\\xc2\\xa0XII, which is simply X + II. The number 27 is written as XXVII, which is XX + V + II.\\nRoman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:\\n\\nI can be placed before V (5) and X (10) to make 4 and 9.\\xc2\\xa0\\nX can be placed before L (50) and C (100) to make 40 and 90.\\xc2\\xa0\\nC can be placed before D (500) and M (1000) to make 400 and 900.\\n\\nGiven an integer, convert it to a roman numeral.\\n\\xc2\\xa0\\nExample 1:\\nInput: num = 3\\nOutput: \"III\"\\nExplanation: 3 is represented as 3 ones.\\n\\nExample 2:\\nInput: num = 58\\nOutput: \"LVIII\"\\nExplanation: L = 50, V = 5, III = 3.\\n\\nExample 3:\\nInput: num = 1994\\nOutput: \"MCMXCIV\"\\nExplanation: M = 1000, CM = 900, XC = 90 and IV = 4.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= num <= 3999\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/roman-to-integer",
        "Title": "Roman to Integer ",
        "Description": "b'Roman numerals are represented by seven different symbols:\\xc2\\xa0I, V, X, L, C, D and M.\\nSymbol       Value\\nI             1\\nV             5\\nX             10\\nL             50\\nC             100\\nD             500\\nM             1000\\nFor example,\\xc2\\xa02 is written as II\\xc2\\xa0in Roman numeral, just two ones added together. 12 is written as\\xc2\\xa0XII, which is simply X + II. The number 27 is written as XXVII, which is XX + V + II.\\nRoman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:\\n\\nI can be placed before V (5) and X (10) to make 4 and 9.\\xc2\\xa0\\nX can be placed before L (50) and C (100) to make 40 and 90.\\xc2\\xa0\\nC can be placed before D (500) and M (1000) to make 400 and 900.\\n\\nGiven a roman numeral, convert it to an integer.\\n\\xc2\\xa0\\nExample 1:\\nInput: s = \"III\"\\nOutput: 3\\nExplanation: III = 3.\\n\\nExample 2:\\nInput: s = \"LVIII\"\\nOutput: 58\\nExplanation: L = 50, V= 5, III = 3.\\n\\nExample 3:\\nInput: s = \"MCMXCIV\"\\nOutput: 1994\\nExplanation: M = 1000, CM = 900, XC = 90 and IV = 4.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= s.length <= 15\\ns contains only\\xc2\\xa0the characters (\\'I\\', \\'V\\', \\'X\\', \\'L\\', \\'C\\', \\'D\\', \\'M\\').\\nIt is guaranteed\\xc2\\xa0that s is a valid roman numeral in the range [1, 3999].\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/longest-common-prefix",
        "Title": "Longest Common Prefix ",
        "Description": "b'Write a function to find the longest common prefix string amongst an array of strings.\\nIf there is no common prefix, return an empty string \"\".\\n\\xc2\\xa0\\nExample 1:\\nInput: strs = [\"flower\",\"flow\",\"flight\"]\\nOutput: \"fl\"\\n\\nExample 2:\\nInput: strs = [\"dog\",\"racecar\",\"car\"]\\nOutput: \"\"\\nExplanation: There is no common prefix among the input strings.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= strs.length <= 200\\n0 <= strs[i].length <= 200\\nstrs[i] consists of only lowercase English letters.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/3sum",
        "Title": "3Sum ",
        "Description": "b'Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.\\nNotice that the solution set must not contain duplicate triplets.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [-1,0,1,2,-1,-4]\\nOutput: [[-1,-1,2],[-1,0,1]]\\nExample 2:\\nInput: nums = []\\nOutput: []\\nExample 3:\\nInput: nums = [0]\\nOutput: []\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n0 <= nums.length <= 3000\\n-105 <= nums[i] <= 105\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/3sum-closest",
        "Title": "3Sum Closest ",
        "Description": "b'Given an integer array nums of length n and an integer target, find three integers in nums such that the sum is closest to target.\\nReturn the sum of the three integers.\\nYou may assume that each input would have exactly one solution.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [-1,2,1,-4], target = 1\\nOutput: 2\\nExplanation: The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).\\n\\nExample 2:\\nInput: nums = [0,0,0], target = 1\\nOutput: 0\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n3 <= nums.length <= 1000\\n-1000 <= nums[i] <= 1000\\n-104 <= target <= 104\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/letter-combinations-of-a-phone-number",
        "Title": "Letter Combinations of a Phone Number ",
        "Description": "b'Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. Return the answer in any order.\\nA mapping of digits to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.\\n\\n\\xc2\\xa0\\nExample 1:\\nInput: digits = \"23\"\\nOutput: [\"ad\",\"ae\",\"af\",\"bd\",\"be\",\"bf\",\"cd\",\"ce\",\"cf\"]\\n\\nExample 2:\\nInput: digits = \"\"\\nOutput: []\\n\\nExample 3:\\nInput: digits = \"2\"\\nOutput: [\"a\",\"b\",\"c\"]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n0 <= digits.length <= 4\\ndigits[i] is a digit in the range [\\'2\\', \\'9\\'].\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/4sum",
        "Title": "4Sum ",
        "Description": "b'Given an array nums of n integers, return an array of all the unique quadruplets [nums[a], nums[b], nums[c], nums[d]] such that:\\n\\n0 <= a, b, c, d\\xc2\\xa0< n\\na, b, c, and d are distinct.\\nnums[a] + nums[b] + nums[c] + nums[d] == target\\n\\nYou may return the answer in any order.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [1,0,-1,0,-2,2], target = 0\\nOutput: [[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]]\\n\\nExample 2:\\nInput: nums = [2,2,2,2,2], target = 8\\nOutput: [[2,2,2,2]]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 200\\n-109 <= nums[i] <= 109\\n-109 <= target <= 109\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/remove-nth-node-from-end-of-list",
        "Title": "Remove Nth Node From End of List ",
        "Description": "b'Given the head of a linked list, remove the nth node from the end of the list and return its head.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: head = [1,2,3,4,5], n = 2\\nOutput: [1,2,3,5]\\n\\nExample 2:\\nInput: head = [1], n = 1\\nOutput: []\\n\\nExample 3:\\nInput: head = [1,2], n = 1\\nOutput: [1]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of nodes in the list is sz.\\n1 <= sz <= 30\\n0 <= Node.val <= 100\\n1 <= n <= sz\\n\\n\\xc2\\xa0\\nFollow up: Could you do this in one pass?\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/valid-parentheses",
        "Title": "Valid Parentheses ",
        "Description": "b'Given a string s containing just the characters \\'(\\', \\')\\', \\'{\\', \\'}\\', \\'[\\' and \\']\\', determine if the input string is valid.\\nAn input string is valid if:\\n\\nOpen brackets must be closed by the same type of brackets.\\nOpen brackets must be closed in the correct order.\\n\\n\\xc2\\xa0\\nExample 1:\\nInput: s = \"()\"\\nOutput: true\\n\\nExample 2:\\nInput: s = \"()[]{}\"\\nOutput: true\\n\\nExample 3:\\nInput: s = \"(]\"\\nOutput: false\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= s.length <= 104\\ns consists of parentheses only \\'()[]{}\\'.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/merge-two-sorted-lists",
        "Title": "Merge Two Sorted Lists ",
        "Description": "b'You are given the heads of two sorted linked lists list1 and list2.\\nMerge the two lists in a one sorted list. The list should be made by splicing together the nodes of the first two lists.\\nReturn the head of the merged linked list.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: list1 = [1,2,4], list2 = [1,3,4]\\nOutput: [1,1,2,3,4,4]\\n\\nExample 2:\\nInput: list1 = [], list2 = []\\nOutput: []\\n\\nExample 3:\\nInput: list1 = [], list2 = [0]\\nOutput: [0]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of nodes in both lists is in the range [0, 50].\\n-100 <= Node.val <= 100\\nBoth list1 and list2 are sorted in non-decreasing order.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/generate-parentheses",
        "Title": "Generate Parentheses ",
        "Description": "b'Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.\\n\\xc2\\xa0\\nExample 1:\\nInput: n = 3\\nOutput: [\"((()))\",\"(()())\",\"(())()\",\"()(())\",\"()()()\"]\\nExample 2:\\nInput: n = 1\\nOutput: [\"()\"]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= n <= 8\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/merge-k-sorted-lists",
        "Title": "Merge k Sorted Lists ",
        "Description": "b'You are given an array of k linked-lists lists, each linked-list is sorted in ascending order.\\nMerge all the linked-lists into one sorted linked-list and return it.\\n\\xc2\\xa0\\nExample 1:\\nInput: lists = [[1,4,5],[1,3,4],[2,6]]\\nOutput: [1,1,2,3,4,4,5,6]\\nExplanation: The linked-lists are:\\n[\\n  1->4->5,\\n  1->3->4,\\n  2->6\\n]\\nmerging them into one sorted list:\\n1->1->2->3->4->4->5->6\\n\\nExample 2:\\nInput: lists = []\\nOutput: []\\n\\nExample 3:\\nInput: lists = [[]]\\nOutput: []\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nk == lists.length\\n0 <= k <= 104\\n0 <= lists[i].length <= 500\\n-104 <= lists[i][j] <= 104\\nlists[i] is sorted in ascending order.\\nThe sum of lists[i].length will not exceed 104.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/swap-nodes-in-pairs",
        "Title": "Swap Nodes in Pairs ",
        "Description": "b\"Given a\\xc2\\xa0linked list, swap every two adjacent nodes and return its head. You must solve the problem without\\xc2\\xa0modifying the values in the list's nodes (i.e., only nodes themselves may be changed.)\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: head = [1,2,3,4]\\nOutput: [2,1,4,3]\\n\\nExample 2:\\nInput: head = []\\nOutput: []\\n\\nExample 3:\\nInput: head = [1]\\nOutput: [1]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of nodes in the\\xc2\\xa0list\\xc2\\xa0is in the range [0, 100].\\n0 <= Node.val <= 100\\n\\n\""
    },
    {
        "URL": "https://leetcode.com/problems/reverse-nodes-in-k-group",
        "Title": "Reverse Nodes in k-Group ",
        "Description": "b\"Given the head of a linked list, reverse the nodes of the list k at a time, and return the modified list.\\nk is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes, in the end, should remain as it is.\\nYou may not alter the values in the list's nodes, only nodes themselves may be changed.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: head = [1,2,3,4,5], k = 2\\nOutput: [2,1,4,3,5]\\n\\nExample 2:\\n\\nInput: head = [1,2,3,4,5], k = 3\\nOutput: [3,2,1,4,5]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of nodes in the list is n.\\n1 <= k <= n <= 5000\\n0 <= Node.val <= 1000\\n\\n\\xc2\\xa0\\nFollow-up: Can you solve the problem in O(1) extra memory space?\\n\""
    },
    {
        "URL": "https://leetcode.com/problems/remove-duplicates-from-sorted-array",
        "Title": "Remove Duplicates from Sorted Array ",
        "Description": "b'Given an integer array nums sorted in non-decreasing order, remove the duplicates in-place such that each unique element appears only once. The relative order of the elements should be kept the same.\\nSince it is impossible to change the length of the array in some languages, you must instead have the result be placed in the first part of the array nums. More formally, if there are k elements after removing the duplicates, then the first k elements of nums\\xc2\\xa0should hold the final result. It does not matter what you leave beyond the first\\xc2\\xa0k\\xc2\\xa0elements.\\nReturn k after placing the final result in the first k slots of nums.\\nDo not allocate extra space for another array. You must do this by modifying the input array in-place with O(1) extra memory.\\nCustom Judge:\\nThe judge will test your solution with the following code:\\nint[] nums = [...]; // Input array\\nint[] expectedNums = [...]; // The expected answer with correct length\\n\\nint k = removeDuplicates(nums); // Calls your implementation\\n\\nassert k == expectedNums.length;\\nfor (int i = 0; i < k; i++) {\\n    assert nums[i] == expectedNums[i];\\n}\\n\\nIf all assertions pass, then your solution will be accepted.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [1,1,2]\\nOutput: 2, nums = [1,2,_]\\nExplanation: Your function should return k = 2, with the first two elements of nums being 1 and 2 respectively.\\nIt does not matter what you leave beyond the returned k (hence they are underscores).\\n\\nExample 2:\\nInput: nums = [0,0,1,1,1,2,2,3,3,4]\\nOutput: 5, nums = [0,1,2,3,4,_,_,_,_,_]\\nExplanation: Your function should return k = 5, with the first five elements of nums being 0, 1, 2, 3, and 4 respectively.\\nIt does not matter what you leave beyond the returned k (hence they are underscores).\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 3 * 104\\n-100 <= nums[i] <= 100\\nnums is sorted in non-decreasing order.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/remove-element",
        "Title": "Remove Element ",
        "Description": "b'Given an integer array nums and an integer val, remove all occurrences of val in nums in-place. The relative order of the elements may be changed.\\nSince it is impossible to change the length of the array in some languages, you must instead have the result be placed in the first part of the array nums. More formally, if there are k elements after removing the duplicates, then the first k elements of nums should hold the final result. It does not matter what you leave beyond the first k elements.\\nReturn k after placing the final result in the first k slots of nums.\\nDo not allocate extra space for another array. You must do this by modifying the input array in-place with O(1) extra memory.\\nCustom Judge:\\nThe judge will test your solution with the following code:\\nint[] nums = [...]; // Input array\\nint val = ...; // Value to remove\\nint[] expectedNums = [...]; // The expected answer with correct length.\\n                            // It is sorted with no values equaling val.\\n\\nint k = removeElement(nums, val); // Calls your implementation\\n\\nassert k == expectedNums.length;\\nsort(nums, 0, k); // Sort the first k elements of nums\\nfor (int i = 0; i < actualLength; i++) {\\n    assert nums[i] == expectedNums[i];\\n}\\n\\nIf all assertions pass, then your solution will be accepted.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [3,2,2,3], val = 3\\nOutput: 2, nums = [2,2,_,_]\\nExplanation: Your function should return k = 2, with the first two elements of nums being 2.\\nIt does not matter what you leave beyond the returned k (hence they are underscores).\\n\\nExample 2:\\nInput: nums = [0,1,2,2,3,0,4,2], val = 2\\nOutput: 5, nums = [0,1,4,0,3,_,_,_]\\nExplanation: Your function should return k = 5, with the first five elements of nums containing 0, 0, 1, 3, and 4.\\nNote that the five elements can be returned in any order.\\nIt does not matter what you leave beyond the returned k (hence they are underscores).\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n0 <= nums.length <= 100\\n0 <= nums[i] <= 50\\n0 <= val <= 100\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/implement-strstr",
        "Title": "Implement strStr() ",
        "Description": "b'Implement strStr().\\nGiven two strings needle and haystack, return the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.\\nClarification:\\nWhat should we return when needle is an empty string? This is a great question to ask during an interview.\\nFor the purpose of this problem, we will return 0 when needle is an empty string. This is consistent to C\\'s strstr() and Java\\'s indexOf().\\n\\xc2\\xa0\\nExample 1:\\nInput: haystack = \"hello\", needle = \"ll\"\\nOutput: 2\\n\\nExample 2:\\nInput: haystack = \"aaaaa\", needle = \"bba\"\\nOutput: -1\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= haystack.length, needle.length <= 104\\nhaystack and needle consist of only lowercase English characters.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/divide-two-integers",
        "Title": "Divide Two Integers ",
        "Description": "b'Given two integers dividend and divisor, divide two integers without using multiplication, division, and mod operator.\\nThe integer division should truncate toward zero, which means losing its fractional part. For example, 8.345 would be truncated to 8, and -2.7335 would be truncated to -2.\\nReturn the quotient after dividing dividend by divisor.\\nNote: Assume we are dealing with an environment that could only store integers within the 32-bit signed integer range: [\\xe2\\x88\\x92231, 231 \\xe2\\x88\\x92 1]. For this problem, if the quotient is strictly greater than 231 - 1, then return 231 - 1, and if the quotient is strictly less than -231, then return -231.\\n\\xc2\\xa0\\nExample 1:\\nInput: dividend = 10, divisor = 3\\nOutput: 3\\nExplanation: 10/3 = 3.33333.. which is truncated to 3.\\n\\nExample 2:\\nInput: dividend = 7, divisor = -3\\nOutput: -2\\nExplanation: 7/-3 = -2.33333.. which is truncated to -2.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n-231 <= dividend, divisor <= 231 - 1\\ndivisor != 0\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/substring-with-concatenation-of-all-words",
        "Title": "Substring with Concatenation of All Words ",
        "Description": "b'You are given a string s and an array of strings words of the same length. Return\\xc2\\xa0all starting indices of substring(s) in s\\xc2\\xa0that is a concatenation of each word in words exactly once, in any order,\\xc2\\xa0and without any intervening characters.\\nYou can return the answer in any order.\\n\\xc2\\xa0\\nExample 1:\\nInput: s = \"barfoothefoobarman\", words = [\"foo\",\"bar\"]\\nOutput: [0,9]\\nExplanation: Substrings starting at index 0 and 9 are \"barfoo\" and \"foobar\" respectively.\\nThe output order does not matter, returning [9,0] is fine too.\\n\\nExample 2:\\nInput: s = \"wordgoodgoodgoodbestword\", words = [\"word\",\"good\",\"best\",\"word\"]\\nOutput: []\\n\\nExample 3:\\nInput: s = \"barfoofoobarthefoobarman\", words = [\"bar\",\"foo\",\"the\"]\\nOutput: [6,9,12]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= s.length <= 104\\ns consists of lower-case English letters.\\n1 <= words.length <= 5000\\n1 <= words[i].length <= 30\\nwords[i]\\xc2\\xa0consists of lower-case English letters.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/next-permutation",
        "Title": "Next Permutation ",
        "Description": "b'A permutation of an array of integers is an arrangement of its members into a sequence or linear order.\\n\\nFor example, for arr = [1,2,3], the following are considered permutations of arr: [1,2,3], [1,3,2], [3,1,2], [2,3,1].\\n\\nThe next permutation of an array of integers is the next lexicographically greater permutation of its integer. More formally, if all the permutations of the array are sorted in one container according to their lexicographical order, then the next permutation of that array is the permutation that follows it in the sorted container. If such arrangement is not possible, the array must be rearranged as the lowest possible order (i.e., sorted in ascending order).\\n\\nFor example, the next permutation of arr = [1,2,3] is [1,3,2].\\nSimilarly, the next permutation of arr = [2,3,1] is [3,1,2].\\nWhile the next permutation of arr = [3,2,1] is [1,2,3] because [3,2,1] does not have a lexicographical larger rearrangement.\\n\\nGiven an array of integers nums, find the next permutation of nums.\\nThe replacement must be in place and use only constant extra memory.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [1,2,3]\\nOutput: [1,3,2]\\n\\nExample 2:\\nInput: nums = [3,2,1]\\nOutput: [1,2,3]\\n\\nExample 3:\\nInput: nums = [1,1,5]\\nOutput: [1,5,1]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 100\\n0 <= nums[i] <= 100\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/longest-valid-parentheses",
        "Title": "Longest Valid Parentheses ",
        "Description": "b'Given a string containing just the characters \\'(\\' and \\')\\', find the length of the longest valid (well-formed) parentheses substring.\\n\\xc2\\xa0\\nExample 1:\\nInput: s = \"(()\"\\nOutput: 2\\nExplanation: The longest valid parentheses substring is \"()\".\\n\\nExample 2:\\nInput: s = \")()())\"\\nOutput: 4\\nExplanation: The longest valid parentheses substring is \"()()\".\\n\\nExample 3:\\nInput: s = \"\"\\nOutput: 0\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n0 <= s.length <= 3 * 104\\ns[i] is \\'(\\', or \\')\\'.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/search-in-rotated-sorted-array",
        "Title": "Search in Rotated Sorted Array ",
        "Description": "b'There is an integer array nums sorted in ascending order (with distinct values).\\nPrior to being passed to your function, nums is possibly rotated at an unknown pivot index k (1 <= k < nums.length) such that the resulting array is [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). For example, [0,1,2,4,5,6,7] might be rotated at pivot index 3 and become [4,5,6,7,0,1,2].\\nGiven the array nums after the possible rotation and an integer target, return the index of target if it is in nums, or -1 if it is not in nums.\\nYou must write an algorithm with O(log n) runtime complexity.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [4,5,6,7,0,1,2], target = 0\\nOutput: 4\\nExample 2:\\nInput: nums = [4,5,6,7,0,1,2], target = 3\\nOutput: -1\\nExample 3:\\nInput: nums = [1], target = 0\\nOutput: -1\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 5000\\n-104 <= nums[i] <= 104\\nAll values of nums are unique.\\nnums is an ascending array that is possibly rotated.\\n-104 <= target <= 104\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array",
        "Title": "Find First and Last Position of Element in Sorted Array ",
        "Description": "b'Given an array of integers nums sorted in non-decreasing order, find the starting and ending position of a given target value.\\nIf target is not found in the array, return [-1, -1].\\nYou must\\xc2\\xa0write an algorithm with\\xc2\\xa0O(log n) runtime complexity.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [5,7,7,8,8,10], target = 8\\nOutput: [3,4]\\nExample 2:\\nInput: nums = [5,7,7,8,8,10], target = 6\\nOutput: [-1,-1]\\nExample 3:\\nInput: nums = [], target = 0\\nOutput: [-1,-1]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n0 <= nums.length <= 105\\n-109\\xc2\\xa0<= nums[i]\\xc2\\xa0<= 109\\nnums is a non-decreasing array.\\n-109\\xc2\\xa0<= target\\xc2\\xa0<= 109\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/search-insert-position",
        "Title": "Search Insert Position ",
        "Description": "b'Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.\\nYou must\\xc2\\xa0write an algorithm with\\xc2\\xa0O(log n) runtime complexity.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [1,3,5,6], target = 5\\nOutput: 2\\n\\nExample 2:\\nInput: nums = [1,3,5,6], target = 2\\nOutput: 1\\n\\nExample 3:\\nInput: nums = [1,3,5,6], target = 7\\nOutput: 4\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 104\\n-104 <= nums[i] <= 104\\nnums contains distinct values sorted in ascending order.\\n-104 <= target <= 104\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/valid-sudoku",
        "Title": "Valid Sudoku ",
        "Description": "b'Determine if a\\xc2\\xa09 x 9 Sudoku board\\xc2\\xa0is valid.\\xc2\\xa0Only the filled cells need to be validated\\xc2\\xa0according to the following rules:\\n\\nEach row\\xc2\\xa0must contain the\\xc2\\xa0digits\\xc2\\xa01-9 without repetition.\\nEach column must contain the digits\\xc2\\xa01-9\\xc2\\xa0without repetition.\\nEach of the nine\\xc2\\xa03 x 3 sub-boxes of the grid must contain the digits\\xc2\\xa01-9\\xc2\\xa0without repetition.\\n\\nNote:\\n\\nA Sudoku board (partially filled) could be valid but is not necessarily solvable.\\nOnly the filled cells need to be validated according to the mentioned\\xc2\\xa0rules.\\n\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: board = \\n[[\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"]\\n,[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"]\\n,[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"]\\n,[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"]\\n,[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"]\\n,[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"]\\n,[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"]\\n,[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"]\\n,[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]\\nOutput: true\\n\\nExample 2:\\nInput: board = \\n[[\"8\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"]\\n,[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"]\\n,[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"]\\n,[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"]\\n,[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"]\\n,[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"]\\n,[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"]\\n,[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"]\\n,[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]\\nOutput: false\\nExplanation: Same as Example 1, except with the 5 in the top left corner being modified to 8. Since there are two 8\\'s in the top left 3x3 sub-box, it is invalid.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nboard.length == 9\\nboard[i].length == 9\\nboard[i][j] is a digit 1-9 or \\'.\\'.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/sudoku-solver",
        "Title": "Sudoku Solver ",
        "Description": "b'Write a program to solve a Sudoku puzzle by filling the empty cells.\\nA sudoku solution must satisfy all of the following rules:\\n\\nEach of the digits 1-9 must occur exactly once in each row.\\nEach of the digits 1-9 must occur exactly once in each column.\\nEach of the digits 1-9 must occur exactly once in each of the 9 3x3 sub-boxes of the grid.\\n\\nThe \\'.\\' character indicates empty cells.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: board = [[\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"],[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"],[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"],[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"],[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"],[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"],[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"],[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"],[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]\\nOutput: [[\"5\",\"3\",\"4\",\"6\",\"7\",\"8\",\"9\",\"1\",\"2\"],[\"6\",\"7\",\"2\",\"1\",\"9\",\"5\",\"3\",\"4\",\"8\"],[\"1\",\"9\",\"8\",\"3\",\"4\",\"2\",\"5\",\"6\",\"7\"],[\"8\",\"5\",\"9\",\"7\",\"6\",\"1\",\"4\",\"2\",\"3\"],[\"4\",\"2\",\"6\",\"8\",\"5\",\"3\",\"7\",\"9\",\"1\"],[\"7\",\"1\",\"3\",\"9\",\"2\",\"4\",\"8\",\"5\",\"6\"],[\"9\",\"6\",\"1\",\"5\",\"3\",\"7\",\"2\",\"8\",\"4\"],[\"2\",\"8\",\"7\",\"4\",\"1\",\"9\",\"6\",\"3\",\"5\"],[\"3\",\"4\",\"5\",\"2\",\"8\",\"6\",\"1\",\"7\",\"9\"]]\\nExplanation:\\xc2\\xa0The input board is shown above and the only valid solution is shown below:\\n\\n\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nboard.length == 9\\nboard[i].length == 9\\nboard[i][j] is a digit or \\'.\\'.\\nIt is guaranteed that the input board has only one solution.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/count-and-say",
        "Title": "Count and Say ",
        "Description": "b'The count-and-say sequence is a sequence of digit strings defined by the recursive formula:\\n\\ncountAndSay(1) = \"1\"\\ncountAndSay(n) is the way you would \"say\" the digit string from countAndSay(n-1), which is then converted into a different digit string.\\n\\nTo determine how you \"say\" a digit string, split it into the minimal number of substrings such that each substring contains exactly one unique digit. Then for each substring, say the number of digits, then say the digit. Finally, concatenate every said digit.\\nFor example, the saying and conversion for digit string \"3322251\":\\n\\nGiven a positive integer n, return the nth term of the count-and-say sequence.\\n\\xc2\\xa0\\nExample 1:\\nInput: n = 1\\nOutput: \"1\"\\nExplanation: This is the base case.\\n\\nExample 2:\\nInput: n = 4\\nOutput: \"1211\"\\nExplanation:\\ncountAndSay(1) = \"1\"\\ncountAndSay(2) = say \"1\" = one 1 = \"11\"\\ncountAndSay(3) = say \"11\" = two 1\\'s = \"21\"\\ncountAndSay(4) = say \"21\" = one 2 + one 1 = \"12\" + \"11\" = \"1211\"\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= n <= 30\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/combination-sum",
        "Title": "Combination Sum ",
        "Description": "b'Given an array of distinct integers candidates and a target integer target, return a list of all unique combinations of candidates where the chosen numbers sum to target. You may return the combinations in any order.\\nThe same number may be chosen from candidates an unlimited number of times. Two combinations are unique if the frequency of at least one of the chosen numbers is different.\\nIt is guaranteed that the number of unique combinations that sum up to target is less than 150 combinations for the given input.\\n\\xc2\\xa0\\nExample 1:\\nInput: candidates = [2,3,6,7], target = 7\\nOutput: [[2,2,3],[7]]\\nExplanation:\\n2 and 3 are candidates, and 2 + 2 + 3 = 7. Note that 2 can be used multiple times.\\n7 is a candidate, and 7 = 7.\\nThese are the only two combinations.\\n\\nExample 2:\\nInput: candidates = [2,3,5], target = 8\\nOutput: [[2,2,2,2],[2,3,3],[3,5]]\\n\\nExample 3:\\nInput: candidates = [2], target = 1\\nOutput: []\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= candidates.length <= 30\\n1 <= candidates[i] <= 200\\nAll elements of candidates are distinct.\\n1 <= target <= 500\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/combination-sum-ii",
        "Title": "Combination Sum II ",
        "Description": "b'Given a collection of candidate numbers (candidates) and a target number (target), find all unique combinations in candidates\\xc2\\xa0where the candidate numbers sum to target.\\nEach number in candidates\\xc2\\xa0may only be used once in the combination.\\nNote:\\xc2\\xa0The solution set must not contain duplicate combinations.\\n\\xc2\\xa0\\nExample 1:\\nInput: candidates = [10,1,2,7,6,1,5], target = 8\\nOutput: \\n[\\n[1,1,6],\\n[1,2,5],\\n[1,7],\\n[2,6]\\n]\\n\\nExample 2:\\nInput: candidates = [2,5,2,1,2], target = 5\\nOutput: \\n[\\n[1,2,2],\\n[5]\\n]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <=\\xc2\\xa0candidates.length <= 100\\n1 <=\\xc2\\xa0candidates[i] <= 50\\n1 <= target <= 30\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/first-missing-positive",
        "Title": "First Missing Positive ",
        "Description": "b'Given an unsorted integer array nums, return the smallest missing positive integer.\\nYou must implement an algorithm that runs in O(n) time and uses constant extra space.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [1,2,0]\\nOutput: 3\\nExample 2:\\nInput: nums = [3,4,-1,1]\\nOutput: 2\\nExample 3:\\nInput: nums = [7,8,9,11,12]\\nOutput: 1\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 5 * 105\\n-231 <= nums[i] <= 231 - 1\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/trapping-rain-water",
        "Title": "Trapping Rain Water ",
        "Description": "b'Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: height = [0,1,0,2,1,0,1,3,2,1,2,1]\\nOutput: 6\\nExplanation: The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped.\\n\\nExample 2:\\nInput: height = [4,2,0,3,2,5]\\nOutput: 9\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nn == height.length\\n1 <= n <= 2 * 104\\n0 <= height[i] <= 105\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/multiply-strings",
        "Title": "Multiply Strings ",
        "Description": "b'Given two non-negative integers num1 and num2 represented as strings, return the product of num1 and num2, also represented as a string.\\nNote:\\xc2\\xa0You must not use any built-in BigInteger library or convert the inputs to integer directly.\\n\\xc2\\xa0\\nExample 1:\\nInput: num1 = \"2\", num2 = \"3\"\\nOutput: \"6\"\\nExample 2:\\nInput: num1 = \"123\", num2 = \"456\"\\nOutput: \"56088\"\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= num1.length, num2.length <= 200\\nnum1 and num2 consist of digits only.\\nBoth num1 and num2\\xc2\\xa0do not contain any leading zero, except the number 0 itself.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/wildcard-matching",
        "Title": "Wildcard Matching ",
        "Description": "b'Given an input string (s) and a pattern (p), implement wildcard pattern matching with support for \\'?\\' and \\'*\\' where:\\n\\n\\'?\\' Matches any single character.\\n\\'*\\' Matches any sequence of characters (including the empty sequence).\\n\\nThe matching should cover the entire input string (not partial).\\n\\xc2\\xa0\\nExample 1:\\nInput: s = \"aa\", p = \"a\"\\nOutput: false\\nExplanation: \"a\" does not match the entire string \"aa\".\\n\\nExample 2:\\nInput: s = \"aa\", p = \"*\"\\nOutput: true\\nExplanation:\\xc2\\xa0\\'*\\' matches any sequence.\\n\\nExample 3:\\nInput: s = \"cb\", p = \"?a\"\\nOutput: false\\nExplanation:\\xc2\\xa0\\'?\\' matches \\'c\\', but the second letter is \\'a\\', which does not match \\'b\\'.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n0 <= s.length, p.length <= 2000\\ns contains only lowercase English letters.\\np contains only lowercase English letters, \\'?\\' or \\'*\\'.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/jump-game-ii",
        "Title": "Jump Game II ",
        "Description": "b'Given an array of non-negative integers nums, you are initially positioned at the first index of the array.\\nEach element in the array represents your maximum jump length at that position.\\nYour goal is to reach the last index in the minimum number of jumps.\\nYou can assume that you can always reach the last index.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [2,3,1,1,4]\\nOutput: 2\\nExplanation: The minimum number of jumps to reach the last index is 2. Jump 1 step from index 0 to 1, then 3 steps to the last index.\\n\\nExample 2:\\nInput: nums = [2,3,0,1,4]\\nOutput: 2\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 104\\n0 <= nums[i] <= 1000\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/permutations",
        "Title": "Permutations ",
        "Description": "b'Given an array nums of distinct integers, return all the possible permutations. You can return the answer in any order.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [1,2,3]\\nOutput: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]\\nExample 2:\\nInput: nums = [0,1]\\nOutput: [[0,1],[1,0]]\\nExample 3:\\nInput: nums = [1]\\nOutput: [[1]]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 6\\n-10 <= nums[i] <= 10\\nAll the integers of nums are unique.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/permutations-ii",
        "Title": "Permutations II ",
        "Description": "b'Given a collection of numbers, nums,\\xc2\\xa0that might contain duplicates, return all possible unique permutations in any order.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [1,1,2]\\nOutput:\\n[[1,1,2],\\n [1,2,1],\\n [2,1,1]]\\n\\nExample 2:\\nInput: nums = [1,2,3]\\nOutput: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 8\\n-10 <= nums[i] <= 10\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/rotate-image",
        "Title": "Rotate Image ",
        "Description": "b'You are given an n x n 2D matrix representing an image, rotate the image by 90 degrees (clockwise).\\nYou have to rotate the image in-place, which means you have to modify the input 2D matrix directly. DO NOT allocate another 2D matrix and do the rotation.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: matrix = [[1,2,3],[4,5,6],[7,8,9]]\\nOutput: [[7,4,1],[8,5,2],[9,6,3]]\\n\\nExample 2:\\n\\nInput: matrix = [[5,1,9,11],[2,4,8,10],[13,3,6,7],[15,14,12,16]]\\nOutput: [[15,13,2,5],[14,3,4,1],[12,6,8,9],[16,7,10,11]]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nn == matrix.length == matrix[i].length\\n1 <= n <= 20\\n-1000 <= matrix[i][j] <= 1000\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/group-anagrams",
        "Title": "Group Anagrams ",
        "Description": "b'Given an array of strings strs, group the anagrams together. You can return the answer in any order.\\nAn Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.\\n\\xc2\\xa0\\nExample 1:\\nInput: strs = [\"eat\",\"tea\",\"tan\",\"ate\",\"nat\",\"bat\"]\\nOutput: [[\"bat\"],[\"nat\",\"tan\"],[\"ate\",\"eat\",\"tea\"]]\\nExample 2:\\nInput: strs = [\"\"]\\nOutput: [[\"\"]]\\nExample 3:\\nInput: strs = [\"a\"]\\nOutput: [[\"a\"]]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= strs.length <= 104\\n0 <= strs[i].length <= 100\\nstrs[i] consists of lowercase English letters.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/powx-n",
        "Title": "Pow(x, n) ",
        "Description": "b'Implement pow(x, n), which calculates x raised to the power n (i.e., xn).\\n\\xc2\\xa0\\nExample 1:\\nInput: x = 2.00000, n = 10\\nOutput: 1024.00000\\n\\nExample 2:\\nInput: x = 2.10000, n = 3\\nOutput: 9.26100\\n\\nExample 3:\\nInput: x = 2.00000, n = -2\\nOutput: 0.25000\\nExplanation: 2-2 = 1/22 = 1/4 = 0.25\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n-100.0 < x < 100.0\\n-231 <= n <= 231-1\\n-104 <= xn <= 104\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/n-queens",
        "Title": "N-Queens ",
        "Description": "b'The n-queens puzzle is the problem of placing n queens on an n x n chessboard such that no two queens attack each other.\\nGiven an integer n, return all distinct solutions to the n-queens puzzle. You may return the answer in any order.\\nEach solution contains a distinct board configuration of the n-queens\\' placement, where \\'Q\\' and \\'.\\' both indicate a queen and an empty space, respectively.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: n = 4\\nOutput: [[\".Q..\",\"...Q\",\"Q...\",\"..Q.\"],[\"..Q.\",\"Q...\",\"...Q\",\".Q..\"]]\\nExplanation: There exist two distinct solutions to the 4-queens puzzle as shown above\\n\\nExample 2:\\nInput: n = 1\\nOutput: [[\"Q\"]]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= n <= 9\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/n-queens-ii",
        "Title": "N-Queens II ",
        "Description": "b'The n-queens puzzle is the problem of placing n queens on an n x n chessboard such that no two queens attack each other.\\nGiven an integer n, return the number of distinct solutions to the\\xc2\\xa0n-queens puzzle.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: n = 4\\nOutput: 2\\nExplanation: There are two distinct solutions to the 4-queens puzzle as shown.\\n\\nExample 2:\\nInput: n = 1\\nOutput: 1\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= n <= 9\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/maximum-subarray",
        "Title": "Maximum Subarray ",
        "Description": "b'Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.\\nA subarray is a contiguous part of an array.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [-2,1,-3,4,-1,2,1,-5,4]\\nOutput: 6\\nExplanation: [4,-1,2,1] has the largest sum = 6.\\n\\nExample 2:\\nInput: nums = [1]\\nOutput: 1\\n\\nExample 3:\\nInput: nums = [5,4,-1,7,8]\\nOutput: 23\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 105\\n-104 <= nums[i] <= 104\\n\\n\\xc2\\xa0\\nFollow up: If you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, which is more subtle.\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/spiral-matrix",
        "Title": "Spiral Matrix ",
        "Description": "b'Given an m x n matrix, return all elements of the matrix in spiral order.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: matrix = [[1,2,3],[4,5,6],[7,8,9]]\\nOutput: [1,2,3,6,9,8,7,4,5]\\n\\nExample 2:\\n\\nInput: matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]\\nOutput: [1,2,3,4,8,12,11,10,9,5,6,7]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nm == matrix.length\\nn == matrix[i].length\\n1 <= m, n <= 10\\n-100 <= matrix[i][j] <= 100\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/jump-game",
        "Title": "Jump Game ",
        "Description": "b\"You are given an integer array nums. You are initially positioned at the array's first index, and each element in the array represents your maximum jump length at that position.\\nReturn true if you can reach the last index, or false otherwise.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [2,3,1,1,4]\\nOutput: true\\nExplanation: Jump 1 step from index 0 to 1, then 3 steps to the last index.\\n\\nExample 2:\\nInput: nums = [3,2,1,0,4]\\nOutput: false\\nExplanation: You will always arrive at index 3 no matter what. Its maximum jump length is 0, which makes it impossible to reach the last index.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 104\\n0 <= nums[i] <= 105\\n\\n\""
    },
    {
        "URL": "https://leetcode.com/problems/merge-intervals",
        "Title": "Merge Intervals ",
        "Description": "b'Given an array\\xc2\\xa0of intervals\\xc2\\xa0where intervals[i] = [starti, endi], merge all overlapping intervals, and return an array of the non-overlapping intervals that cover all the intervals in the input.\\n\\xc2\\xa0\\nExample 1:\\nInput: intervals = [[1,3],[2,6],[8,10],[15,18]]\\nOutput: [[1,6],[8,10],[15,18]]\\nExplanation: Since intervals [1,3] and [2,6] overlap, merge them into [1,6].\\n\\nExample 2:\\nInput: intervals = [[1,4],[4,5]]\\nOutput: [[1,5]]\\nExplanation: Intervals [1,4] and [4,5] are considered overlapping.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= intervals.length <= 104\\nintervals[i].length == 2\\n0 <= starti <= endi <= 104\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/insert-interval",
        "Title": "Insert Interval ",
        "Description": "b'You are given an array of non-overlapping intervals intervals where intervals[i] = [starti, endi] represent the start and the end of the ith interval and intervals is sorted in ascending order by starti. You are also given an interval newInterval = [start, end] that represents the start and end of another interval.\\nInsert newInterval into intervals such that intervals is still sorted in ascending order by starti and intervals still does not have any overlapping intervals (merge overlapping intervals if necessary).\\nReturn intervals after the insertion.\\n\\xc2\\xa0\\nExample 1:\\nInput: intervals = [[1,3],[6,9]], newInterval = [2,5]\\nOutput: [[1,5],[6,9]]\\n\\nExample 2:\\nInput: intervals = [[1,2],[3,5],[6,7],[8,10],[12,16]], newInterval = [4,8]\\nOutput: [[1,2],[3,10],[12,16]]\\nExplanation: Because the new interval [4,8] overlaps with [3,5],[6,7],[8,10].\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n0 <= intervals.length <= 104\\nintervals[i].length == 2\\n0 <= starti <= endi <= 105\\nintervals is sorted by starti in ascending order.\\nnewInterval.length == 2\\n0 <= start <= end <= 105\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/length-of-last-word",
        "Title": "Length of Last Word ",
        "Description": "b'Given a string s consisting of words and spaces, return the length of the last word in the string.\\nA word is a maximal substring consisting of non-space characters only.\\n\\xc2\\xa0\\nExample 1:\\nInput: s = \"Hello World\"\\nOutput: 5\\nExplanation: The last word is \"World\" with length 5.\\n\\nExample 2:\\nInput: s = \"   fly me   to   the moon  \"\\nOutput: 4\\nExplanation: The last word is \"moon\" with length 4.\\n\\nExample 3:\\nInput: s = \"luffy is still joyboy\"\\nOutput: 6\\nExplanation: The last word is \"joyboy\" with length 6.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= s.length <= 104\\ns consists of only English letters and spaces \\' \\'.\\nThere will be at least one word in s.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/spiral-matrix-ii",
        "Title": "Spiral Matrix II ",
        "Description": "b'Given a positive integer n, generate an n x n matrix filled with elements from 1 to n2 in spiral order.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: n = 3\\nOutput: [[1,2,3],[8,9,4],[7,6,5]]\\n\\nExample 2:\\nInput: n = 1\\nOutput: [[1]]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= n <= 20\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/permutation-sequence",
        "Title": "Permutation Sequence ",
        "Description": "b'The set [1, 2, 3, ...,\\xc2\\xa0n] contains a total of n! unique permutations.\\nBy listing and labeling all of the permutations in order, we get the following sequence for n = 3:\\n\\n\"123\"\\n\"132\"\\n\"213\"\\n\"231\"\\n\"312\"\\n\"321\"\\n\\nGiven n and k, return the kth permutation sequence.\\n\\xc2\\xa0\\nExample 1:\\nInput: n = 3, k = 3\\nOutput: \"213\"\\nExample 2:\\nInput: n = 4, k = 9\\nOutput: \"2314\"\\nExample 3:\\nInput: n = 3, k = 1\\nOutput: \"123\"\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= n <= 9\\n1 <= k <= n!\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/rotate-list",
        "Title": "Rotate List ",
        "Description": "b'Given the head of a linked\\xc2\\xa0list, rotate the list to the right by k places.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: head = [1,2,3,4,5], k = 2\\nOutput: [4,5,1,2,3]\\n\\nExample 2:\\n\\nInput: head = [0,1,2], k = 4\\nOutput: [2,0,1]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of nodes in the list is in the range [0, 500].\\n-100 <= Node.val <= 100\\n0 <= k <= 2 * 109\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/unique-paths",
        "Title": "Unique Paths ",
        "Description": "b'There is a robot on an m x n grid. The robot is initially located at the top-left corner (i.e., grid[0][0]). The robot tries to move to the bottom-right corner (i.e., grid[m - 1][n - 1]). The robot can only move either down or right at any point in time.\\nGiven the two integers m and n, return the number of possible unique paths that the robot can take to reach the bottom-right corner.\\nThe test cases are generated so that the answer will be less than or equal to 2 * 109.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: m = 3, n = 7\\nOutput: 28\\n\\nExample 2:\\nInput: m = 3, n = 2\\nOutput: 3\\nExplanation: From the top-left corner, there are a total of 3 ways to reach the bottom-right corner:\\n1. Right -> Down -> Down\\n2. Down -> Down -> Right\\n3. Down -> Right -> Down\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= m, n <= 100\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/unique-paths-ii",
        "Title": "Unique Paths II ",
        "Description": "b'You are given an m x n integer array grid. There is a robot initially located at the top-left corner (i.e., grid[0][0]). The robot tries to move to the bottom-right corner (i.e., grid[m-1][n-1]). The robot can only move either down or right at any point in time.\\nAn obstacle and space are marked as 1 or 0 respectively in grid. A path that the robot takes cannot include any square that is an obstacle.\\nReturn the number of possible unique paths that the robot can take to reach the bottom-right corner.\\nThe testcases are generated so that the answer will be less than or equal to 2 * 109.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: obstacleGrid = [[0,0,0],[0,1,0],[0,0,0]]\\nOutput: 2\\nExplanation: There is one obstacle in the middle of the 3x3 grid above.\\nThere are two ways to reach the bottom-right corner:\\n1. Right -> Right -> Down -> Down\\n2. Down -> Down -> Right -> Right\\n\\nExample 2:\\n\\nInput: obstacleGrid = [[0,1],[0,0]]\\nOutput: 1\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nm == obstacleGrid.length\\nn == obstacleGrid[i].length\\n1 <= m, n <= 100\\nobstacleGrid[i][j] is 0 or 1.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/minimum-path-sum",
        "Title": "Minimum Path Sum ",
        "Description": "b'Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right, which minimizes the sum of all numbers along its path.\\nNote: You can only move either down or right at any point in time.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: grid = [[1,3,1],[1,5,1],[4,2,1]]\\nOutput: 7\\nExplanation: Because the path 1 \\xe2\\x86\\x92 3 \\xe2\\x86\\x92 1 \\xe2\\x86\\x92 1 \\xe2\\x86\\x92 1 minimizes the sum.\\n\\nExample 2:\\nInput: grid = [[1,2,3],[4,5,6]]\\nOutput: 12\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nm == grid.length\\nn == grid[i].length\\n1 <= m, n <= 200\\n0 <= grid[i][j] <= 100\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/valid-number",
        "Title": "Valid Number ",
        "Description": "b'A valid number can be split up into these components (in order):\\n\\nA decimal number or an integer.\\n(Optional) An \\'e\\' or \\'E\\', followed by an integer.\\n\\nA decimal number can be split up into these components (in order):\\n\\n(Optional) A sign character (either \\'+\\' or \\'-\\').\\nOne of the following formats:\\n\\t\\nOne or more digits, followed by a dot \\'.\\'.\\nOne or more digits, followed by a dot \\'.\\', followed by one or more digits.\\nA dot \\'.\\', followed by one or more digits.\\n\\n\\n\\nAn integer can be split up into these components (in order):\\n\\n(Optional) A sign character (either \\'+\\' or \\'-\\').\\nOne or more digits.\\n\\nFor example, all the following are valid numbers: [\"2\", \"0089\", \"-0.1\", \"+3.14\", \"4.\", \"-.9\", \"2e10\", \"-90E3\", \"3e+7\", \"+6e-1\", \"53.5e93\", \"-123.456e789\"], while the following are not valid numbers: [\"abc\", \"1a\", \"1e\", \"e3\", \"99e2.5\", \"--6\", \"-+3\", \"95a54e53\"].\\nGiven a string s, return true if s is a valid number.\\n\\xc2\\xa0\\nExample 1:\\nInput: s = \"0\"\\nOutput: true\\n\\nExample 2:\\nInput: s = \"e\"\\nOutput: false\\n\\nExample 3:\\nInput: s = \".\"\\nOutput: false\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= s.length <= 20\\ns consists of only English letters (both uppercase and lowercase), digits (0-9), plus \\'+\\', minus \\'-\\', or dot \\'.\\'.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/plus-one",
        "Title": "Plus One ",
        "Description": "b\"You are given a large integer represented as an integer array digits, where each digits[i] is the ith digit of the integer. The digits are ordered from most significant to least significant in left-to-right order. The large integer does not contain any leading 0's.\\nIncrement the large integer by one and return the resulting array of digits.\\n\\xc2\\xa0\\nExample 1:\\nInput: digits = [1,2,3]\\nOutput: [1,2,4]\\nExplanation: The array represents the integer 123.\\nIncrementing by one gives 123 + 1 = 124.\\nThus, the result should be [1,2,4].\\n\\nExample 2:\\nInput: digits = [4,3,2,1]\\nOutput: [4,3,2,2]\\nExplanation: The array represents the integer 4321.\\nIncrementing by one gives 4321 + 1 = 4322.\\nThus, the result should be [4,3,2,2].\\n\\nExample 3:\\nInput: digits = [9]\\nOutput: [1,0]\\nExplanation: The array represents the integer 9.\\nIncrementing by one gives 9 + 1 = 10.\\nThus, the result should be [1,0].\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= digits.length <= 100\\n0 <= digits[i] <= 9\\ndigits does not contain any leading 0's.\\n\\n\""
    },
    {
        "URL": "https://leetcode.com/problems/add-binary",
        "Title": "Add Binary ",
        "Description": "b'Given two binary strings a and b, return their sum as a binary string.\\n\\xc2\\xa0\\nExample 1:\\nInput: a = \"11\", b = \"1\"\\nOutput: \"100\"\\nExample 2:\\nInput: a = \"1010\", b = \"1011\"\\nOutput: \"10101\"\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= a.length, b.length <= 104\\na and b consist\\xc2\\xa0only of \\'0\\' or \\'1\\' characters.\\nEach string does not contain leading zeros except for the zero itself.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/text-justification",
        "Title": "Text Justification ",
        "Description": "b'Given an array of strings words and a width maxWidth, format the text such that each line has exactly maxWidth characters and is fully (left and right) justified.\\nYou should pack your words in a greedy approach; that is, pack as many words as you can in each line. Pad extra spaces \\' \\' when necessary so that each line has exactly maxWidth characters.\\nExtra spaces between words should be distributed as evenly as possible. If the number of spaces on a line does not divide evenly between words, the empty slots on the left will be assigned more spaces than the slots on the right.\\nFor the last line of text, it should be left-justified, and no extra space is inserted between words.\\nNote:\\n\\nA word is defined as a character sequence consisting of non-space characters only.\\nEach word\\'s length is guaranteed to be greater than 0 and not exceed maxWidth.\\nThe input array words contains at least one word.\\n\\n\\xc2\\xa0\\nExample 1:\\nInput: words = [\"This\", \"is\", \"an\", \"example\", \"of\", \"text\", \"justification.\"], maxWidth = 16\\nOutput:\\n[\\n\\xc2\\xa0 \\xc2\\xa0\"This \\xc2\\xa0 \\xc2\\xa0is \\xc2\\xa0 \\xc2\\xa0an\",\\n\\xc2\\xa0 \\xc2\\xa0\"example \\xc2\\xa0of text\",\\n\\xc2\\xa0 \\xc2\\xa0\"justification. \\xc2\\xa0\"\\n]\\nExample 2:\\nInput: words = [\"What\",\"must\",\"be\",\"acknowledgment\",\"shall\",\"be\"], maxWidth = 16\\nOutput:\\n[\\n\\xc2\\xa0 \"What \\xc2\\xa0 must \\xc2\\xa0 be\",\\n\\xc2\\xa0 \"acknowledgment \\xc2\\xa0\",\\n\\xc2\\xa0 \"shall be \\xc2\\xa0 \\xc2\\xa0 \\xc2\\xa0 \\xc2\\xa0\"\\n]\\nExplanation: Note that the last line is \"shall be    \" instead of \"shall     be\", because the last line must be left-justified instead of fully-justified.\\nNote that the second line is also left-justified because it contains only one word.\\nExample 3:\\nInput: words = [\"Science\",\"is\",\"what\",\"we\",\"understand\",\"well\",\"enough\",\"to\",\"explain\",\"to\",\"a\",\"computer.\",\"Art\",\"is\",\"everything\",\"else\",\"we\",\"do\"], maxWidth = 20\\nOutput:\\n[\\n\\xc2\\xa0 \"Science \\xc2\\xa0is \\xc2\\xa0what we\",\\n  \"understand \\xc2\\xa0 \\xc2\\xa0 \\xc2\\xa0well\",\\n\\xc2\\xa0 \"enough to explain to\",\\n\\xc2\\xa0 \"a \\xc2\\xa0computer. \\xc2\\xa0Art is\",\\n\\xc2\\xa0 \"everything \\xc2\\xa0else \\xc2\\xa0we\",\\n\\xc2\\xa0 \"do \\xc2\\xa0 \\xc2\\xa0 \\xc2\\xa0 \\xc2\\xa0 \\xc2\\xa0 \\xc2\\xa0 \\xc2\\xa0 \\xc2\\xa0 \\xc2\\xa0\"\\n]\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= words.length <= 300\\n1 <= words[i].length <= 20\\nwords[i] consists of only English letters and symbols.\\n1 <= maxWidth <= 100\\nwords[i].length <= maxWidth\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/sqrtx",
        "Title": "Sqrt(x) ",
        "Description": "b'Given a non-negative integer x,\\xc2\\xa0compute and return the square root of x.\\nSince the return type\\xc2\\xa0is an integer, the decimal digits are truncated, and only the integer part of the result\\xc2\\xa0is returned.\\nNote:\\xc2\\xa0You are not allowed to use any built-in exponent function or operator, such as pow(x, 0.5) or\\xc2\\xa0x ** 0.5.\\n\\xc2\\xa0\\nExample 1:\\nInput: x = 4\\nOutput: 2\\n\\nExample 2:\\nInput: x = 8\\nOutput: 2\\nExplanation: The square root of 8 is 2.82842..., and since the decimal part is truncated, 2 is returned.\\n\\xc2\\xa0\\nConstraints:\\n\\n0 <= x <= 231 - 1\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/climbing-stairs",
        "Title": "Climbing Stairs ",
        "Description": "b'You are climbing a staircase. It takes n steps to reach the top.\\nEach time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?\\n\\xc2\\xa0\\nExample 1:\\nInput: n = 2\\nOutput: 2\\nExplanation: There are two ways to climb to the top.\\n1. 1 step + 1 step\\n2. 2 steps\\n\\nExample 2:\\nInput: n = 3\\nOutput: 3\\nExplanation: There are three ways to climb to the top.\\n1. 1 step + 1 step + 1 step\\n2. 1 step + 2 steps\\n3. 2 steps + 1 step\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= n <= 45\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/simplify-path",
        "Title": "Simplify Path ",
        "Description": "b'Given a string path, which is an absolute path (starting with a slash \\'/\\') to a file or directory in a Unix-style file system, convert it to the simplified canonical path.\\nIn a Unix-style file system, a period \\'.\\' refers to the current directory, a double period \\'..\\' refers to the directory up a level, and any multiple consecutive slashes (i.e. \\'//\\') are treated as a single slash \\'/\\'. For this problem, any other format of periods such as \\'...\\' are treated as file/directory names.\\nThe canonical path should have the following format:\\n\\nThe path starts with a single slash \\'/\\'.\\nAny two directories are separated by a single slash \\'/\\'.\\nThe path does not end with a trailing \\'/\\'.\\nThe path only contains the directories on the path from the root directory to the target file or directory (i.e., no period \\'.\\' or double period \\'..\\')\\n\\nReturn the simplified canonical path.\\n\\xc2\\xa0\\nExample 1:\\nInput: path = \"/home/\"\\nOutput: \"/home\"\\nExplanation: Note that there is no trailing slash after the last directory name.\\n\\nExample 2:\\nInput: path = \"/../\"\\nOutput: \"/\"\\nExplanation: Going one level up from the root directory is a no-op, as the root level is the highest level you can go.\\n\\nExample 3:\\nInput: path = \"/home//foo/\"\\nOutput: \"/home/foo\"\\nExplanation: In the canonical path, multiple consecutive slashes are replaced by a single one.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= path.length <= 3000\\npath consists of English letters, digits, period \\'.\\', slash \\'/\\' or \\'_\\'.\\npath is a valid absolute Unix path.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/edit-distance",
        "Title": "Edit Distance ",
        "Description": "b'Given two strings word1 and word2, return the minimum number of operations required to convert word1 to word2.\\nYou have the following three operations permitted on a word:\\n\\nInsert a character\\nDelete a character\\nReplace a character\\n\\n\\xc2\\xa0\\nExample 1:\\nInput: word1 = \"horse\", word2 = \"ros\"\\nOutput: 3\\nExplanation: \\nhorse -> rorse (replace \\'h\\' with \\'r\\')\\nrorse -> rose (remove \\'r\\')\\nrose -> ros (remove \\'e\\')\\n\\nExample 2:\\nInput: word1 = \"intention\", word2 = \"execution\"\\nOutput: 5\\nExplanation: \\nintention -> inention (remove \\'t\\')\\ninention -> enention (replace \\'i\\' with \\'e\\')\\nenention -> exention (replace \\'n\\' with \\'x\\')\\nexention -> exection (replace \\'n\\' with \\'c\\')\\nexection -> execution (insert \\'u\\')\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n0 <= word1.length, word2.length <= 500\\nword1 and word2 consist of lowercase English letters.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/set-matrix-zeroes",
        "Title": "Set Matrix Zeroes ",
        "Description": "b\"Given an m x n integer matrix matrix, if an element is 0, set its entire row and column to 0's.\\nYou must do it in place.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: matrix = [[1,1,1],[1,0,1],[1,1,1]]\\nOutput: [[1,0,1],[0,0,0],[1,0,1]]\\n\\nExample 2:\\n\\nInput: matrix = [[0,1,2,0],[3,4,5,2],[1,3,1,5]]\\nOutput: [[0,0,0,0],[0,4,5,0],[0,3,1,0]]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nm == matrix.length\\nn == matrix[0].length\\n1 <= m, n <= 200\\n-231 <= matrix[i][j] <= 231 - 1\\n\\n\\xc2\\xa0\\nFollow up:\\n\\nA straightforward solution using O(mn) space is probably a bad idea.\\nA simple improvement uses O(m + n) space, but still not the best solution.\\nCould you devise a constant space solution?\\n\\n\""
    },
    {
        "URL": "https://leetcode.com/problems/search-a-2d-matrix",
        "Title": "Search a 2D Matrix ",
        "Description": "b'Write an efficient algorithm that searches for a value target in an m x n integer matrix matrix. This matrix has the following properties:\\n\\nIntegers in each row are sorted from left to right.\\nThe first integer of each row is greater than the last integer of the previous row.\\n\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3\\nOutput: true\\n\\nExample 2:\\n\\nInput: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 13\\nOutput: false\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nm == matrix.length\\nn == matrix[i].length\\n1 <= m, n <= 100\\n-104 <= matrix[i][j], target <= 104\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/sort-colors",
        "Title": "Sort Colors ",
        "Description": "b\"Given an array nums with n objects colored red, white, or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white, and blue.\\nWe will use the integers 0, 1, and 2 to represent the color red, white, and blue, respectively.\\nYou must solve this problem without using the library's sort function.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [2,0,2,1,1,0]\\nOutput: [0,0,1,1,2,2]\\n\\nExample 2:\\nInput: nums = [2,0,1]\\nOutput: [0,1,2]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nn == nums.length\\n1 <= n <= 300\\nnums[i] is either 0, 1, or 2.\\n\\n\\xc2\\xa0\\nFollow up:\\xc2\\xa0Could you come up with a one-pass algorithm using only\\xc2\\xa0constant extra space?\\n\""
    },
    {
        "URL": "https://leetcode.com/problems/minimum-window-substring",
        "Title": "Minimum Window Substring ",
        "Description": "b'Given two strings s and t of lengths m and n respectively, return the minimum window substring of s such that every character in t (including duplicates) is included in the window. If there is no such substring, return the empty string \"\".\\nThe testcases will be generated such that the answer is unique.\\nA substring is a contiguous sequence of characters within the string.\\n\\xc2\\xa0\\nExample 1:\\nInput: s = \"ADOBECODEBANC\", t = \"ABC\"\\nOutput: \"BANC\"\\nExplanation: The minimum window substring \"BANC\" includes \\'A\\', \\'B\\', and \\'C\\' from string t.\\n\\nExample 2:\\nInput: s = \"a\", t = \"a\"\\nOutput: \"a\"\\nExplanation: The entire string s is the minimum window.\\n\\nExample 3:\\nInput: s = \"a\", t = \"aa\"\\nOutput: \"\"\\nExplanation: Both \\'a\\'s from t must be included in the window.\\nSince the largest window of s only has one \\'a\\', return empty string.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nm == s.length\\nn == t.length\\n1 <= m, n\\xc2\\xa0<= 105\\ns and t consist of uppercase and lowercase English letters.\\n\\n\\xc2\\xa0\\nFollow up: Could you find an algorithm that runs in O(m + n) time?'"
    },
    {
        "URL": "https://leetcode.com/problems/combinations",
        "Title": "Combinations ",
        "Description": "b'Given two integers n and k, return all possible combinations of k numbers out of the range [1, n].\\nYou may return the answer in any order.\\n\\xc2\\xa0\\nExample 1:\\nInput: n = 4, k = 2\\nOutput:\\n[\\n  [2,4],\\n  [3,4],\\n  [2,3],\\n  [1,2],\\n  [1,3],\\n  [1,4],\\n]\\n\\nExample 2:\\nInput: n = 1, k = 1\\nOutput: [[1]]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= n <= 20\\n1 <= k <= n\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/subsets",
        "Title": "Subsets ",
        "Description": "b'Given an integer array nums of unique elements, return all possible subsets (the power set).\\nThe solution set must not contain duplicate subsets. Return the solution in any order.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [1,2,3]\\nOutput: [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]\\n\\nExample 2:\\nInput: nums = [0]\\nOutput: [[],[0]]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 10\\n-10 <= nums[i] <= 10\\nAll the numbers of\\xc2\\xa0nums are unique.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/word-search",
        "Title": "Word Search ",
        "Description": "b'Given an m x n grid of characters board and a string word, return true if word exists in the grid.\\nThe word can be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: board = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], word = \"ABCCED\"\\nOutput: true\\n\\nExample 2:\\n\\nInput: board = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], word = \"SEE\"\\nOutput: true\\n\\nExample 3:\\n\\nInput: board = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], word = \"ABCB\"\\nOutput: false\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nm == board.length\\nn = board[i].length\\n1 <= m, n <= 6\\n1 <= word.length <= 15\\nboard and word consists of only lowercase and uppercase English letters.\\n\\n\\xc2\\xa0\\nFollow up: Could you use search pruning to make your solution faster with a larger board?\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/remove-duplicates-from-sorted-array-ii",
        "Title": "Remove Duplicates from Sorted Array II ",
        "Description": "b'Given an integer array nums sorted in non-decreasing order, remove some duplicates in-place such that each unique element appears at most twice. The relative order of the elements should be kept the same.\\nSince it is impossible to change the length of the array in some languages, you must instead have the result be placed in the first part of the array nums. More formally, if there are k elements after removing the duplicates, then the first k elements of nums\\xc2\\xa0should hold the final result. It does not matter what you leave beyond the first\\xc2\\xa0k\\xc2\\xa0elements.\\nReturn k after placing the final result in the first k slots of nums.\\nDo not allocate extra space for another array. You must do this by modifying the input array in-place with O(1) extra memory.\\nCustom Judge:\\nThe judge will test your solution with the following code:\\nint[] nums = [...]; // Input array\\nint[] expectedNums = [...]; // The expected answer with correct length\\n\\nint k = removeDuplicates(nums); // Calls your implementation\\n\\nassert k == expectedNums.length;\\nfor (int i = 0; i < k; i++) {\\n    assert nums[i] == expectedNums[i];\\n}\\n\\nIf all assertions pass, then your solution will be accepted.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [1,1,1,2,2,3]\\nOutput: 5, nums = [1,1,2,2,3,_]\\nExplanation: Your function should return k = 5, with the first five elements of nums being 1, 1, 2, 2 and 3 respectively.\\nIt does not matter what you leave beyond the returned k (hence they are underscores).\\n\\nExample 2:\\nInput: nums = [0,0,1,1,1,1,2,3,3]\\nOutput: 7, nums = [0,0,1,1,2,3,3,_,_]\\nExplanation: Your function should return k = 7, with the first seven elements of nums being 0, 0, 1, 1, 2, 3 and 3 respectively.\\nIt does not matter what you leave beyond the returned k (hence they are underscores).\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 3 * 104\\n-104 <= nums[i] <= 104\\nnums is sorted in non-decreasing order.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/search-in-rotated-sorted-array-ii",
        "Title": "Search in Rotated Sorted Array II ",
        "Description": "b'There is an integer array nums sorted in non-decreasing order (not necessarily with distinct values).\\nBefore being passed to your function, nums is rotated at an unknown pivot index k (0 <= k < nums.length) such that the resulting array is [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). For example, [0,1,2,4,4,4,5,6,6,7] might be rotated at pivot index 5 and become [4,5,6,6,7,0,1,2,4,4].\\nGiven the array nums after the rotation and an integer target, return true if target is in nums, or false if it is not in nums.\\nYou must decrease the overall operation steps as much as possible.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [2,5,6,0,0,1,2], target = 0\\nOutput: true\\nExample 2:\\nInput: nums = [2,5,6,0,0,1,2], target = 3\\nOutput: false\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 5000\\n-104 <= nums[i] <= 104\\nnums is guaranteed to be rotated at some pivot.\\n-104 <= target <= 104\\n\\n\\xc2\\xa0\\nFollow up: This problem is similar to\\xc2\\xa0Search in Rotated Sorted Array, but\\xc2\\xa0nums may contain duplicates. Would this affect the runtime complexity? How and why?\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/remove-duplicates-from-sorted-list-ii",
        "Title": "Remove Duplicates from Sorted List II ",
        "Description": "b'Given the head of a sorted linked list, delete all nodes that have duplicate numbers, leaving only distinct numbers from the original list. Return the linked list sorted as well.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: head = [1,2,3,3,4,4,5]\\nOutput: [1,2,5]\\n\\nExample 2:\\n\\nInput: head = [1,1,1,2,3]\\nOutput: [2,3]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of nodes in the list is in the range [0, 300].\\n-100 <= Node.val <= 100\\nThe list is guaranteed to be sorted in ascending order.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/remove-duplicates-from-sorted-list",
        "Title": "Remove Duplicates from Sorted List ",
        "Description": "b'Given the head of a sorted linked list, delete all duplicates such that each element appears only once. Return the linked list sorted as well.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: head = [1,1,2]\\nOutput: [1,2]\\n\\nExample 2:\\n\\nInput: head = [1,1,2,3,3]\\nOutput: [1,2,3]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of nodes in the list is in the range [0, 300].\\n-100 <= Node.val <= 100\\nThe list is guaranteed to be sorted in ascending order.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/largest-rectangle-in-histogram",
        "Title": "Largest Rectangle in Histogram ",
        "Description": "b\"Given an array of integers heights representing the histogram's bar height where the width of each bar is 1, return the area of the largest rectangle in the histogram.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: heights = [2,1,5,6,2,3]\\nOutput: 10\\nExplanation: The above is a histogram where width of each bar is 1.\\nThe largest rectangle is shown in the red area, which has an area = 10 units.\\n\\nExample 2:\\n\\nInput: heights = [2,4]\\nOutput: 4\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= heights.length <= 105\\n0 <= heights[i] <= 104\\n\\n\""
    },
    {
        "URL": "https://leetcode.com/problems/maximal-rectangle",
        "Title": "Maximal Rectangle ",
        "Description": "b'Given a rows x cols\\xc2\\xa0binary matrix filled with 0\\'s and 1\\'s, find the largest rectangle containing only 1\\'s and return its area.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: matrix = [[\"1\",\"0\",\"1\",\"0\",\"0\"],[\"1\",\"0\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"0\",\"0\",\"1\",\"0\"]]\\nOutput: 6\\nExplanation: The maximal rectangle is shown in the above picture.\\n\\nExample 2:\\nInput: matrix = [[\"0\"]]\\nOutput: 0\\n\\nExample 3:\\nInput: matrix = [[\"1\"]]\\nOutput: 1\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nrows == matrix.length\\ncols == matrix[i].length\\n1 <= row, cols <= 200\\nmatrix[i][j] is \\'0\\' or \\'1\\'.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/partition-list",
        "Title": "Partition List ",
        "Description": "b'Given the head of a linked list and a value x, partition it such that all nodes less than x come before nodes greater than or equal to x.\\nYou should preserve the original relative order of the nodes in each of the two partitions.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: head = [1,4,3,2,5,2], x = 3\\nOutput: [1,2,2,4,3,5]\\n\\nExample 2:\\nInput: head = [2,1], x = 2\\nOutput: [1,2]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of nodes in the list is in the range [0, 200].\\n-100 <= Node.val <= 100\\n-200 <= x <= 200\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/scramble-string",
        "Title": "Scramble String ",
        "Description": "b'We can scramble a string s to get a string t using the following algorithm:\\n\\nIf the length of the string is 1, stop.\\nIf the length of the string is > 1, do the following:\\n\\t\\nSplit the string into two non-empty substrings at a random index, i.e., if the string is s, divide it to x and y where s = x + y.\\nRandomly\\xc2\\xa0decide to swap the two substrings or to keep them in the same order. i.e., after this step, s may become s = x + y or s = y + x.\\nApply step 1 recursively on each of the two substrings x and y.\\n\\n\\n\\nGiven two strings s1 and s2 of the same length, return true if s2 is a scrambled string of s1, otherwise, return false.\\n\\xc2\\xa0\\nExample 1:\\nInput: s1 = \"great\", s2 = \"rgeat\"\\nOutput: true\\nExplanation: One possible scenario applied on s1 is:\\n\"great\" --> \"gr/eat\" // divide at random index.\\n\"gr/eat\" --> \"gr/eat\" // random decision is not to swap the two substrings and keep them in order.\\n\"gr/eat\" --> \"g/r / e/at\" // apply the same algorithm recursively on both substrings. divide at random index each of them.\\n\"g/r / e/at\" --> \"r/g / e/at\" // random decision was to swap the first substring and to keep the second substring in the same order.\\n\"r/g / e/at\" --> \"r/g / e/ a/t\" // again apply the algorithm recursively, divide \"at\" to \"a/t\".\\n\"r/g / e/ a/t\" --> \"r/g / e/ a/t\" // random decision is to keep both substrings in the same order.\\nThe algorithm stops now, and the result string is \"rgeat\" which is s2.\\nAs one possible scenario led s1 to be scrambled to s2, we return true.\\n\\nExample 2:\\nInput: s1 = \"abcde\", s2 = \"caebd\"\\nOutput: false\\n\\nExample 3:\\nInput: s1 = \"a\", s2 = \"a\"\\nOutput: true\\n\\n\\xc2\\xa0\\nConstraints:\\n\\ns1.length == s2.length\\n1 <= s1.length <= 30\\ns1 and s2 consist of lowercase English letters.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/merge-sorted-array",
        "Title": "Merge Sorted Array ",
        "Description": "b'You are given two integer arrays nums1 and nums2, sorted in non-decreasing order, and two integers m and n, representing the number of elements in nums1 and nums2 respectively.\\nMerge nums1 and nums2 into a single array sorted in non-decreasing order.\\nThe final sorted array should not be returned by the function, but instead be stored inside the array nums1. To accommodate this, nums1 has a length of m + n, where the first m elements denote the elements that should be merged, and the last n elements are set to 0 and should be ignored. nums2 has a length of n.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3\\nOutput: [1,2,2,3,5,6]\\nExplanation: The arrays we are merging are [1,2,3] and [2,5,6].\\nThe result of the merge is [1,2,2,3,5,6] with the underlined elements coming from nums1.\\n\\nExample 2:\\nInput: nums1 = [1], m = 1, nums2 = [], n = 0\\nOutput: [1]\\nExplanation: The arrays we are merging are [1] and [].\\nThe result of the merge is [1].\\n\\nExample 3:\\nInput: nums1 = [0], m = 0, nums2 = [1], n = 1\\nOutput: [1]\\nExplanation: The arrays we are merging are [] and [1].\\nThe result of the merge is [1].\\nNote that because m = 0, there are no elements in nums1. The 0 is only there to ensure the merge result can fit in nums1.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nnums1.length == m + n\\nnums2.length == n\\n0 <= m, n <= 200\\n1 <= m + n <= 200\\n-109 <= nums1[i], nums2[j] <= 109\\n\\n\\xc2\\xa0\\nFollow up: Can you come up with an algorithm that runs in O(m + n) time?\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/gray-code",
        "Title": "Gray Code ",
        "Description": "b'An n-bit gray code sequence is a sequence of 2n integers where:\\n\\nEvery integer is in the inclusive range [0, 2n - 1],\\nThe first integer is 0,\\nAn integer appears no more than once in the sequence,\\nThe binary representation of every pair of adjacent integers differs by exactly one bit, and\\nThe binary representation of the first and last integers differs by exactly one bit.\\n\\nGiven an integer n, return any valid n-bit gray code sequence.\\n\\xc2\\xa0\\nExample 1:\\nInput: n = 2\\nOutput: [0,1,3,2]\\nExplanation:\\nThe binary representation of [0,1,3,2] is [00,01,11,10].\\n- 00 and 01 differ by one bit\\n- 01 and 11 differ by one bit\\n- 11 and 10 differ by one bit\\n- 10 and 00 differ by one bit\\n[0,2,3,1] is also a valid gray code sequence, whose binary representation is [00,10,11,01].\\n- 00 and 10 differ by one bit\\n- 10 and 11 differ by one bit\\n- 11 and 01 differ by one bit\\n- 01 and 00 differ by one bit\\n\\nExample 2:\\nInput: n = 1\\nOutput: [0,1]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= n <= 16\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/subsets-ii",
        "Title": "Subsets II ",
        "Description": "b'Given an integer array nums that may contain duplicates, return all possible subsets (the power set).\\nThe solution set must not contain duplicate subsets. Return the solution in any order.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [1,2,2]\\nOutput: [[],[1],[1,2],[1,2,2],[2],[2,2]]\\nExample 2:\\nInput: nums = [0]\\nOutput: [[],[0]]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 10\\n-10 <= nums[i] <= 10\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/decode-ways",
        "Title": "Decode Ways ",
        "Description": "b'A message containing letters from A-Z can be encoded into numbers using the following mapping:\\n\\'A\\' -> \"1\"\\n\\'B\\' -> \"2\"\\n...\\n\\'Z\\' -> \"26\"\\n\\nTo decode an encoded message, all the digits must be grouped then mapped back into letters using the reverse of the mapping above (there may be multiple ways). For example, \"11106\" can be mapped into:\\n\\n\"AAJF\" with the grouping (1 1 10 6)\\n\"KJF\" with the grouping (11 10 6)\\n\\nNote that the grouping (1 11 06) is invalid because \"06\" cannot be mapped into \\'F\\' since \"6\" is different from \"06\".\\nGiven a string s containing only digits, return the number of ways to decode it.\\nThe test cases are generated so that the answer fits in a 32-bit integer.\\n\\xc2\\xa0\\nExample 1:\\nInput: s = \"12\"\\nOutput: 2\\nExplanation: \"12\" could be decoded as \"AB\" (1 2) or \"L\" (12).\\n\\nExample 2:\\nInput: s = \"226\"\\nOutput: 3\\nExplanation: \"226\" could be decoded as \"BZ\" (2 26), \"VF\" (22 6), or \"BBF\" (2 2 6).\\n\\nExample 3:\\nInput: s = \"06\"\\nOutput: 0\\nExplanation: \"06\" cannot be mapped to \"F\" because of the leading zero (\"6\" is different from \"06\").\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= s.length <= 100\\ns contains only digits and may contain leading zero(s).\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/reverse-linked-list-ii",
        "Title": "Reverse Linked List II ",
        "Description": "b'Given the head of a singly linked list and two integers left and right where left <= right, reverse the nodes of the list from position left to position right, and return the reversed list.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: head = [1,2,3,4,5], left = 2, right = 4\\nOutput: [1,4,3,2,5]\\n\\nExample 2:\\nInput: head = [5], left = 1, right = 1\\nOutput: [5]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of nodes in the list is n.\\n1 <= n <= 500\\n-500 <= Node.val <= 500\\n1 <= left <= right <= n\\n\\n\\xc2\\xa0\\nFollow up: Could you do it in one pass?'"
    },
    {
        "URL": "https://leetcode.com/problems/restore-ip-addresses",
        "Title": "Restore IP Addresses ",
        "Description": "b'A valid IP address consists of exactly four integers separated by single dots. Each integer is between 0 and 255 (inclusive) and cannot have leading zeros.\\n\\nFor example, \"0.1.2.201\" and \"192.168.1.1\" are valid IP addresses, but \"0.011.255.245\", \"192.168.1.312\" and \"192.168@1.1\" are invalid IP addresses.\\n\\nGiven a string s containing only digits, return all possible valid IP addresses that can be formed by inserting dots into s. You are not allowed to reorder or remove any digits in s. You may return the valid IP addresses in any order.\\n\\xc2\\xa0\\nExample 1:\\nInput: s = \"25525511135\"\\nOutput: [\"255.255.11.135\",\"255.255.111.35\"]\\n\\nExample 2:\\nInput: s = \"0000\"\\nOutput: [\"0.0.0.0\"]\\n\\nExample 3:\\nInput: s = \"101023\"\\nOutput: [\"1.0.10.23\",\"1.0.102.3\",\"10.1.0.23\",\"10.10.2.3\",\"101.0.2.3\"]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= s.length <= 20\\ns consists of digits only.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/binary-tree-inorder-traversal",
        "Title": "Binary Tree Inorder Traversal ",
        "Description": "b\"Given the root of a binary tree, return the inorder traversal of its nodes' values.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: root = [1,null,2,3]\\nOutput: [1,3,2]\\n\\nExample 2:\\nInput: root = []\\nOutput: []\\n\\nExample 3:\\nInput: root = [1]\\nOutput: [1]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of nodes in the tree is in the range [0, 100].\\n-100 <= Node.val <= 100\\n\\n\\xc2\\xa0\\nFollow up: Recursive solution is trivial, could you do it iteratively?\""
    },
    {
        "URL": "https://leetcode.com/problems/unique-binary-search-trees-ii",
        "Title": "Unique Binary Search Trees II ",
        "Description": "b\"Given an integer n, return all the structurally unique BST's (binary search trees), which has exactly n nodes of unique values from 1 to n. Return the answer in any order.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: n = 3\\nOutput: [[1,null,2,null,3],[1,null,3,2],[2,1,3],[3,1,null,null,2],[3,2,null,1]]\\n\\nExample 2:\\nInput: n = 1\\nOutput: [[1]]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= n <= 8\\n\\n\""
    },
    {
        "URL": "https://leetcode.com/problems/unique-binary-search-trees",
        "Title": "Unique Binary Search Trees ",
        "Description": "b\"Given an integer n, return the number of structurally unique BST's (binary search trees) which has exactly n nodes of unique values from 1 to n.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: n = 3\\nOutput: 5\\n\\nExample 2:\\nInput: n = 1\\nOutput: 1\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= n <= 19\\n\\n\""
    },
    {
        "URL": "https://leetcode.com/problems/interleaving-string",
        "Title": "Interleaving String ",
        "Description": "b'Given strings s1, s2, and s3, find whether s3 is formed by an interleaving of s1 and s2.\\nAn interleaving of two strings s and t is a configuration where they are divided into non-empty substrings such that:\\n\\ns = s1 + s2 + ... + sn\\nt = t1 + t2 + ... + tm\\n|n - m| <= 1\\nThe interleaving is s1 + t1 + s2 + t2 + s3 + t3 + ... or t1 + s1 + t2 + s2 + t3 + s3 + ...\\n\\nNote: a + b is the concatenation of strings a and b.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: s1 = \"aabcc\", s2 = \"dbbca\", s3 = \"aadbbcbcac\"\\nOutput: true\\n\\nExample 2:\\nInput: s1 = \"aabcc\", s2 = \"dbbca\", s3 = \"aadbbbaccc\"\\nOutput: false\\n\\nExample 3:\\nInput: s1 = \"\", s2 = \"\", s3 = \"\"\\nOutput: true\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n0 <= s1.length, s2.length <= 100\\n0 <= s3.length <= 200\\ns1, s2, and s3 consist of lowercase English letters.\\n\\n\\xc2\\xa0\\nFollow up: Could you solve it using only O(s2.length) additional memory space?\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/validate-binary-search-tree",
        "Title": "Validate Binary Search Tree ",
        "Description": "b\"Given the root of a binary tree, determine if it is a valid binary search tree (BST).\\nA valid BST is defined as follows:\\n\\nThe left subtree of a node contains only nodes with keys less than the node's key.\\nThe right subtree of a node contains only nodes with keys greater than the node's key.\\nBoth the left and right subtrees must also be binary search trees.\\n\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: root = [2,1,3]\\nOutput: true\\n\\nExample 2:\\n\\nInput: root = [5,1,4,null,null,3,6]\\nOutput: false\\nExplanation: The root node's value is 5 but its right child's value is 4.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of nodes in the tree is in the range [1, 104].\\n-231 <= Node.val <= 231 - 1\\n\\n\""
    },
    {
        "URL": "https://leetcode.com/problems/recover-binary-search-tree",
        "Title": "Recover Binary Search Tree ",
        "Description": "b'You are given the root of a binary search tree (BST), where the values of exactly two nodes of the tree were swapped by mistake. Recover the tree without changing its structure.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: root = [1,3,null,null,2]\\nOutput: [3,1,null,null,2]\\nExplanation: 3 cannot be a left child of 1 because 3 > 1. Swapping 1 and 3 makes the BST valid.\\n\\nExample 2:\\n\\nInput: root = [3,1,4,null,null,2]\\nOutput: [2,1,4,null,null,3]\\nExplanation: 2 cannot be in the right subtree of 3 because 2 < 3. Swapping 2 and 3 makes the BST valid.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of nodes in the tree is in the range [2, 1000].\\n-231 <= Node.val <= 231 - 1\\n\\n\\xc2\\xa0\\nFollow up: A solution using O(n) space is pretty straight-forward. Could you devise a constant O(1) space solution?'"
    },
    {
        "URL": "https://leetcode.com/problems/same-tree",
        "Title": "Same Tree ",
        "Description": "b'Given the roots of two binary trees p and q, write a function to check if they are the same or not.\\nTwo binary trees are considered the same if they are structurally identical, and the nodes have the same value.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: p = [1,2,3], q = [1,2,3]\\nOutput: true\\n\\nExample 2:\\n\\nInput: p = [1,2], q = [1,null,2]\\nOutput: false\\n\\nExample 3:\\n\\nInput: p = [1,2,1], q = [1,1,2]\\nOutput: false\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of nodes in both trees is in the range [0, 100].\\n-104 <= Node.val <= 104\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/symmetric-tree",
        "Title": "Symmetric Tree ",
        "Description": "b'Given the root of a binary tree, check whether it is a mirror of itself (i.e., symmetric around its center).\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: root = [1,2,2,3,4,4,3]\\nOutput: true\\n\\nExample 2:\\n\\nInput: root = [1,2,2,null,3,null,3]\\nOutput: false\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of nodes in the tree is in the range [1, 1000].\\n-100 <= Node.val <= 100\\n\\n\\xc2\\xa0\\nFollow up: Could you solve it both recursively and iteratively?'"
    },
    {
        "URL": "https://leetcode.com/problems/binary-tree-level-order-traversal",
        "Title": "Binary Tree Level Order Traversal ",
        "Description": "b\"Given the root of a binary tree, return the level order traversal of its nodes' values. (i.e., from left to right, level by level).\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: root = [3,9,20,null,null,15,7]\\nOutput: [[3],[9,20],[15,7]]\\n\\nExample 2:\\nInput: root = [1]\\nOutput: [[1]]\\n\\nExample 3:\\nInput: root = []\\nOutput: []\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of nodes in the tree is in the range [0, 2000].\\n-1000 <= Node.val <= 1000\\n\\n\""
    },
    {
        "URL": "https://leetcode.com/problems/binary-tree-zigzag-level-order-traversal",
        "Title": "Binary Tree Zigzag Level Order Traversal ",
        "Description": "b\"Given the root of a binary tree, return the zigzag level order traversal of its nodes' values. (i.e., from left to right, then right to left for the next level and alternate between).\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: root = [3,9,20,null,null,15,7]\\nOutput: [[3],[20,9],[15,7]]\\n\\nExample 2:\\nInput: root = [1]\\nOutput: [[1]]\\n\\nExample 3:\\nInput: root = []\\nOutput: []\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of nodes in the tree is in the range [0, 2000].\\n-100 <= Node.val <= 100\\n\\n\""
    },
    {
        "URL": "https://leetcode.com/problems/maximum-depth-of-binary-tree",
        "Title": "Maximum Depth of Binary Tree ",
        "Description": "b\"Given the root of a binary tree, return its maximum depth.\\nA binary tree's maximum depth\\xc2\\xa0is the number of nodes along the longest path from the root node down to the farthest leaf node.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: root = [3,9,20,null,null,15,7]\\nOutput: 3\\n\\nExample 2:\\nInput: root = [1,null,2]\\nOutput: 2\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of nodes in the tree is in the range [0, 104].\\n-100 <= Node.val <= 100\\n\\n\""
    },
    {
        "URL": "https://leetcode.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal",
        "Title": "Construct Binary Tree from Preorder and Inorder Traversal ",
        "Description": "b'Given two integer arrays preorder and inorder where preorder is the preorder traversal of a binary tree and inorder is the inorder traversal of the same tree, construct and return the binary tree.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: preorder = [3,9,20,15,7], inorder = [9,3,15,20,7]\\nOutput: [3,9,20,null,null,15,7]\\n\\nExample 2:\\nInput: preorder = [-1], inorder = [-1]\\nOutput: [-1]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= preorder.length <= 3000\\ninorder.length == preorder.length\\n-3000 <= preorder[i], inorder[i] <= 3000\\npreorder and inorder consist of unique values.\\nEach value of inorder also appears in preorder.\\npreorder is guaranteed to be the preorder traversal of the tree.\\ninorder is guaranteed to be the inorder traversal of the tree.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/construct-binary-tree-from-inorder-and-postorder-traversal",
        "Title": "Construct Binary Tree from Inorder and Postorder Traversal ",
        "Description": "b'Given two integer arrays inorder and postorder where inorder is the inorder traversal of a binary tree and postorder is the postorder traversal of the same tree, construct and return the binary tree.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: inorder = [9,3,15,20,7], postorder = [9,15,7,20,3]\\nOutput: [3,9,20,null,null,15,7]\\n\\nExample 2:\\nInput: inorder = [-1], postorder = [-1]\\nOutput: [-1]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= inorder.length <= 3000\\npostorder.length == inorder.length\\n-3000 <= inorder[i], postorder[i] <= 3000\\ninorder and postorder consist of unique values.\\nEach value of postorder also appears in inorder.\\ninorder is guaranteed to be the inorder traversal of the tree.\\npostorder is guaranteed to be the postorder traversal of the tree.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/binary-tree-level-order-traversal-ii",
        "Title": "Binary Tree Level Order Traversal II ",
        "Description": "b\"Given the root of a binary tree, return the bottom-up level order traversal of its nodes' values. (i.e., from left to right, level by level from leaf to root).\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: root = [3,9,20,null,null,15,7]\\nOutput: [[15,7],[9,20],[3]]\\n\\nExample 2:\\nInput: root = [1]\\nOutput: [[1]]\\n\\nExample 3:\\nInput: root = []\\nOutput: []\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of nodes in the tree is in the range [0, 2000].\\n-1000 <= Node.val <= 1000\\n\\n\""
    },
    {
        "URL": "https://leetcode.com/problems/convert-sorted-array-to-binary-search-tree",
        "Title": "Convert Sorted Array to Binary Search Tree ",
        "Description": "b'Given an integer array nums where the elements are sorted in ascending order, convert it to a height-balanced binary search tree.\\nA height-balanced binary tree is a binary tree in which the depth of the two subtrees of every node never differs by more than one.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: nums = [-10,-3,0,5,9]\\nOutput: [0,-3,9,-10,null,5]\\nExplanation: [0,-10,5,null,-3,null,9] is also accepted:\\n\\n\\nExample 2:\\n\\nInput: nums = [1,3]\\nOutput: [3,1]\\nExplanation: [1,null,3] and [3,1] are both height-balanced BSTs.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 104\\n-104 <= nums[i] <= 104\\nnums is sorted in a strictly increasing order.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/convert-sorted-list-to-binary-search-tree",
        "Title": "Convert Sorted List to Binary Search Tree ",
        "Description": "b'Given the head of a singly linked list where elements are sorted in ascending order, convert it to a height balanced BST.\\nFor this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: head = [-10,-3,0,5,9]\\nOutput: [0,-3,9,-10,null,5]\\nExplanation: One possible answer is [0,-3,9,-10,null,5], which represents the shown height balanced BST.\\n\\nExample 2:\\nInput: head = []\\nOutput: []\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of nodes in head is in the range [0, 2 * 104].\\n-105 <= Node.val <= 105\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/balanced-binary-tree",
        "Title": "Balanced Binary Tree ",
        "Description": "b'Given a binary tree, determine if it is height-balanced.\\nFor this problem, a height-balanced binary tree is defined as:\\n\\na binary tree in which the left and right subtrees of every node differ in height by no more than 1.\\n\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: root = [3,9,20,null,null,15,7]\\nOutput: true\\n\\nExample 2:\\n\\nInput: root = [1,2,2,3,3,null,null,4,4]\\nOutput: false\\n\\nExample 3:\\nInput: root = []\\nOutput: true\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of nodes in the tree is in the range [0, 5000].\\n-104 <= Node.val <= 104\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/minimum-depth-of-binary-tree",
        "Title": "Minimum Depth of Binary Tree ",
        "Description": "b'Given a binary tree, find its minimum depth.\\nThe minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node.\\nNote:\\xc2\\xa0A leaf is a node with no children.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: root = [3,9,20,null,null,15,7]\\nOutput: 2\\n\\nExample 2:\\nInput: root = [2,null,3,null,4,null,5,null,6]\\nOutput: 5\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of nodes in the tree is in the range [0, 105].\\n-1000 <= Node.val <= 1000\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/path-sum",
        "Title": "Path Sum ",
        "Description": "b'Given the root of a binary tree and an integer targetSum, return true if the tree has a root-to-leaf path such that adding up all the values along the path equals targetSum.\\nA leaf is a node with no children.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: root = [5,4,8,11,null,13,4,7,2,null,null,null,1], targetSum = 22\\nOutput: true\\nExplanation: The root-to-leaf path with the target sum is shown.\\n\\nExample 2:\\n\\nInput: root = [1,2,3], targetSum = 5\\nOutput: false\\nExplanation: There two root-to-leaf paths in the tree:\\n(1 --> 2): The sum is 3.\\n(1 --> 3): The sum is 4.\\nThere is no root-to-leaf path with sum = 5.\\n\\nExample 3:\\nInput: root = [], targetSum = 0\\nOutput: false\\nExplanation: Since the tree is empty, there are no root-to-leaf paths.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of nodes in the tree is in the range [0, 5000].\\n-1000 <= Node.val <= 1000\\n-1000 <= targetSum <= 1000\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/path-sum-ii",
        "Title": "Path Sum II ",
        "Description": "b'Given the root of a binary tree and an integer targetSum, return all root-to-leaf paths where the sum of the node values in the path equals targetSum. Each path should be returned as a list of the node values, not node references.\\nA root-to-leaf path is a path starting from the root and ending at any leaf node. A leaf is a node with no children.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: root = [5,4,8,11,null,13,4,7,2,null,null,5,1], targetSum = 22\\nOutput: [[5,4,11,2],[5,8,4,5]]\\nExplanation: There are two paths whose sum equals targetSum:\\n5 + 4 + 11 + 2 = 22\\n5 + 8 + 4 + 5 = 22\\n\\nExample 2:\\n\\nInput: root = [1,2,3], targetSum = 5\\nOutput: []\\n\\nExample 3:\\nInput: root = [1,2], targetSum = 0\\nOutput: []\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of nodes in the tree is in the range [0, 5000].\\n-1000 <= Node.val <= 1000\\n-1000 <= targetSum <= 1000\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/flatten-binary-tree-to-linked-list",
        "Title": "Flatten Binary Tree to Linked List ",
        "Description": "b'Given the root of a binary tree, flatten the tree into a \"linked list\":\\n\\nThe \"linked list\" should use the same TreeNode class where the right child pointer points to the next node in the list and the left child pointer is always null.\\nThe \"linked list\" should be in the same order as a pre-order traversal of the binary tree.\\n\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: root = [1,2,5,3,4,null,6]\\nOutput: [1,null,2,null,3,null,4,null,5,null,6]\\n\\nExample 2:\\nInput: root = []\\nOutput: []\\n\\nExample 3:\\nInput: root = [0]\\nOutput: [0]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of nodes in the tree is in the range [0, 2000].\\n-100 <= Node.val <= 100\\n\\n\\xc2\\xa0\\nFollow up: Can you flatten the tree in-place (with O(1) extra space)?'"
    },
    {
        "URL": "https://leetcode.com/problems/distinct-subsequences",
        "Title": "Distinct Subsequences ",
        "Description": "b'Given two strings s and t, return the number of distinct subsequences of s which equals t.\\nA string\\'s subsequence is a new string formed from the original string by deleting some (can be none) of the characters without disturbing the remaining characters\\' relative positions. (i.e., \"ACE\" is a subsequence of \"ABCDE\" while \"AEC\" is not).\\nThe test cases are generated so that the answer fits on a 32-bit signed integer.\\n\\xc2\\xa0\\nExample 1:\\nInput: s = \"rabbbit\", t = \"rabbit\"\\nOutput: 3\\nExplanation:\\nAs shown below, there are 3 ways you can generate \"rabbit\" from S.\\nrabbbit\\nrabbbit\\nrabbbit\\n\\nExample 2:\\nInput: s = \"babgbag\", t = \"bag\"\\nOutput: 5\\nExplanation:\\nAs shown below, there are 5 ways you can generate \"bag\" from S.\\nbabgbag\\nbabgbag\\nbabgbag\\nbabgbag\\nbabgbag\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= s.length, t.length <= 1000\\ns and t consist of English letters.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/populating-next-right-pointers-in-each-node",
        "Title": "Populating Next Right Pointers in Each Node ",
        "Description": "b\"You are given a perfect binary tree where all leaves are on the same level, and every parent has two children. The binary tree has the following definition:\\nstruct Node {\\n  int val;\\n  Node *left;\\n  Node *right;\\n  Node *next;\\n}\\n\\nPopulate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to NULL.\\nInitially, all next pointers are set to NULL.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: root = [1,2,3,4,5,6,7]\\nOutput: [1,#,2,3,#,4,5,6,7,#]\\nExplanation: Given the above perfect binary tree (Figure A), your function should populate each next pointer to point to its next right node, just like in Figure B. The serialized output is in level order as connected by the next pointers, with '#' signifying the end of each level.\\n\\nExample 2:\\nInput: root = []\\nOutput: []\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of nodes in the tree is in the range [0, 212 - 1].\\n-1000 <= Node.val <= 1000\\n\\n\\xc2\\xa0\\nFollow-up:\\n\\nYou may only use constant extra space.\\nThe recursive approach is fine. You may assume implicit stack space does not count as extra space for this problem.\\n\\n\""
    },
    {
        "URL": "https://leetcode.com/problems/populating-next-right-pointers-in-each-node-ii",
        "Title": "Populating Next Right Pointers in Each Node II ",
        "Description": "b\"Given a binary tree\\nstruct Node {\\n  int val;\\n  Node *left;\\n  Node *right;\\n  Node *next;\\n}\\n\\nPopulate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to NULL.\\nInitially, all next pointers are set to NULL.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: root = [1,2,3,4,5,null,7]\\nOutput: [1,#,2,3,#,4,5,7,#]\\nExplanation: Given the above binary tree (Figure A), your function should populate each next pointer to point to its next right node, just like in Figure B. The serialized output is in level order as connected by the next pointers, with '#' signifying the end of each level.\\n\\nExample 2:\\nInput: root = []\\nOutput: []\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of nodes in the tree is in the range [0, 6000].\\n-100 <= Node.val <= 100\\n\\n\\xc2\\xa0\\nFollow-up:\\n\\nYou may only use constant extra space.\\nThe recursive approach is fine. You may assume implicit stack space does not count as extra space for this problem.\\n\\n\""
    },
    {
        "URL": "https://leetcode.com/problems/pascals-triangle",
        "Title": "Pascal's Triangle ",
        "Description": "b\"Given an integer numRows, return the first numRows of Pascal's triangle.\\nIn Pascal's triangle, each number is the sum of the two numbers directly above it as shown:\\n\\n\\xc2\\xa0\\nExample 1:\\nInput: numRows = 5\\nOutput: [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]]\\nExample 2:\\nInput: numRows = 1\\nOutput: [[1]]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= numRows <= 30\\n\\n\""
    },
    {
        "URL": "https://leetcode.com/problems/pascals-triangle-ii",
        "Title": "Pascal's Triangle II ",
        "Description": "b\"Given an integer rowIndex, return the rowIndexth (0-indexed) row of the Pascal's triangle.\\nIn Pascal's triangle, each number is the sum of the two numbers directly above it as shown:\\n\\n\\xc2\\xa0\\nExample 1:\\nInput: rowIndex = 3\\nOutput: [1,3,3,1]\\nExample 2:\\nInput: rowIndex = 0\\nOutput: [1]\\nExample 3:\\nInput: rowIndex = 1\\nOutput: [1,1]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n0 <= rowIndex <= 33\\n\\n\\xc2\\xa0\\nFollow up: Could you optimize your algorithm to use only O(rowIndex) extra space?\\n\""
    },
    {
        "URL": "https://leetcode.com/problems/triangle",
        "Title": "Triangle ",
        "Description": "b'Given a triangle array, return the minimum path sum from top to bottom.\\nFor each step, you may move to an adjacent number of the row below. More formally, if you are on index i on the current row, you may move to either index i or index i + 1 on the next row.\\n\\xc2\\xa0\\nExample 1:\\nInput: triangle = [[2],[3,4],[6,5,7],[4,1,8,3]]\\nOutput: 11\\nExplanation: The triangle looks like:\\n   2\\n  3 4\\n 6 5 7\\n4 1 8 3\\nThe minimum path sum from top to bottom is 2 + 3 + 5 + 1 = 11 (underlined above).\\n\\nExample 2:\\nInput: triangle = [[-10]]\\nOutput: -10\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= triangle.length <= 200\\ntriangle[0].length == 1\\ntriangle[i].length == triangle[i - 1].length + 1\\n-104 <= triangle[i][j] <= 104\\n\\n\\xc2\\xa0\\nFollow up: Could you\\xc2\\xa0do this using only O(n) extra space, where n is the total number of rows in the triangle?'"
    },
    {
        "URL": "https://leetcode.com/problems/best-time-to-buy-and-sell-stock",
        "Title": "Best Time to Buy and Sell Stock ",
        "Description": "b'You are given an array prices where prices[i] is the price of a given stock on the ith day.\\nYou want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.\\nReturn the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.\\n\\xc2\\xa0\\nExample 1:\\nInput: prices = [7,1,5,3,6,4]\\nOutput: 5\\nExplanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.\\nNote that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.\\n\\nExample 2:\\nInput: prices = [7,6,4,3,1]\\nOutput: 0\\nExplanation: In this case, no transactions are done and the max profit = 0.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= prices.length <= 105\\n0 <= prices[i] <= 104\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii",
        "Title": "Best Time to Buy and Sell Stock II ",
        "Description": "b'You are given an integer array prices where prices[i] is the price of a given stock on the ith day.\\nOn each day, you may decide to buy and/or sell the stock. You can only hold at most one share of the stock at any time. However, you can buy it then immediately sell it on the same day.\\nFind and return the maximum profit you can achieve.\\n\\xc2\\xa0\\nExample 1:\\nInput: prices = [7,1,5,3,6,4]\\nOutput: 7\\nExplanation: Buy on day 2 (price = 1) and sell on day 3 (price = 5), profit = 5-1 = 4.\\nThen buy on day 4 (price = 3) and sell on day 5 (price = 6), profit = 6-3 = 3.\\nTotal profit is 4 + 3 = 7.\\n\\nExample 2:\\nInput: prices = [1,2,3,4,5]\\nOutput: 4\\nExplanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.\\nTotal profit is 4.\\n\\nExample 3:\\nInput: prices = [7,6,4,3,1]\\nOutput: 0\\nExplanation: There is no way to make a positive profit, so we never buy the stock to achieve the maximum profit of 0.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= prices.length <= 3 * 104\\n0 <= prices[i] <= 104\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iii",
        "Title": "Best Time to Buy and Sell Stock III ",
        "Description": "b'You are given an array prices where prices[i] is the price of a given stock on the ith day.\\nFind the maximum profit you can achieve. You may complete at most two transactions.\\nNote: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).\\n\\xc2\\xa0\\nExample 1:\\nInput: prices = [3,3,5,0,0,3,1,4]\\nOutput: 6\\nExplanation: Buy on day 4 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.\\nThen buy on day 7 (price = 1) and sell on day 8 (price = 4), profit = 4-1 = 3.\\nExample 2:\\nInput: prices = [1,2,3,4,5]\\nOutput: 4\\nExplanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.\\nNote that you cannot buy on day 1, buy on day 2 and sell them later, as you are engaging multiple transactions at the same time. You must sell before buying again.\\n\\nExample 3:\\nInput: prices = [7,6,4,3,1]\\nOutput: 0\\nExplanation: In this case, no transaction is done, i.e. max profit = 0.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= prices.length <= 105\\n0 <= prices[i] <= 105\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/binary-tree-maximum-path-sum",
        "Title": "Binary Tree Maximum Path Sum ",
        "Description": "b\"A path in a binary tree is a sequence of nodes where each pair of adjacent nodes in the sequence has an edge connecting them. A node can only appear in the sequence at most once. Note that the path does not need to pass through the root.\\nThe path sum of a path is the sum of the node's values in the path.\\nGiven the root of a binary tree, return the maximum path sum of any non-empty path.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: root = [1,2,3]\\nOutput: 6\\nExplanation: The optimal path is 2 -> 1 -> 3 with a path sum of 2 + 1 + 3 = 6.\\n\\nExample 2:\\n\\nInput: root = [-10,9,20,null,null,15,7]\\nOutput: 42\\nExplanation: The optimal path is 15 -> 20 -> 7 with a path sum of 15 + 20 + 7 = 42.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of nodes in the tree is in the range [1, 3 * 104].\\n-1000 <= Node.val <= 1000\\n\\n\""
    },
    {
        "URL": "https://leetcode.com/problems/valid-palindrome",
        "Title": "Valid Palindrome ",
        "Description": "b'A phrase is a palindrome if, after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters, it reads the same forward and backward. Alphanumeric characters include letters and numbers.\\nGiven a string s, return true if it is a palindrome, or false otherwise.\\n\\xc2\\xa0\\nExample 1:\\nInput: s = \"A man, a plan, a canal: Panama\"\\nOutput: true\\nExplanation: \"amanaplanacanalpanama\" is a palindrome.\\n\\nExample 2:\\nInput: s = \"race a car\"\\nOutput: false\\nExplanation: \"raceacar\" is not a palindrome.\\n\\nExample 3:\\nInput: s = \" \"\\nOutput: true\\nExplanation: s is an empty string \"\" after removing non-alphanumeric characters.\\nSince an empty string reads the same forward and backward, it is a palindrome.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= s.length <= 2 * 105\\ns consists only of printable ASCII characters.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/word-ladder-ii",
        "Title": "Word Ladder II ",
        "Description": "b'A transformation sequence from word beginWord to word endWord using a dictionary wordList is a sequence of words beginWord -> s1 -> s2 -> ... -> sk such that:\\n\\nEvery adjacent pair of words differs by a single letter.\\nEvery si for 1 <= i <= k is in wordList. Note that beginWord does not need to be in wordList.\\nsk == endWord\\n\\nGiven two words, beginWord and endWord, and a dictionary wordList, return all the shortest transformation sequences from beginWord to endWord, or an empty list if no such sequence exists. Each sequence should be returned as a list of the words [beginWord, s1, s2, ..., sk].\\n\\xc2\\xa0\\nExample 1:\\nInput: beginWord = \"hit\", endWord = \"cog\", wordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\",\"cog\"]\\nOutput: [[\"hit\",\"hot\",\"dot\",\"dog\",\"cog\"],[\"hit\",\"hot\",\"lot\",\"log\",\"cog\"]]\\nExplanation:\\xc2\\xa0There are 2 shortest transformation sequences:\\n\"hit\" -> \"hot\" -> \"dot\" -> \"dog\" -> \"cog\"\\n\"hit\" -> \"hot\" -> \"lot\" -> \"log\" -> \"cog\"\\n\\nExample 2:\\nInput: beginWord = \"hit\", endWord = \"cog\", wordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\"]\\nOutput: []\\nExplanation: The endWord \"cog\" is not in wordList, therefore there is no valid transformation sequence.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= beginWord.length <= 5\\nendWord.length == beginWord.length\\n1 <= wordList.length <= 500\\nwordList[i].length == beginWord.length\\nbeginWord, endWord, and wordList[i] consist of lowercase English letters.\\nbeginWord != endWord\\nAll the words in wordList are unique.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/word-ladder",
        "Title": "Word Ladder ",
        "Description": "b'A transformation sequence from word beginWord to word endWord using a dictionary wordList is a sequence of words beginWord -> s1 -> s2 -> ... -> sk such that:\\n\\nEvery adjacent pair of words differs by a single letter.\\nEvery si for 1 <= i <= k is in wordList. Note that beginWord does not need to be in wordList.\\nsk == endWord\\n\\nGiven two words, beginWord and endWord, and a dictionary wordList, return the number of words in the shortest transformation sequence from beginWord to endWord, or 0 if no such sequence exists.\\n\\xc2\\xa0\\nExample 1:\\nInput: beginWord = \"hit\", endWord = \"cog\", wordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\",\"cog\"]\\nOutput: 5\\nExplanation: One shortest transformation sequence is \"hit\" -> \"hot\" -> \"dot\" -> \"dog\" -> cog\", which is 5 words long.\\n\\nExample 2:\\nInput: beginWord = \"hit\", endWord = \"cog\", wordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\"]\\nOutput: 0\\nExplanation: The endWord \"cog\" is not in wordList, therefore there is no valid transformation sequence.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= beginWord.length <= 10\\nendWord.length == beginWord.length\\n1 <= wordList.length <= 5000\\nwordList[i].length == beginWord.length\\nbeginWord, endWord, and wordList[i] consist of lowercase English letters.\\nbeginWord != endWord\\nAll the words in wordList are unique.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/longest-consecutive-sequence",
        "Title": "Longest Consecutive Sequence ",
        "Description": "b'Given an unsorted array of integers nums, return the length of the longest consecutive elements sequence.\\nYou must write an algorithm that runs in\\xc2\\xa0O(n)\\xc2\\xa0time.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [100,4,200,1,3,2]\\nOutput: 4\\nExplanation: The longest consecutive elements sequence is [1, 2, 3, 4]. Therefore its length is 4.\\n\\nExample 2:\\nInput: nums = [0,3,7,2,5,8,4,6,0,1]\\nOutput: 9\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n0 <= nums.length <= 105\\n-109 <= nums[i] <= 109\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/sum-root-to-leaf-numbers",
        "Title": "Sum Root to Leaf Numbers ",
        "Description": "b'You are given the root of a binary tree containing digits from 0 to 9 only.\\nEach root-to-leaf path in the tree represents a number.\\n\\nFor example, the root-to-leaf path 1 -> 2 -> 3 represents the number 123.\\n\\nReturn the total sum of all root-to-leaf numbers. Test cases are generated so that the answer will fit in a 32-bit integer.\\nA leaf node is a node with no children.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: root = [1,2,3]\\nOutput: 25\\nExplanation:\\nThe root-to-leaf path 1->2 represents the number 12.\\nThe root-to-leaf path 1->3 represents the number 13.\\nTherefore, sum = 12 + 13 = 25.\\n\\nExample 2:\\n\\nInput: root = [4,9,0,5,1]\\nOutput: 1026\\nExplanation:\\nThe root-to-leaf path 4->9->5 represents the number 495.\\nThe root-to-leaf path 4->9->1 represents the number 491.\\nThe root-to-leaf path 4->0 represents the number 40.\\nTherefore, sum = 495 + 491 + 40 = 1026.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of nodes in the tree is in the range [1, 1000].\\n0 <= Node.val <= 9\\nThe depth of the tree will not exceed 10.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/surrounded-regions",
        "Title": "Surrounded Regions ",
        "Description": "b'Given an m x n matrix board containing \\'X\\' and \\'O\\', capture all regions that are 4-directionally\\xc2\\xa0surrounded by \\'X\\'.\\nA region is captured by flipping all \\'O\\'s into \\'X\\'s in that surrounded region.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: board = [[\"X\",\"X\",\"X\",\"X\"],[\"X\",\"O\",\"O\",\"X\"],[\"X\",\"X\",\"O\",\"X\"],[\"X\",\"O\",\"X\",\"X\"]]\\nOutput: [[\"X\",\"X\",\"X\",\"X\"],[\"X\",\"X\",\"X\",\"X\"],[\"X\",\"X\",\"X\",\"X\"],[\"X\",\"O\",\"X\",\"X\"]]\\nExplanation: Surrounded regions should not be on the border, which means that any \\'O\\' on the border of the board are not flipped to \\'X\\'. Any \\'O\\' that is not on the border and it is not connected to an \\'O\\' on the border will be flipped to \\'X\\'. Two cells are connected if they are adjacent cells connected horizontally or vertically.\\n\\nExample 2:\\nInput: board = [[\"X\"]]\\nOutput: [[\"X\"]]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nm == board.length\\nn == board[i].length\\n1 <= m, n <= 200\\nboard[i][j] is \\'X\\' or \\'O\\'.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/palindrome-partitioning",
        "Title": "Palindrome Partitioning ",
        "Description": "b'Given a string s, partition s such that every substring of the partition is a palindrome. Return all possible palindrome partitioning of s.\\nA palindrome string is a string that reads the same backward as forward.\\n\\xc2\\xa0\\nExample 1:\\nInput: s = \"aab\"\\nOutput: [[\"a\",\"a\",\"b\"],[\"aa\",\"b\"]]\\nExample 2:\\nInput: s = \"a\"\\nOutput: [[\"a\"]]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= s.length <= 16\\ns contains only lowercase English letters.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/palindrome-partitioning-ii",
        "Title": "Palindrome Partitioning II ",
        "Description": "b'Given a string s, partition s such that every substring of the partition is a palindrome.\\nReturn the minimum cuts needed for a palindrome partitioning of s.\\n\\xc2\\xa0\\nExample 1:\\nInput: s = \"aab\"\\nOutput: 1\\nExplanation: The palindrome partitioning [\"aa\",\"b\"] could be produced using 1 cut.\\n\\nExample 2:\\nInput: s = \"a\"\\nOutput: 0\\n\\nExample 3:\\nInput: s = \"ab\"\\nOutput: 1\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= s.length <= 2000\\ns consists of lowercase English letters only.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/clone-graph",
        "Title": "Clone Graph ",
        "Description": "b\"Given a reference of a node in a connected undirected graph.\\nReturn a deep copy (clone) of the graph.\\nEach node in the graph contains a value (int) and a list (List[Node]) of its neighbors.\\nclass Node {\\n    public int val;\\n    public List<Node> neighbors;\\n}\\n\\n\\xc2\\xa0\\nTest case format:\\nFor simplicity, each node's value is the same as the node's index (1-indexed). For example, the first node with val == 1, the second node with val == 2, and so on. The graph is represented in the test case using an adjacency list.\\nAn adjacency list is a collection of unordered lists used to represent a finite graph. Each list describes the set of neighbors of a node in the graph.\\nThe given node will always be the first node with val = 1. You must return the copy of the given node as a reference to the cloned graph.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: adjList = [[2,4],[1,3],[2,4],[1,3]]\\nOutput: [[2,4],[1,3],[2,4],[1,3]]\\nExplanation: There are 4 nodes in the graph.\\n1st node (val = 1)'s neighbors are 2nd node (val = 2) and 4th node (val = 4).\\n2nd node (val = 2)'s neighbors are 1st node (val = 1) and 3rd node (val = 3).\\n3rd node (val = 3)'s neighbors are 2nd node (val = 2) and 4th node (val = 4).\\n4th node (val = 4)'s neighbors are 1st node (val = 1) and 3rd node (val = 3).\\n\\nExample 2:\\n\\nInput: adjList = [[]]\\nOutput: [[]]\\nExplanation: Note that the input contains one empty list. The graph consists of only one node with val = 1 and it does not have any neighbors.\\n\\nExample 3:\\nInput: adjList = []\\nOutput: []\\nExplanation: This an empty graph, it does not have any nodes.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of nodes in the graph is in the range [0, 100].\\n1 <= Node.val <= 100\\nNode.val is unique for each node.\\nThere are no repeated edges and no self-loops in the graph.\\nThe Graph is connected and all nodes can be visited starting from the given node.\\n\\n\""
    },
    {
        "URL": "https://leetcode.com/problems/gas-station",
        "Title": "Gas Station ",
        "Description": "b\"There are n gas stations along a circular route, where the amount of gas at the ith station is gas[i].\\nYou have a car with an unlimited gas tank and it costs cost[i] of gas to travel from the ith station to its next (i + 1)th station. You begin the journey with an empty tank at one of the gas stations.\\nGiven two integer arrays gas and cost, return the starting gas station's index if you can travel around the circuit once in the clockwise direction, otherwise return -1. If there exists a solution, it is guaranteed to be unique\\n\\xc2\\xa0\\nExample 1:\\nInput: gas = [1,2,3,4,5], cost = [3,4,5,1,2]\\nOutput: 3\\nExplanation:\\nStart at station 3 (index 3) and fill up with 4 unit of gas. Your tank = 0 + 4 = 4\\nTravel to station 4. Your tank = 4 - 1 + 5 = 8\\nTravel to station 0. Your tank = 8 - 2 + 1 = 7\\nTravel to station 1. Your tank = 7 - 3 + 2 = 6\\nTravel to station 2. Your tank = 6 - 4 + 3 = 5\\nTravel to station 3. The cost is 5. Your gas is just enough to travel back to station 3.\\nTherefore, return 3 as the starting index.\\n\\nExample 2:\\nInput: gas = [2,3,4], cost = [3,4,3]\\nOutput: -1\\nExplanation:\\nYou can't start at station 0 or 1, as there is not enough gas to travel to the next station.\\nLet's start at station 2 and fill up with 4 unit of gas. Your tank = 0 + 4 = 4\\nTravel to station 0. Your tank = 4 - 3 + 2 = 3\\nTravel to station 1. Your tank = 3 - 3 + 3 = 3\\nYou cannot travel back to station 2, as it requires 4 unit of gas but you only have 3.\\nTherefore, you can't travel around the circuit once no matter where you start.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nn == gas.length == cost.length\\n1 <= n <= 105\\n0 <= gas[i], cost[i] <= 104\\n\\n\""
    },
    {
        "URL": "https://leetcode.com/problems/candy",
        "Title": "Candy ",
        "Description": "b'There are n children standing in a line. Each child is assigned a rating value given in the integer array ratings.\\nYou are giving candies to these children subjected to the following requirements:\\n\\nEach child must have at least one candy.\\nChildren with a higher rating get more candies than their neighbors.\\n\\nReturn the minimum number of candies you need to have to distribute the candies to the children.\\n\\xc2\\xa0\\nExample 1:\\nInput: ratings = [1,0,2]\\nOutput: 5\\nExplanation: You can allocate to the first, second and third child with 2, 1, 2 candies respectively.\\n\\nExample 2:\\nInput: ratings = [1,2,2]\\nOutput: 4\\nExplanation: You can allocate to the first, second and third child with 1, 2, 1 candies respectively.\\nThe third child gets 1 candy because it satisfies the above two conditions.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nn == ratings.length\\n1 <= n <= 2 * 104\\n0 <= ratings[i] <= 2 * 104\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/single-number",
        "Title": "Single Number ",
        "Description": "b'Given a non-empty\\xc2\\xa0array of integers nums, every element appears twice except for one. Find that single one.\\nYou must\\xc2\\xa0implement a solution with a linear runtime complexity and use\\xc2\\xa0only constant\\xc2\\xa0extra space.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [2,2,1]\\nOutput: 1\\nExample 2:\\nInput: nums = [4,1,2,1,2]\\nOutput: 4\\nExample 3:\\nInput: nums = [1]\\nOutput: 1\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 3 * 104\\n-3 * 104 <= nums[i] <= 3 * 104\\nEach element in the array appears twice except for one element which appears only once.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/single-number-ii",
        "Title": "Single Number II ",
        "Description": "b'Given an integer array nums where\\xc2\\xa0every element appears three times except for one, which appears exactly once. Find the single element and return it.\\nYou must\\xc2\\xa0implement a solution with a linear runtime complexity and use\\xc2\\xa0only constant\\xc2\\xa0extra space.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [2,2,3,2]\\nOutput: 3\\nExample 2:\\nInput: nums = [0,1,0,1,0,1,99]\\nOutput: 99\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 3 * 104\\n-231 <= nums[i] <= 231 - 1\\nEach element in nums appears exactly three times except for one element which appears once.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/copy-list-with-random-pointer",
        "Title": "Copy List with Random Pointer ",
        "Description": "b'A linked list of length n is given such that each node contains an additional random pointer, which could point to any node in the list, or null.\\nConstruct a deep copy of the list. The deep copy should consist of exactly n brand new nodes, where each new node has its value set to the value of its corresponding original node. Both the next and random pointer of the new nodes should point to new nodes in the copied list such that the pointers in the original list and copied list represent the same list state. None of the pointers in the new list should point to nodes in the original list.\\nFor example, if there are two nodes X and Y in the original list, where X.random --> Y, then for the corresponding two nodes x and y in the copied list, x.random --> y.\\nReturn the head of the copied linked list.\\nThe linked list is represented in the input/output as a list of n nodes. Each node is represented as a pair of [val, random_index] where:\\n\\nval: an integer representing Node.val\\nrandom_index: the index of the node (range from 0 to n-1) that the random pointer points to, or null if it does not point to any node.\\n\\nYour code will only be given the head of the original linked list.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: head = [[7,null],[13,0],[11,4],[10,2],[1,0]]\\nOutput: [[7,null],[13,0],[11,4],[10,2],[1,0]]\\n\\nExample 2:\\n\\nInput: head = [[1,1],[2,1]]\\nOutput: [[1,1],[2,1]]\\n\\nExample 3:\\n\\nInput: head = [[3,null],[3,0],[3,null]]\\nOutput: [[3,null],[3,0],[3,null]]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n0 <= n <= 1000\\n-104 <= Node.val <= 104\\nNode.random is null or is pointing to some node in the linked list.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/word-break",
        "Title": "Word Break ",
        "Description": "b'Given a string s and a dictionary of strings wordDict, return true if s can be segmented into a space-separated sequence of one or more dictionary words.\\nNote that the same word in the dictionary may be reused multiple times in the segmentation.\\n\\xc2\\xa0\\nExample 1:\\nInput: s = \"leetcode\", wordDict = [\"leet\",\"code\"]\\nOutput: true\\nExplanation: Return true because \"leetcode\" can be segmented as \"leet code\".\\n\\nExample 2:\\nInput: s = \"applepenapple\", wordDict = [\"apple\",\"pen\"]\\nOutput: true\\nExplanation: Return true because \"applepenapple\" can be segmented as \"apple pen apple\".\\nNote that you are allowed to reuse a dictionary word.\\n\\nExample 3:\\nInput: s = \"catsandog\", wordDict = [\"cats\",\"dog\",\"sand\",\"and\",\"cat\"]\\nOutput: false\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= s.length <= 300\\n1 <= wordDict.length <= 1000\\n1 <= wordDict[i].length <= 20\\ns and wordDict[i] consist of only lowercase English letters.\\nAll the strings of wordDict are unique.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/word-break-ii",
        "Title": "Word Break II ",
        "Description": "b'Given a string s and a dictionary of strings wordDict, add spaces in s to construct a sentence where each word is a valid dictionary word. Return all such possible sentences in any order.\\nNote that the same word in the dictionary may be reused multiple times in the segmentation.\\n\\xc2\\xa0\\nExample 1:\\nInput: s = \"catsanddog\", wordDict = [\"cat\",\"cats\",\"and\",\"sand\",\"dog\"]\\nOutput: [\"cats and dog\",\"cat sand dog\"]\\n\\nExample 2:\\nInput: s = \"pineapplepenapple\", wordDict = [\"apple\",\"pen\",\"applepen\",\"pine\",\"pineapple\"]\\nOutput: [\"pine apple pen apple\",\"pineapple pen apple\",\"pine applepen apple\"]\\nExplanation: Note that you are allowed to reuse a dictionary word.\\n\\nExample 3:\\nInput: s = \"catsandog\", wordDict = [\"cats\",\"dog\",\"sand\",\"and\",\"cat\"]\\nOutput: []\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= s.length <= 20\\n1 <= wordDict.length <= 1000\\n1 <= wordDict[i].length <= 10\\ns and wordDict[i] consist of only lowercase English letters.\\nAll the strings of wordDict are unique.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/linked-list-cycle",
        "Title": "Linked List Cycle ",
        "Description": "b\"Given head, the head of a linked list, determine if the linked list has a cycle in it.\\nThere is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the\\xc2\\xa0next\\xc2\\xa0pointer. Internally, pos\\xc2\\xa0is used to denote the index of the node that\\xc2\\xa0tail's\\xc2\\xa0next\\xc2\\xa0pointer is connected to.\\xc2\\xa0Note that\\xc2\\xa0pos\\xc2\\xa0is not passed as a parameter.\\nReturn\\xc2\\xa0true if there is a cycle in the linked list. Otherwise, return false.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: head = [3,2,0,-4], pos = 1\\nOutput: true\\nExplanation: There is a cycle in the linked list, where the tail connects to the 1st node (0-indexed).\\n\\nExample 2:\\n\\nInput: head = [1,2], pos = 0\\nOutput: true\\nExplanation: There is a cycle in the linked list, where the tail connects to the 0th node.\\n\\nExample 3:\\n\\nInput: head = [1], pos = -1\\nOutput: false\\nExplanation: There is no cycle in the linked list.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of the nodes in the list is in the range [0, 104].\\n-105 <= Node.val <= 105\\npos is -1 or a valid index in the linked-list.\\n\\n\\xc2\\xa0\\nFollow up: Can you solve it using O(1) (i.e. constant) memory?\\n\""
    },
    {
        "URL": "https://leetcode.com/problems/linked-list-cycle-ii",
        "Title": "Linked List Cycle II ",
        "Description": "b\"Given the head of a linked list, return the node where the cycle begins. If there is no cycle, return null.\\nThere is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the next pointer. Internally, pos is used to denote the index of the node that tail's next pointer is connected to (0-indexed). It is -1 if there is no cycle. Note that pos is not passed as a parameter.\\nDo not modify the linked list.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: head = [3,2,0,-4], pos = 1\\nOutput: tail connects to node index 1\\nExplanation: There is a cycle in the linked list, where tail connects to the second node.\\n\\nExample 2:\\n\\nInput: head = [1,2], pos = 0\\nOutput: tail connects to node index 0\\nExplanation: There is a cycle in the linked list, where tail connects to the first node.\\n\\nExample 3:\\n\\nInput: head = [1], pos = -1\\nOutput: no cycle\\nExplanation: There is no cycle in the linked list.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of the nodes in the list is in the range [0, 104].\\n-105 <= Node.val <= 105\\npos is -1 or a valid index in the linked-list.\\n\\n\\xc2\\xa0\\nFollow up: Can you solve it using O(1) (i.e. constant) memory?\\n\""
    },
    {
        "URL": "https://leetcode.com/problems/reorder-list",
        "Title": "Reorder List ",
        "Description": "b\"You are given the head of a singly linked-list. The list can be represented as:\\nL0 \\xe2\\x86\\x92 L1 \\xe2\\x86\\x92 \\xe2\\x80\\xa6 \\xe2\\x86\\x92 Ln - 1 \\xe2\\x86\\x92 Ln\\n\\nReorder the list to be on the following form:\\nL0 \\xe2\\x86\\x92 Ln \\xe2\\x86\\x92 L1 \\xe2\\x86\\x92 Ln - 1 \\xe2\\x86\\x92 L2 \\xe2\\x86\\x92 Ln - 2 \\xe2\\x86\\x92 \\xe2\\x80\\xa6\\n\\nYou may not modify the values in the list's nodes. Only nodes themselves may be changed.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: head = [1,2,3,4]\\nOutput: [1,4,2,3]\\n\\nExample 2:\\n\\nInput: head = [1,2,3,4,5]\\nOutput: [1,5,2,4,3]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of nodes in the list is in the range [1, 5 * 104].\\n1 <= Node.val <= 1000\\n\\n\""
    },
    {
        "URL": "https://leetcode.com/problems/binary-tree-preorder-traversal",
        "Title": "Binary Tree Preorder Traversal ",
        "Description": "b\"Given the root of a binary tree, return the preorder traversal of its nodes' values.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: root = [1,null,2,3]\\nOutput: [1,2,3]\\n\\nExample 2:\\nInput: root = []\\nOutput: []\\n\\nExample 3:\\nInput: root = [1]\\nOutput: [1]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of nodes in the tree is in the range [0, 100].\\n-100 <= Node.val <= 100\\n\\n\\xc2\\xa0\\nFollow up: Recursive solution is trivial, could you do it iteratively?\\n\""
    },
    {
        "URL": "https://leetcode.com/problems/binary-tree-postorder-traversal",
        "Title": "Binary Tree Postorder Traversal ",
        "Description": "b\"Given the root of a\\xc2\\xa0binary tree, return the postorder traversal of its nodes' values.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: root = [1,null,2,3]\\nOutput: [3,2,1]\\n\\nExample 2:\\nInput: root = []\\nOutput: []\\n\\nExample 3:\\nInput: root = [1]\\nOutput: [1]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of the nodes in the tree is in the range [0, 100].\\n-100 <= Node.val <= 100\\n\\n\\xc2\\xa0\\nFollow up: Recursive solution is trivial, could you do it iteratively?\""
    },
    {
        "URL": "https://leetcode.com/problems/lru-cache",
        "Title": "LRU Cache ",
        "Description": "b'Design a data structure that follows the constraints of a Least Recently Used (LRU) cache.\\nImplement the LRUCache class:\\n\\nLRUCache(int capacity) Initialize the LRU cache with positive size capacity.\\nint get(int key) Return the value of the key if the key exists, otherwise return -1.\\nvoid put(int key, int value)\\xc2\\xa0Update the value of the key if the key exists. Otherwise, add the key-value pair to the cache. If the number of keys exceeds the capacity from this operation, evict the least recently used key.\\n\\nThe functions\\xc2\\xa0get\\xc2\\xa0and\\xc2\\xa0put\\xc2\\xa0must each run in O(1) average time complexity.\\n\\xc2\\xa0\\nExample 1:\\nInput\\n[\"LRUCache\", \"put\", \"put\", \"get\", \"put\", \"get\", \"put\", \"get\", \"get\", \"get\"]\\n[[2], [1, 1], [2, 2], [1], [3, 3], [2], [4, 4], [1], [3], [4]]\\nOutput\\n[null, null, null, 1, null, -1, null, -1, 3, 4]\\n\\nExplanation\\nLRUCache lRUCache = new LRUCache(2);\\nlRUCache.put(1, 1); // cache is {1=1}\\nlRUCache.put(2, 2); // cache is {1=1, 2=2}\\nlRUCache.get(1);    // return 1\\nlRUCache.put(3, 3); // LRU key was 2, evicts key 2, cache is {1=1, 3=3}\\nlRUCache.get(2);    // returns -1 (not found)\\nlRUCache.put(4, 4); // LRU key was 1, evicts key 1, cache is {4=4, 3=3}\\nlRUCache.get(1);    // return -1 (not found)\\nlRUCache.get(3);    // return 3\\nlRUCache.get(4);    // return 4\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= capacity <= 3000\\n0 <= key <= 104\\n0 <= value <= 105\\nAt most 2\\xc2\\xa0* 105\\xc2\\xa0calls will be made to get and put.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/insertion-sort-list",
        "Title": "Insertion Sort List ",
        "Description": "b\"Given the head of a singly linked list, sort the list using insertion sort, and return the sorted list's head.\\nThe steps of the insertion sort algorithm:\\n\\nInsertion sort iterates, consuming one input element each repetition and growing a sorted output list.\\nAt each iteration, insertion sort removes one element from the input data, finds the location it belongs within the sorted list and inserts it there.\\nIt repeats until no input elements remain.\\n\\nThe following is a graphical example of the insertion sort algorithm. The partially sorted list (black) initially contains only the first element in the list. One element (red) is removed from the input data and inserted in-place into the sorted list with each iteration.\\n\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: head = [4,2,1,3]\\nOutput: [1,2,3,4]\\n\\nExample 2:\\n\\nInput: head = [-1,5,3,4,0]\\nOutput: [-1,0,3,4,5]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of nodes in the list is in the range [1, 5000].\\n-5000 <= Node.val <= 5000\\n\\n\""
    },
    {
        "URL": "https://leetcode.com/problems/sort-list",
        "Title": "Sort List ",
        "Description": "b'Given the head of a linked list, return the list after sorting it in ascending order.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: head = [4,2,1,3]\\nOutput: [1,2,3,4]\\n\\nExample 2:\\n\\nInput: head = [-1,5,3,4,0]\\nOutput: [-1,0,3,4,5]\\n\\nExample 3:\\nInput: head = []\\nOutput: []\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of nodes in the list is in the range [0, 5 * 104].\\n-105 <= Node.val <= 105\\n\\n\\xc2\\xa0\\nFollow up: Can you sort the linked list in O(n logn) time and O(1) memory (i.e. constant space)?\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/max-points-on-a-line",
        "Title": "Max Points on a Line ",
        "Description": "b'Given an array of points where points[i] = [xi, yi] represents a point on the X-Y plane, return the maximum number of points that lie on the same straight line.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: points = [[1,1],[2,2],[3,3]]\\nOutput: 3\\n\\nExample 2:\\n\\nInput: points = [[1,1],[3,2],[5,3],[4,1],[2,3],[1,4]]\\nOutput: 4\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= points.length <= 300\\npoints[i].length == 2\\n-104 <= xi, yi <= 104\\nAll the points are unique.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/evaluate-reverse-polish-notation",
        "Title": "Evaluate Reverse Polish Notation ",
        "Description": "b'Evaluate the value of an arithmetic expression in Reverse Polish Notation.\\nValid operators are +, -, *, and /. Each operand may be an integer or another expression.\\nNote that division between two integers should truncate toward zero.\\nIt is guaranteed that the given RPN expression is always valid. That means the expression would always evaluate to a result, and there will not be any division by zero operation.\\n\\xc2\\xa0\\nExample 1:\\nInput: tokens = [\"2\",\"1\",\"+\",\"3\",\"*\"]\\nOutput: 9\\nExplanation: ((2 + 1) * 3) = 9\\n\\nExample 2:\\nInput: tokens = [\"4\",\"13\",\"5\",\"/\",\"+\"]\\nOutput: 6\\nExplanation: (4 + (13 / 5)) = 6\\n\\nExample 3:\\nInput: tokens = [\"10\",\"6\",\"9\",\"3\",\"+\",\"-11\",\"*\",\"/\",\"*\",\"17\",\"+\",\"5\",\"+\"]\\nOutput: 22\\nExplanation: ((10 * (6 / ((9 + 3) * -11))) + 17) + 5\\n= ((10 * (6 / (12 * -11))) + 17) + 5\\n= ((10 * (6 / -132)) + 17) + 5\\n= ((10 * 0) + 17) + 5\\n= (0 + 17) + 5\\n= 17 + 5\\n= 22\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= tokens.length <= 104\\ntokens[i] is either an operator: \"+\", \"-\", \"*\", or \"/\", or an integer in the range [-200, 200].\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/reverse-words-in-a-string",
        "Title": "Reverse Words in a String ",
        "Description": "b'Given an input string s, reverse the order of the words.\\nA word is defined as a sequence of non-space characters. The words in s will be separated by at least one space.\\nReturn a string of the words in reverse order concatenated by a single space.\\nNote that s may contain leading or trailing spaces or multiple spaces between two words. The returned string should only have a single space separating the words. Do not include any extra spaces.\\n\\xc2\\xa0\\nExample 1:\\nInput: s = \"the sky is blue\"\\nOutput: \"blue is sky the\"\\n\\nExample 2:\\nInput: s = \"  hello world  \"\\nOutput: \"world hello\"\\nExplanation: Your reversed string should not contain leading or trailing spaces.\\n\\nExample 3:\\nInput: s = \"a good   example\"\\nOutput: \"example good a\"\\nExplanation: You need to reduce multiple spaces between two words to a single space in the reversed string.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= s.length <= 104\\ns contains English letters (upper-case and lower-case), digits, and spaces \\' \\'.\\nThere is at least one word in s.\\n\\n\\xc2\\xa0\\nFollow-up:\\xc2\\xa0If the string data type is mutable in your language, can\\xc2\\xa0you solve it\\xc2\\xa0in-place\\xc2\\xa0with\\xc2\\xa0O(1)\\xc2\\xa0extra space?\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/maximum-product-subarray",
        "Title": "Maximum Product Subarray ",
        "Description": "b'Given an integer array nums, find a contiguous non-empty subarray within the array that has the largest product, and return the product.\\nThe test cases are generated so that the answer will fit in a 32-bit integer.\\nA subarray is a contiguous subsequence of the array.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [2,3,-2,4]\\nOutput: 6\\nExplanation: [2,3] has the largest product 6.\\n\\nExample 2:\\nInput: nums = [-2,0,-1]\\nOutput: 0\\nExplanation: The result cannot be 2, because [-2,-1] is not a subarray.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 2 * 104\\n-10 <= nums[i] <= 10\\nThe product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/find-minimum-in-rotated-sorted-array",
        "Title": "Find Minimum in Rotated Sorted Array ",
        "Description": "b'Suppose an array of length n sorted in ascending order is rotated between 1 and n times. For example, the array nums = [0,1,2,4,5,6,7] might become:\\n\\n[4,5,6,7,0,1,2] if it was rotated 4 times.\\n[0,1,2,4,5,6,7] if it was rotated 7 times.\\n\\nNotice that rotating an array [a[0], a[1], a[2], ..., a[n-1]] 1 time results in the array [a[n-1], a[0], a[1], a[2], ..., a[n-2]].\\nGiven the sorted rotated array nums of unique elements, return the minimum element of this array.\\nYou must write an algorithm that runs in\\xc2\\xa0O(log n) time.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [3,4,5,1,2]\\nOutput: 1\\nExplanation: The original array was [1,2,3,4,5] rotated 3 times.\\n\\nExample 2:\\nInput: nums = [4,5,6,7,0,1,2]\\nOutput: 0\\nExplanation: The original array was [0,1,2,4,5,6,7] and it was rotated 4 times.\\n\\nExample 3:\\nInput: nums = [11,13,15,17]\\nOutput: 11\\nExplanation: The original array was [11,13,15,17] and it was rotated 4 times. \\n\\n\\xc2\\xa0\\nConstraints:\\n\\nn == nums.length\\n1 <= n <= 5000\\n-5000 <= nums[i] <= 5000\\nAll the integers of nums are unique.\\nnums is sorted and rotated between 1 and n times.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/find-minimum-in-rotated-sorted-array-ii",
        "Title": "Find Minimum in Rotated Sorted Array II ",
        "Description": "b'Suppose an array of length n sorted in ascending order is rotated between 1 and n times. For example, the array nums = [0,1,4,4,5,6,7] might become:\\n\\n[4,5,6,7,0,1,4] if it was rotated 4 times.\\n[0,1,4,4,5,6,7] if it was rotated 7 times.\\n\\nNotice that rotating an array [a[0], a[1], a[2], ..., a[n-1]] 1 time results in the array [a[n-1], a[0], a[1], a[2], ..., a[n-2]].\\nGiven the sorted rotated array nums that may contain duplicates, return the minimum element of this array.\\nYou must decrease the overall operation steps as much as possible.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [1,3,5]\\nOutput: 1\\nExample 2:\\nInput: nums = [2,2,2,0,1]\\nOutput: 0\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nn == nums.length\\n1 <= n <= 5000\\n-5000 <= nums[i] <= 5000\\nnums is sorted and rotated between 1 and n times.\\n\\n\\xc2\\xa0\\nFollow up: This problem is similar to\\xc2\\xa0Find Minimum in Rotated Sorted Array, but\\xc2\\xa0nums may contain duplicates. Would this affect the runtime complexity? How and why?\\n\\xc2\\xa0\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/min-stack",
        "Title": "Min Stack ",
        "Description": "b'Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.\\nImplement the MinStack class:\\n\\nMinStack() initializes the stack object.\\nvoid push(int val) pushes the element val onto the stack.\\nvoid pop() removes the element on the top of the stack.\\nint top() gets the top element of the stack.\\nint getMin() retrieves the minimum element in the stack.\\n\\nYou must implement a solution with O(1) time complexity for each function.\\n\\xc2\\xa0\\nExample 1:\\nInput\\n[\"MinStack\",\"push\",\"push\",\"push\",\"getMin\",\"pop\",\"top\",\"getMin\"]\\n[[],[-2],[0],[-3],[],[],[],[]]\\n\\nOutput\\n[null,null,null,null,-3,null,0,-2]\\n\\nExplanation\\nMinStack minStack = new MinStack();\\nminStack.push(-2);\\nminStack.push(0);\\nminStack.push(-3);\\nminStack.getMin(); // return -3\\nminStack.pop();\\nminStack.top();    // return 0\\nminStack.getMin(); // return -2\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n-231 <= val <= 231 - 1\\nMethods pop, top and getMin operations will always be called on non-empty stacks.\\nAt most 3 * 104 calls will be made to push, pop, top, and getMin.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/binary-tree-upside-down",
        "Title": "Binary Tree Upside Down ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/read-n-characters-given-read4",
        "Title": "Read N Characters Given Read4 ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/read-n-characters-given-read4-ii-call-multiple-times",
        "Title": "Read N Characters Given read4 II - Call Multiple Times ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/longest-substring-with-at-most-two-distinct-characters",
        "Title": "Longest Substring with At Most Two Distinct Characters ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/intersection-of-two-linked-lists",
        "Title": "Intersection of Two Linked Lists ",
        "Description": "b\"Given the heads of two singly linked-lists headA and headB, return the node at which the two lists intersect. If the two linked lists have no intersection at all, return null.\\nFor example, the following two linked lists begin to intersect at node c1:\\n\\nThe test cases are generated such that there are no cycles anywhere in the entire linked structure.\\nNote that the linked lists must retain their original structure after the function returns.\\nCustom Judge:\\nThe inputs to the judge are given as follows (your program is not given these inputs):\\n\\nintersectVal - The value of the node where the intersection occurs. This is 0 if there is no intersected node.\\nlistA - The first linked list.\\nlistB - The second linked list.\\nskipA - The number of nodes to skip ahead in listA (starting from the head) to get to the intersected node.\\nskipB - The number of nodes to skip ahead in listB (starting from the head) to get to the intersected node.\\n\\nThe judge will then create the linked structure based on these inputs and pass the two heads, headA and headB\\xc2\\xa0to your program. If you correctly return the intersected node, then your solution will be accepted.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: intersectVal = 8, listA = [4,1,8,4,5], listB = [5,6,1,8,4,5], skipA = 2, skipB = 3\\nOutput: Intersected at '8'\\nExplanation: The intersected node's value is 8 (note that this must not be 0 if the two lists intersect).\\nFrom the head of A, it reads as [4,1,8,4,5]. From the head of B, it reads as [5,6,1,8,4,5]. There are 2 nodes before the intersected node in A; There are 3 nodes before the intersected node in B.\\n\\nExample 2:\\n\\nInput: intersectVal = 2, listA = [1,9,1,2,4], listB = [3,2,4], skipA = 3, skipB = 1\\nOutput: Intersected at '2'\\nExplanation: The intersected node's value is 2 (note that this must not be 0 if the two lists intersect).\\nFrom the head of A, it reads as [1,9,1,2,4]. From the head of B, it reads as [3,2,4]. There are 3 nodes before the intersected node in A; There are 1 node before the intersected node in B.\\n\\nExample 3:\\n\\nInput: intersectVal = 0, listA = [2,6,4], listB = [1,5], skipA = 3, skipB = 2\\nOutput: No intersection\\nExplanation: From the head of A, it reads as [2,6,4]. From the head of B, it reads as [1,5]. Since the two lists do not intersect, intersectVal must be 0, while skipA and skipB can be arbitrary values.\\nExplanation: The two lists do not intersect, so return null.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of nodes of listA is in the m.\\nThe number of nodes of listB is in the n.\\n1 <= m, n <= 3 * 104\\n1 <= Node.val <= 105\\n0 <= skipA <\\xc2\\xa0m\\n0 <= skipB <\\xc2\\xa0n\\nintersectVal is 0 if listA and listB do not intersect.\\nintersectVal == listA[skipA] == listB[skipB] if listA and listB intersect.\\n\\n\\xc2\\xa0\\nFollow up: Could you write a solution that runs in O(m + n) time and use only O(1) memory?\""
    },
    {
        "URL": "https://leetcode.com/problems/one-edit-distance",
        "Title": "One Edit Distance ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/find-peak-element",
        "Title": "Find Peak Element ",
        "Description": "b'A peak element is an element that is strictly greater than its neighbors.\\nGiven a 0-indexed integer array nums, find a peak element, and return its index. If the array contains multiple peaks, return the index to any of the peaks.\\nYou may imagine that nums[-1] = nums[n] = -\\xe2\\x88\\x9e. In other words, an element is always considered to be strictly greater than a neighbor that is outside the array.\\nYou must write an algorithm that runs in O(log n) time.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [1,2,3,1]\\nOutput: 2\\nExplanation: 3 is a peak element and your function should return the index number 2.\\nExample 2:\\nInput: nums = [1,2,1,3,5,6,4]\\nOutput: 5\\nExplanation: Your function can return either index number 1 where the peak element is 2, or index number 5 where the peak element is 6.\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 1000\\n-231 <= nums[i] <= 231 - 1\\nnums[i] != nums[i + 1] for all valid i.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/missing-ranges",
        "Title": "Missing Ranges ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/maximum-gap",
        "Title": "Maximum Gap ",
        "Description": "b'Given an integer array nums, return the maximum difference between two successive elements in its sorted form. If the array contains less than two elements, return 0.\\nYou must write an algorithm that runs in linear time and uses linear extra space.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [3,6,9,1]\\nOutput: 3\\nExplanation: The sorted form of the array is [1,3,6,9], either (3,6) or (6,9) has the maximum difference 3.\\n\\nExample 2:\\nInput: nums = [10]\\nOutput: 0\\nExplanation: The array contains less than 2 elements, therefore return 0.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 105\\n0 <= nums[i] <= 109\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/compare-version-numbers",
        "Title": "Compare Version Numbers ",
        "Description": "b'Given two version numbers,\\xc2\\xa0version1 and version2, compare them.\\n\\n\\nVersion numbers consist of one or more revisions joined by a dot\\xc2\\xa0\\'.\\'. Each revision\\xc2\\xa0consists of digits\\xc2\\xa0and may contain leading zeros. Every revision contains at least one character. Revisions are 0-indexed from left to right, with the leftmost revision being revision 0, the next revision being revision 1, and so on. For example\\xc2\\xa02.5.33\\xc2\\xa0and\\xc2\\xa00.1\\xc2\\xa0are valid version numbers.\\nTo compare version numbers, compare their revisions in left-to-right order. Revisions are compared using their\\xc2\\xa0integer value ignoring any leading zeros. This means that revisions\\xc2\\xa01\\xc2\\xa0and\\xc2\\xa0001\\xc2\\xa0are considered\\xc2\\xa0equal. If a version number does not specify a revision at an index, then\\xc2\\xa0treat the revision as\\xc2\\xa00. For example, version\\xc2\\xa01.0 is less than version\\xc2\\xa01.1\\xc2\\xa0because their revision 0s are the same, but their revision 1s are\\xc2\\xa00\\xc2\\xa0and\\xc2\\xa01\\xc2\\xa0respectively, and\\xc2\\xa00 < 1.\\nReturn the following:\\n\\nIf version1 < version2, return -1.\\nIf version1 > version2, return 1.\\nOtherwise, return 0.\\n\\n\\xc2\\xa0\\nExample 1:\\nInput: version1 = \"1.01\", version2 = \"1.001\"\\nOutput: 0\\nExplanation: Ignoring leading zeroes, both \"01\" and \"001\" represent the same integer \"1\".\\n\\nExample 2:\\nInput: version1 = \"1.0\", version2 = \"1.0.0\"\\nOutput: 0\\nExplanation: version1 does not specify revision 2, which means it is treated as \"0\".\\n\\nExample 3:\\nInput: version1 = \"0.1\", version2 = \"1.1\"\\nOutput: -1\\nExplanation: version1\\'s revision 0 is \"0\", while version2\\'s revision 0 is \"1\". 0 < 1, so version1 < version2.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= version1.length, version2.length <= 500\\nversion1 and version2\\xc2\\xa0only contain digits and \\'.\\'.\\nversion1 and version2\\xc2\\xa0are valid version numbers.\\nAll the given revisions in\\xc2\\xa0version1 and version2\\xc2\\xa0can be stored in\\xc2\\xa0a\\xc2\\xa032-bit integer.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/fraction-to-recurring-decimal",
        "Title": "Fraction to Recurring Decimal ",
        "Description": "b'Given two integers representing the numerator and denominator of a fraction, return the fraction in string format.\\nIf the fractional part is repeating, enclose the repeating part in parentheses.\\nIf multiple answers are possible, return any of them.\\nIt is guaranteed that the length of the answer string is less than 104 for all the given inputs.\\n\\xc2\\xa0\\nExample 1:\\nInput: numerator = 1, denominator = 2\\nOutput: \"0.5\"\\n\\nExample 2:\\nInput: numerator = 2, denominator = 1\\nOutput: \"2\"\\n\\nExample 3:\\nInput: numerator = 4, denominator = 333\\nOutput: \"0.(012)\"\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n-231 <=\\xc2\\xa0numerator, denominator <= 231 - 1\\ndenominator != 0\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/two-sum-ii-input-array-is-sorted",
        "Title": "Two Sum II - Input Array Is Sorted ",
        "Description": "b'Given a 1-indexed array of integers numbers that is already sorted in non-decreasing order, find two numbers such that they add up to a specific target number. Let these two numbers be numbers[index1] and numbers[index2] where 1 <= index1 < index2 <= numbers.length.\\nReturn the indices of the two numbers, index1 and index2, added by one as an integer array [index1, index2] of length 2.\\nThe tests are generated such that there is exactly one solution. You may not use the same element twice.\\nYour solution must use only constant extra space.\\n\\xc2\\xa0\\nExample 1:\\nInput: numbers = [2,7,11,15], target = 9\\nOutput: [1,2]\\nExplanation: The sum of 2 and 7 is 9. Therefore, index1 = 1, index2 = 2. We return [1, 2].\\n\\nExample 2:\\nInput: numbers = [2,3,4], target = 6\\nOutput: [1,3]\\nExplanation: The sum of 2 and 4 is 6. Therefore index1 = 1, index2 = 3. We return [1, 3].\\n\\nExample 3:\\nInput: numbers = [-1,0], target = -1\\nOutput: [1,2]\\nExplanation: The sum of -1 and 0 is -1. Therefore index1 = 1, index2 = 2. We return [1, 2].\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n2 <= numbers.length <= 3 * 104\\n-1000 <= numbers[i] <= 1000\\nnumbers is sorted in non-decreasing order.\\n-1000 <= target <= 1000\\nThe tests are generated such that there is exactly one solution.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/excel-sheet-column-title",
        "Title": "Excel Sheet Column Title ",
        "Description": "b'Given an integer columnNumber, return its corresponding column title as it appears in an Excel sheet.\\nFor example:\\nA -> 1\\nB -> 2\\nC -> 3\\n...\\nZ -> 26\\nAA -> 27\\nAB -> 28 \\n...\\n\\n\\xc2\\xa0\\nExample 1:\\nInput: columnNumber = 1\\nOutput: \"A\"\\n\\nExample 2:\\nInput: columnNumber = 28\\nOutput: \"AB\"\\n\\nExample 3:\\nInput: columnNumber = 701\\nOutput: \"ZY\"\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= columnNumber <= 231 - 1\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/majority-element",
        "Title": "Majority Element ",
        "Description": "b'Given an array nums of size n, return the majority element.\\nThe majority element is the element that appears more than \\xe2\\x8c\\x8an / 2\\xe2\\x8c\\x8b times. You may assume that the majority element always exists in the array.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [3,2,3]\\nOutput: 3\\nExample 2:\\nInput: nums = [2,2,1,1,1,2,2]\\nOutput: 2\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nn == nums.length\\n1 <= n <= 5 * 104\\n-109 <= nums[i] <= 109\\n\\n\\xc2\\xa0\\nFollow-up: Could you solve the problem in linear time and in O(1) space?'"
    },
    {
        "URL": "https://leetcode.com/problems/two-sum-iii-data-structure-design",
        "Title": "Two Sum III - Data structure design ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/excel-sheet-column-number",
        "Title": "Excel Sheet Column Number ",
        "Description": "b'Given a string columnTitle that represents the column title as appears in an Excel sheet, return its corresponding column number.\\nFor example:\\nA -> 1\\nB -> 2\\nC -> 3\\n...\\nZ -> 26\\nAA -> 27\\nAB -> 28 \\n...\\n\\n\\xc2\\xa0\\nExample 1:\\nInput: columnTitle = \"A\"\\nOutput: 1\\n\\nExample 2:\\nInput: columnTitle = \"AB\"\\nOutput: 28\\n\\nExample 3:\\nInput: columnTitle = \"ZY\"\\nOutput: 701\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= columnTitle.length <= 7\\ncolumnTitle consists only of uppercase English letters.\\ncolumnTitle is in the range [\"A\", \"FXSHRXW\"].\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/factorial-trailing-zeroes",
        "Title": "Factorial Trailing Zeroes ",
        "Description": "b'Given an integer n, return the number of trailing zeroes in n!.\\nNote that n! = n * (n - 1) * (n - 2) * ... * 3 * 2 * 1.\\n\\xc2\\xa0\\nExample 1:\\nInput: n = 3\\nOutput: 0\\nExplanation: 3! = 6, no trailing zero.\\n\\nExample 2:\\nInput: n = 5\\nOutput: 1\\nExplanation: 5! = 120, one trailing zero.\\n\\nExample 3:\\nInput: n = 0\\nOutput: 0\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n0 <= n <= 104\\n\\n\\xc2\\xa0\\nFollow up: Could you write a solution that works in logarithmic time complexity?\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/binary-search-tree-iterator",
        "Title": "Binary Search Tree Iterator ",
        "Description": "b'Implement the BSTIterator class that represents an iterator over the in-order traversal of a binary search tree (BST):\\n\\nBSTIterator(TreeNode root) Initializes an object of the BSTIterator class. The root of the BST is given as part of the constructor. The pointer should be initialized to a non-existent number smaller than any element in the BST.\\nboolean hasNext() Returns true if there exists a number in the traversal to the right of the pointer, otherwise returns false.\\nint next() Moves the pointer to the right, then returns the number at the pointer.\\n\\nNotice that by initializing the pointer to a non-existent smallest number, the first call to next() will return the smallest element in the BST.\\nYou may assume that next() calls will always be valid. That is, there will be at least a next number in the in-order traversal when next() is called.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput\\n[\"BSTIterator\", \"next\", \"next\", \"hasNext\", \"next\", \"hasNext\", \"next\", \"hasNext\", \"next\", \"hasNext\"]\\n[[[7, 3, 15, null, null, 9, 20]], [], [], [], [], [], [], [], [], []]\\nOutput\\n[null, 3, 7, true, 9, true, 15, true, 20, false]\\n\\nExplanation\\nBSTIterator bSTIterator = new BSTIterator([7, 3, 15, null, null, 9, 20]);\\nbSTIterator.next();    // return 3\\nbSTIterator.next();    // return 7\\nbSTIterator.hasNext(); // return True\\nbSTIterator.next();    // return 9\\nbSTIterator.hasNext(); // return True\\nbSTIterator.next();    // return 15\\nbSTIterator.hasNext(); // return True\\nbSTIterator.next();    // return 20\\nbSTIterator.hasNext(); // return False\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of nodes in the tree is in the range [1, 105].\\n0 <= Node.val <= 106\\nAt most 105 calls will be made to hasNext, and next.\\n\\n\\xc2\\xa0\\nFollow up:\\n\\nCould you implement next() and hasNext() to run in average O(1) time and use\\xc2\\xa0O(h) memory, where h is the height of the tree?\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/dungeon-game",
        "Title": "Dungeon Game ",
        "Description": "b\"The demons had captured the princess and imprisoned her in the bottom-right corner of a dungeon. The dungeon consists of m x n rooms laid out in a 2D grid. Our valiant knight was initially positioned in the top-left room and must fight his way through dungeon to rescue the princess.\\nThe knight has an initial health point represented by a positive integer. If at any point his health point drops to 0 or below, he dies immediately.\\nSome of the rooms are guarded by demons (represented by negative integers), so the knight loses health upon entering these rooms; other rooms are either empty (represented as 0) or contain magic orbs that increase the knight's health (represented by positive integers).\\nTo reach the princess as quickly as possible, the knight decides to move only rightward or downward in each step.\\nReturn the knight's minimum initial health so that he can rescue the princess.\\nNote that any room can contain threats or power-ups, even the first room the knight enters and the bottom-right room where the princess is imprisoned.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: dungeon = [[-2,-3,3],[-5,-10,1],[10,30,-5]]\\nOutput: 7\\nExplanation: The initial health of the knight must be at least 7 if he follows the optimal path: RIGHT-> RIGHT -> DOWN -> DOWN.\\n\\nExample 2:\\nInput: dungeon = [[0]]\\nOutput: 1\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nm == dungeon.length\\nn == dungeon[i].length\\n1 <= m, n <= 200\\n-1000 <= dungeon[i][j] <= 1000\\n\\n\""
    },
    {
        "URL": "https://leetcode.com/problems/combine-two-tables",
        "Title": "Combine Two Tables ",
        "Description": "b'SQL SchemaTable: Person\\n+-------------+---------+\\n| Column Name | Type    |\\n+-------------+---------+\\n| personId    | int     |\\n| lastName    | varchar |\\n| firstName   | varchar |\\n+-------------+---------+\\npersonId is the primary key column for this table.\\nThis table contains information about the ID of some persons and their first and last names.\\n\\n\\xc2\\xa0\\nTable: Address\\n+-------------+---------+\\n| Column Name | Type    |\\n+-------------+---------+\\n| addressId   | int     |\\n| personId    | int     |\\n| city        | varchar |\\n| state       | varchar |\\n+-------------+---------+\\naddressId is the primary key column for this table.\\nEach row of this table contains information about the city and state of one person with ID = PersonId.\\n\\n\\xc2\\xa0\\nWrite an SQL query to report the first name, last name, city, and state of each person in the Person table. If the address of a personId is not present in the Address table, report null instead.\\nReturn the result table in any order.\\nThe query result format is in the following example.\\n\\xc2\\xa0\\nExample 1:\\nInput: \\nPerson table:\\n+----------+----------+-----------+\\n| personId | lastName | firstName |\\n+----------+----------+-----------+\\n| 1        | Wang     | Allen     |\\n| 2        | Alice    | Bob       |\\n+----------+----------+-----------+\\nAddress table:\\n+-----------+----------+---------------+------------+\\n| addressId | personId | city          | state      |\\n+-----------+----------+---------------+------------+\\n| 1         | 2        | New York City | New York   |\\n| 2         | 3        | Leetcode      | California |\\n+-----------+----------+---------------+------------+\\nOutput: \\n+-----------+----------+---------------+----------+\\n| firstName | lastName | city          | state    |\\n+-----------+----------+---------------+----------+\\n| Allen     | Wang     | Null          | Null     |\\n| Bob       | Alice    | New York City | New York |\\n+-----------+----------+---------------+----------+\\nExplanation: \\nThere is no address in the address table for the personId = 1 so we return null in their city and state.\\naddressId = 1 contains information about the address of personId = 2.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/second-highest-salary",
        "Title": "Second Highest Salary ",
        "Description": "b'SQL SchemaTable: Employee\\n+-------------+------+\\n| Column Name | Type |\\n+-------------+------+\\n| id          | int  |\\n| salary      | int  |\\n+-------------+------+\\nid is the primary key column for this table.\\nEach row of this table contains information about the salary of an employee.\\n\\n\\xc2\\xa0\\nWrite an SQL query to report the second highest salary from the Employee table. If there is no second highest salary, the query should report null.\\nThe query result format is in the following example.\\n\\xc2\\xa0\\nExample 1:\\nInput: \\nEmployee table:\\n+----+--------+\\n| id | salary |\\n+----+--------+\\n| 1  | 100    |\\n| 2  | 200    |\\n| 3  | 300    |\\n+----+--------+\\nOutput: \\n+---------------------+\\n| SecondHighestSalary |\\n+---------------------+\\n| 200                 |\\n+---------------------+\\n\\nExample 2:\\nInput: \\nEmployee table:\\n+----+--------+\\n| id | salary |\\n+----+--------+\\n| 1  | 100    |\\n+----+--------+\\nOutput: \\n+---------------------+\\n| SecondHighestSalary |\\n+---------------------+\\n| null                |\\n+---------------------+\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/nth-highest-salary",
        "Title": "Nth Highest Salary ",
        "Description": "b'SQL SchemaTable: Employee\\n+-------------+------+\\n| Column Name | Type |\\n+-------------+------+\\n| id          | int  |\\n| salary      | int  |\\n+-------------+------+\\nid is the primary key column for this table.\\nEach row of this table contains information about the salary of an employee.\\n\\n\\xc2\\xa0\\nWrite an SQL query to report the nth highest salary from the Employee table. If there is no nth highest salary, the query should report null.\\nThe query result format is in the following example.\\n\\xc2\\xa0\\nExample 1:\\nInput: \\nEmployee table:\\n+----+--------+\\n| id | salary |\\n+----+--------+\\n| 1  | 100    |\\n| 2  | 200    |\\n| 3  | 300    |\\n+----+--------+\\nn = 2\\nOutput: \\n+------------------------+\\n| getNthHighestSalary(2) |\\n+------------------------+\\n| 200                    |\\n+------------------------+\\n\\nExample 2:\\nInput: \\nEmployee table:\\n+----+--------+\\n| id | salary |\\n+----+--------+\\n| 1  | 100    |\\n+----+--------+\\nn = 2\\nOutput: \\n+------------------------+\\n| getNthHighestSalary(2) |\\n+------------------------+\\n| null                   |\\n+------------------------+\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/rank-scores",
        "Title": "Rank Scores ",
        "Description": "b'SQL SchemaTable: Scores\\n+-------------+---------+\\n| Column Name | Type    |\\n+-------------+---------+\\n| id          | int     |\\n| score       | decimal |\\n+-------------+---------+\\nid is the primary key for this table.\\nEach row of this table contains the score of a game. Score is a floating point value with two decimal places.\\n\\n\\xc2\\xa0\\nWrite an SQL query to rank the scores. The ranking should be calculated according to the following rules:\\n\\nThe scores should be ranked from the highest to the lowest.\\nIf there is a tie between two scores, both should have the same ranking.\\nAfter a tie, the next ranking number should be the next consecutive integer value. In other words, there should be no holes between ranks.\\n\\nReturn the result table ordered by score in descending order.\\nThe query result format is in the following example.\\n\\xc2\\xa0\\nExample 1:\\nInput: \\nScores table:\\n+----+-------+\\n| id | score |\\n+----+-------+\\n| 1  | 3.50  |\\n| 2  | 3.65  |\\n| 3  | 4.00  |\\n| 4  | 3.85  |\\n| 5  | 4.00  |\\n| 6  | 3.65  |\\n+----+-------+\\nOutput: \\n+-------+------+\\n| score | rank |\\n+-------+------+\\n| 4.00  | 1    |\\n| 4.00  | 1    |\\n| 3.85  | 2    |\\n| 3.65  | 3    |\\n| 3.65  | 3    |\\n| 3.50  | 4    |\\n+-------+------+\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/largest-number",
        "Title": "Largest Number ",
        "Description": "b'Given a list of non-negative integers nums, arrange them such that they form the largest number and return it.\\nSince the result may be very large, so you need to return a string instead of an integer.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [10,2]\\nOutput: \"210\"\\n\\nExample 2:\\nInput: nums = [3,30,34,5,9]\\nOutput: \"9534330\"\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 100\\n0 <= nums[i] <= 109\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/consecutive-numbers",
        "Title": "Consecutive Numbers ",
        "Description": "b'SQL SchemaTable: Logs\\n+-------------+---------+\\n| Column Name | Type    |\\n+-------------+---------+\\n| id          | int     |\\n| num         | varchar |\\n+-------------+---------+\\nid is the primary key for this table.\\nid is an autoincrement column.\\n\\n\\xc2\\xa0\\nWrite an SQL query to find all numbers that appear at least three times consecutively.\\nReturn the result table in any order.\\nThe query result format is in the following example.\\n\\xc2\\xa0\\nExample 1:\\nInput: \\nLogs table:\\n+----+-----+\\n| id | num |\\n+----+-----+\\n| 1  | 1   |\\n| 2  | 1   |\\n| 3  | 1   |\\n| 4  | 2   |\\n| 5  | 1   |\\n| 6  | 2   |\\n| 7  | 2   |\\n+----+-----+\\nOutput: \\n+-----------------+\\n| ConsecutiveNums |\\n+-----------------+\\n| 1               |\\n+-----------------+\\nExplanation: 1 is the only number that appears consecutively for at least three times.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/employees-earning-more-than-their-managers",
        "Title": "Employees Earning More Than Their Managers ",
        "Description": "b'SQL SchemaTable: Employee\\n+-------------+---------+\\n| Column Name | Type    |\\n+-------------+---------+\\n| id          | int     |\\n| name        | varchar |\\n| salary      | int     |\\n| managerId   | int     |\\n+-------------+---------+\\nid is the primary key column for this table.\\nEach row of this table indicates the ID of an employee, their name, salary, and the ID of their manager.\\n\\n\\xc2\\xa0\\nWrite an SQL query to find the employees who earn more than their managers.\\nReturn the result table in any order.\\nThe query result format is in the following example.\\n\\xc2\\xa0\\nExample 1:\\nInput: \\nEmployee table:\\n+----+-------+--------+-----------+\\n| id | name  | salary | managerId |\\n+----+-------+--------+-----------+\\n| 1  | Joe   | 70000  | 3         |\\n| 2  | Henry | 80000  | 4         |\\n| 3  | Sam   | 60000  | Null      |\\n| 4  | Max   | 90000  | Null      |\\n+----+-------+--------+-----------+\\nOutput: \\n+----------+\\n| Employee |\\n+----------+\\n| Joe      |\\n+----------+\\nExplanation: Joe is the only employee who earns more than his manager.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/duplicate-emails",
        "Title": "Duplicate Emails ",
        "Description": "b'SQL SchemaTable: Person\\n+-------------+---------+\\n| Column Name | Type    |\\n+-------------+---------+\\n| id          | int     |\\n| email       | varchar |\\n+-------------+---------+\\nid is the primary key column for this table.\\nEach row of this table contains an email. The emails will not contain uppercase letters.\\n\\n\\xc2\\xa0\\nWrite an SQL query to report all the duplicate emails.\\nReturn the result table in any order.\\nThe query result format is in the following example.\\n\\xc2\\xa0\\nExample 1:\\nInput: \\nPerson table:\\n+----+---------+\\n| id | email   |\\n+----+---------+\\n| 1  | a@b.com |\\n| 2  | c@d.com |\\n| 3  | a@b.com |\\n+----+---------+\\nOutput: \\n+---------+\\n| Email   |\\n+---------+\\n| a@b.com |\\n+---------+\\nExplanation: a@b.com is repeated two times.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/customers-who-never-order",
        "Title": "Customers Who Never Order ",
        "Description": "b'SQL SchemaTable: Customers\\n+-------------+---------+\\n| Column Name | Type    |\\n+-------------+---------+\\n| id          | int     |\\n| name        | varchar |\\n+-------------+---------+\\nid is the primary key column for this table.\\nEach row of this table indicates the ID and name of a customer.\\n\\n\\xc2\\xa0\\nTable: Orders\\n+-------------+------+\\n| Column Name | Type |\\n+-------------+------+\\n| id          | int  |\\n| customerId  | int  |\\n+-------------+------+\\nid is the primary key column for this table.\\ncustomerId is a foreign key of the ID from the Customers table.\\nEach row of this table indicates the ID of an order and the ID of the customer who ordered it.\\n\\n\\xc2\\xa0\\nWrite an SQL query to report all customers who never order anything.\\nReturn the result table in any order.\\nThe query result format is in the following example.\\n\\xc2\\xa0\\nExample 1:\\nInput: \\nCustomers table:\\n+----+-------+\\n| id | name  |\\n+----+-------+\\n| 1  | Joe   |\\n| 2  | Henry |\\n| 3  | Sam   |\\n| 4  | Max   |\\n+----+-------+\\nOrders table:\\n+----+------------+\\n| id | customerId |\\n+----+------------+\\n| 1  | 3          |\\n| 2  | 1          |\\n+----+------------+\\nOutput: \\n+-----------+\\n| Customers |\\n+-----------+\\n| Henry     |\\n| Max       |\\n+-----------+\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/department-highest-salary",
        "Title": "Department Highest Salary ",
        "Description": "b'SQL SchemaTable: Employee\\n+--------------+---------+\\n| Column Name  | Type    |\\n+--------------+---------+\\n| id           | int     |\\n| name         | varchar |\\n| salary       | int     |\\n| departmentId | int     |\\n+--------------+---------+\\nid is the primary key column for this table.\\ndepartmentId is a foreign key of the ID from the Department table.\\nEach row of this table indicates the ID, name, and salary of an employee. It also contains the ID of their department.\\n\\n\\xc2\\xa0\\nTable: Department\\n+-------------+---------+\\n| Column Name | Type    |\\n+-------------+---------+\\n| id          | int     |\\n| name        | varchar |\\n+-------------+---------+\\nid is the primary key column for this table.\\nEach row of this table indicates the ID of a department and its name.\\n\\n\\xc2\\xa0\\nWrite an SQL query to find employees who have the highest salary in each of the departments.\\nReturn the result table in any order.\\nThe query result format is in the following example.\\n\\xc2\\xa0\\nExample 1:\\nInput: \\nEmployee table:\\n+----+-------+--------+--------------+\\n| id | name  | salary | departmentId |\\n+----+-------+--------+--------------+\\n| 1  | Joe   | 70000  | 1            |\\n| 2  | Jim   | 90000  | 1            |\\n| 3  | Henry | 80000  | 2            |\\n| 4  | Sam   | 60000  | 2            |\\n| 5  | Max   | 90000  | 1            |\\n+----+-------+--------+--------------+\\nDepartment table:\\n+----+-------+\\n| id | name  |\\n+----+-------+\\n| 1  | IT    |\\n| 2  | Sales |\\n+----+-------+\\nOutput: \\n+------------+----------+--------+\\n| Department | Employee | Salary |\\n+------------+----------+--------+\\n| IT         | Jim      | 90000  |\\n| Sales      | Henry    | 80000  |\\n| IT         | Max      | 90000  |\\n+------------+----------+--------+\\nExplanation: Max and Jim both have the highest salary in the IT department and Henry has the highest salary in the Sales department.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/department-top-three-salaries",
        "Title": "Department Top Three Salaries ",
        "Description": "b\"SQL SchemaTable: Employee\\n+--------------+---------+\\n| Column Name  | Type    |\\n+--------------+---------+\\n| id           | int     |\\n| name         | varchar |\\n| salary       | int     |\\n| departmentId | int     |\\n+--------------+---------+\\nid is the primary key column for this table.\\ndepartmentId is a foreign key of the ID from the Department table.\\nEach row of this table indicates the ID, name, and salary of an employee. It also contains the ID of their department.\\n\\n\\xc2\\xa0\\nTable: Department\\n+-------------+---------+\\n| Column Name | Type    |\\n+-------------+---------+\\n| id          | int     |\\n| name        | varchar |\\n+-------------+---------+\\nid is the primary key column for this table.\\nEach row of this table indicates the ID of a department and its name.\\n\\n\\xc2\\xa0\\nA company's executives are interested in seeing who earns the most money in each of the company's departments. A high earner in a department is an employee who has a salary in the top three unique salaries for that department.\\nWrite an SQL query to find the employees who are high earners in each of the departments.\\nReturn the result table in any order.\\nThe query result format is in the following example.\\n\\xc2\\xa0\\nExample 1:\\nInput: \\nEmployee table:\\n+----+-------+--------+--------------+\\n| id | name  | salary | departmentId |\\n+----+-------+--------+--------------+\\n| 1  | Joe   | 85000  | 1            |\\n| 2  | Henry | 80000  | 2            |\\n| 3  | Sam   | 60000  | 2            |\\n| 4  | Max   | 90000  | 1            |\\n| 5  | Janet | 69000  | 1            |\\n| 6  | Randy | 85000  | 1            |\\n| 7  | Will  | 70000  | 1            |\\n+----+-------+--------+--------------+\\nDepartment table:\\n+----+-------+\\n| id | name  |\\n+----+-------+\\n| 1  | IT    |\\n| 2  | Sales |\\n+----+-------+\\nOutput: \\n+------------+----------+--------+\\n| Department | Employee | Salary |\\n+------------+----------+--------+\\n| IT         | Max      | 90000  |\\n| IT         | Joe      | 85000  |\\n| IT         | Randy    | 85000  |\\n| IT         | Will     | 70000  |\\n| Sales      | Henry    | 80000  |\\n| Sales      | Sam      | 60000  |\\n+------------+----------+--------+\\nExplanation: \\nIn the IT department:\\n- Max earns the highest unique salary\\n- Both Randy and Joe earn the second-highest unique salary\\n- Will earns the third-highest unique salary\\n\\nIn the Sales department:\\n- Henry earns the highest salary\\n- Sam earns the second-highest salary\\n- There is no third-highest salary as there are only two employees\\n\\n\""
    },
    {
        "URL": "https://leetcode.com/problems/reverse-words-in-a-string-ii",
        "Title": "Reverse Words in a String II ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/repeated-dna-sequences",
        "Title": "Repeated DNA Sequences ",
        "Description": "b'The DNA sequence is composed of a series of nucleotides abbreviated as \\'A\\', \\'C\\', \\'G\\', and \\'T\\'.\\n\\nFor example, \"ACGAATTCCG\" is a DNA sequence.\\n\\nWhen studying DNA, it is useful to identify repeated sequences within the DNA.\\nGiven a string s that represents a DNA sequence, return all the 10-letter-long sequences (substrings) that occur more than once in a DNA molecule. You may return the answer in any order.\\n\\xc2\\xa0\\nExample 1:\\nInput: s = \"AAAAACCCCCAAAAACCCCCCAAAAAGGGTTT\"\\nOutput: [\"AAAAACCCCC\",\"CCCCCAAAAA\"]\\nExample 2:\\nInput: s = \"AAAAAAAAAAAAA\"\\nOutput: [\"AAAAAAAAAA\"]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= s.length <= 105\\ns[i] is either \\'A\\', \\'C\\', \\'G\\', or \\'T\\'.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iv",
        "Title": "Best Time to Buy and Sell Stock IV ",
        "Description": "b'You are given an integer array prices where prices[i] is the price of a given stock on the ith day, and an integer k.\\nFind the maximum profit you can achieve. You may complete at most k transactions.\\nNote: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).\\n\\xc2\\xa0\\nExample 1:\\nInput: k = 2, prices = [2,4,1]\\nOutput: 2\\nExplanation: Buy on day 1 (price = 2) and sell on day 2 (price = 4), profit = 4-2 = 2.\\n\\nExample 2:\\nInput: k = 2, prices = [3,2,6,5,0,3]\\nOutput: 7\\nExplanation: Buy on day 2 (price = 2) and sell on day 3 (price = 6), profit = 6-2 = 4. Then buy on day 5 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n0 <= k <= 100\\n0 <= prices.length <= 1000\\n0 <= prices[i] <= 1000\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/rotate-array",
        "Title": "Rotate Array ",
        "Description": "b'Given an array, rotate the array to the right by k steps, where k is non-negative.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [1,2,3,4,5,6,7], k = 3\\nOutput: [5,6,7,1,2,3,4]\\nExplanation:\\nrotate 1 steps to the right: [7,1,2,3,4,5,6]\\nrotate 2 steps to the right: [6,7,1,2,3,4,5]\\nrotate 3 steps to the right: [5,6,7,1,2,3,4]\\n\\nExample 2:\\nInput: nums = [-1,-100,3,99], k = 2\\nOutput: [3,99,-1,-100]\\nExplanation: \\nrotate 1 steps to the right: [99,-1,-100,3]\\nrotate 2 steps to the right: [3,99,-1,-100]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 105\\n-231 <= nums[i] <= 231 - 1\\n0 <= k <= 105\\n\\n\\xc2\\xa0\\nFollow up:\\n\\nTry to come up with as many solutions as you can. There are at least three different ways to solve this problem.\\nCould you do it in-place with O(1) extra space?\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/reverse-bits",
        "Title": "Reverse Bits ",
        "Description": "b\"Reverse bits of a given 32 bits unsigned integer.\\nNote:\\n\\nNote that in some languages, such as Java, there is no unsigned integer type. In this case, both input and output will be given as a signed integer type. They should not affect your implementation, as the integer's internal binary representation is the same, whether it is signed or unsigned.\\nIn Java, the compiler represents the signed integers using 2's complement notation. Therefore, in Example 2 above, the input represents the signed integer -3 and the output represents the signed integer -1073741825.\\n\\n\\xc2\\xa0\\nExample 1:\\nInput: n = 00000010100101000001111010011100\\nOutput:    964176192 (00111001011110000010100101000000)\\nExplanation: The input binary string 00000010100101000001111010011100 represents the unsigned integer 43261596, so return 964176192 which its binary representation is 00111001011110000010100101000000.\\n\\nExample 2:\\nInput: n = 11111111111111111111111111111101\\nOutput:   3221225471 (10111111111111111111111111111111)\\nExplanation: The input binary string 11111111111111111111111111111101 represents the unsigned integer 4294967293, so return 3221225471 which its binary representation is 10111111111111111111111111111111.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe input must be a binary string of length 32\\n\\n\\xc2\\xa0\\nFollow up: If this function is called many times, how would you optimize it?\\n\""
    },
    {
        "URL": "https://leetcode.com/problems/number-of-1-bits",
        "Title": "Number of 1 Bits ",
        "Description": "b\"Write a function that takes an unsigned integer and returns the number of '1' bits it has (also known as the Hamming weight).\\nNote:\\n\\nNote that in some languages, such as Java, there is no unsigned integer type. In this case, the input will be given as a signed integer type. It should not affect your implementation, as the integer's internal binary representation is the same, whether it is signed or unsigned.\\nIn Java, the compiler represents the signed integers using 2's complement notation. Therefore, in Example 3, the input represents the signed integer. -3.\\n\\n\\xc2\\xa0\\nExample 1:\\nInput: n = 00000000000000000000000000001011\\nOutput: 3\\nExplanation: The input binary string 00000000000000000000000000001011 has a total of three '1' bits.\\n\\nExample 2:\\nInput: n = 00000000000000000000000010000000\\nOutput: 1\\nExplanation: The input binary string 00000000000000000000000010000000 has a total of one '1' bit.\\n\\nExample 3:\\nInput: n = 11111111111111111111111111111101\\nOutput: 31\\nExplanation: The input binary string 11111111111111111111111111111101 has a total of thirty one '1' bits.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe input must be a binary string of length 32.\\n\\n\\xc2\\xa0\\nFollow up: If this function is called many times, how would you optimize it?\""
    },
    {
        "URL": "https://leetcode.com/problems/word-frequency",
        "Title": "Word Frequency ",
        "Description": "b\"Write a bash script to calculate the frequency of each word in a text file words.txt.\\nFor simplicity sake, you may assume:\\n\\nwords.txt contains only lowercase characters and space ' ' characters.\\nEach word must consist of lowercase characters only.\\nWords are separated by one or more whitespace characters.\\n\\nExample:\\nAssume that words.txt has the following content:\\nthe day is sunny the the\\nthe sunny is is\\n\\nYour script should output the following, sorted by descending frequency:\\nthe 4\\nis 3\\nsunny 2\\nday 1\\n\\nNote:\\n\\nDon't worry about handling ties, it is guaranteed that each word's frequency count is unique.\\nCould you write it in one-line using Unix pipes?\\n\\n\""
    },
    {
        "URL": "https://leetcode.com/problems/valid-phone-numbers",
        "Title": "Valid Phone Numbers ",
        "Description": "b'Given a text file file.txt that contains a list of phone numbers (one per line), write a one-liner bash script to print all valid phone numbers.\\nYou may assume that a valid phone number must appear in one of the following two formats: (xxx) xxx-xxxx or xxx-xxx-xxxx. (x means a digit)\\nYou may also assume each line in the text file must not contain leading or trailing white spaces.\\nExample:\\nAssume that file.txt has the following content:\\n987-123-4567\\n123 456 7890\\n(123) 456-7890\\n\\nYour script should output the following valid phone numbers:\\n987-123-4567\\n(123) 456-7890\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/transpose-file",
        "Title": "Transpose File ",
        "Description": "b\"Given a text file file.txt, transpose its content.\\nYou may assume that each row has the same number of columns, and each field is separated by the ' ' character.\\nExample:\\nIf file.txt has the following content:\\nname age\\nalice 21\\nryan 30\\n\\nOutput the following:\\nname alice ryan\\nage 21 30\\n\\n\""
    },
    {
        "URL": "https://leetcode.com/problems/tenth-line",
        "Title": "Tenth Line ",
        "Description": "b\"Given a text file\\xc2\\xa0file.txt, print\\xc2\\xa0just the 10th line of the\\xc2\\xa0file.\\nExample:\\nAssume that file.txt has the following content:\\nLine 1\\nLine 2\\nLine 3\\nLine 4\\nLine 5\\nLine 6\\nLine 7\\nLine 8\\nLine 9\\nLine 10\\n\\nYour script should output the tenth line, which is:\\nLine 10\\n\\nNote:\\n1. If the file contains less than 10 lines, what should you output?\\n2. There's at least three different solutions. Try to explore all possibilities.\\n\""
    },
    {
        "URL": "https://leetcode.com/problems/delete-duplicate-emails",
        "Title": "Delete Duplicate Emails ",
        "Description": "b'SQL SchemaTable: Person\\n+-------------+---------+\\n| Column Name | Type    |\\n+-------------+---------+\\n| id          | int     |\\n| email       | varchar |\\n+-------------+---------+\\nid is the primary key column for this table.\\nEach row of this table contains an email. The emails will not contain uppercase letters.\\n\\n\\xc2\\xa0\\nWrite an SQL query to delete all the duplicate emails, keeping only one unique email with the smallest id. Note that you are supposed to write a DELETE statement and not a SELECT one.\\nAfter running your script, the answer shown is the Person table. The driver will first compile and run your piece of code and then show the Person table. The final order of the Person table does not matter.\\nThe query result format is in the following example.\\n\\xc2\\xa0\\nExample 1:\\nInput: \\nPerson table:\\n+----+------------------+\\n| id | email            |\\n+----+------------------+\\n| 1  | john@example.com |\\n| 2  | bob@example.com  |\\n| 3  | john@example.com |\\n+----+------------------+\\nOutput: \\n+----+------------------+\\n| id | email            |\\n+----+------------------+\\n| 1  | john@example.com |\\n| 2  | bob@example.com  |\\n+----+------------------+\\nExplanation: john@example.com is repeated two times. We keep the row with the smallest Id = 1.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/rising-temperature",
        "Title": "Rising Temperature ",
        "Description": "b\"SQL SchemaTable: Weather\\n+---------------+---------+\\n| Column Name   | Type    |\\n+---------------+---------+\\n| id            | int     |\\n| recordDate    | date    |\\n| temperature   | int     |\\n+---------------+---------+\\nid is the primary key for this table.\\nThis table contains information about the temperature on a certain day.\\n\\n\\xc2\\xa0\\nWrite an SQL query to find all dates' Id with higher temperatures compared to its previous dates (yesterday).\\nReturn the result table in any order.\\nThe query result format is in the following example.\\n\\xc2\\xa0\\nExample 1:\\nInput: \\nWeather table:\\n+----+------------+-------------+\\n| id | recordDate | temperature |\\n+----+------------+-------------+\\n| 1  | 2015-01-01 | 10          |\\n| 2  | 2015-01-02 | 25          |\\n| 3  | 2015-01-03 | 20          |\\n| 4  | 2015-01-04 | 30          |\\n+----+------------+-------------+\\nOutput: \\n+----+\\n| id |\\n+----+\\n| 2  |\\n| 4  |\\n+----+\\nExplanation: \\nIn 2015-01-02, the temperature was higher than the previous day (10 -> 25).\\nIn 2015-01-04, the temperature was higher than the previous day (20 -> 30).\\n\\n\""
    },
    {
        "URL": "https://leetcode.com/problems/house-robber",
        "Title": "House Robber ",
        "Description": "b'You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security systems connected and it will automatically contact the police if two adjacent houses were broken into on the same night.\\nGiven an integer array nums representing the amount of money of each house, return the maximum amount of money you can rob tonight without alerting the police.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [1,2,3,1]\\nOutput: 4\\nExplanation: Rob house 1 (money = 1) and then rob house 3 (money = 3).\\nTotal amount you can rob = 1 + 3 = 4.\\n\\nExample 2:\\nInput: nums = [2,7,9,3,1]\\nOutput: 12\\nExplanation: Rob house 1 (money = 2), rob house 3 (money = 9) and rob house 5 (money = 1).\\nTotal amount you can rob = 2 + 9 + 1 = 12.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 100\\n0 <= nums[i] <= 400\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/binary-tree-right-side-view",
        "Title": "Binary Tree Right Side View ",
        "Description": "b'Given the root of a binary tree, imagine yourself standing on the right side of it, return the values of the nodes you can see ordered from top to bottom.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: root = [1,2,3,null,5,null,4]\\nOutput: [1,3,4]\\n\\nExample 2:\\nInput: root = [1,null,3]\\nOutput: [1,3]\\n\\nExample 3:\\nInput: root = []\\nOutput: []\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of nodes in the tree is in the range [0, 100].\\n-100 <= Node.val <= 100\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/number-of-islands",
        "Title": "Number of Islands ",
        "Description": "b'Given an m x n 2D binary grid grid which represents a map of \\'1\\'s (land) and \\'0\\'s (water), return the number of islands.\\nAn island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.\\n\\xc2\\xa0\\nExample 1:\\nInput: grid = [\\n  [\"1\",\"1\",\"1\",\"1\",\"0\"],\\n  [\"1\",\"1\",\"0\",\"1\",\"0\"],\\n  [\"1\",\"1\",\"0\",\"0\",\"0\"],\\n  [\"0\",\"0\",\"0\",\"0\",\"0\"]\\n]\\nOutput: 1\\n\\nExample 2:\\nInput: grid = [\\n  [\"1\",\"1\",\"0\",\"0\",\"0\"],\\n  [\"1\",\"1\",\"0\",\"0\",\"0\"],\\n  [\"0\",\"0\",\"1\",\"0\",\"0\"],\\n  [\"0\",\"0\",\"0\",\"1\",\"1\"]\\n]\\nOutput: 3\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nm == grid.length\\nn == grid[i].length\\n1 <= m, n <= 300\\ngrid[i][j] is \\'0\\' or \\'1\\'.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/bitwise-and-of-numbers-range",
        "Title": "Bitwise AND of Numbers Range ",
        "Description": "b'Given two integers left and right that represent the range [left, right], return the bitwise AND of all numbers in this range, inclusive.\\n\\xc2\\xa0\\nExample 1:\\nInput: left = 5, right = 7\\nOutput: 4\\n\\nExample 2:\\nInput: left = 0, right = 0\\nOutput: 0\\n\\nExample 3:\\nInput: left = 1, right = 2147483647\\nOutput: 0\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n0 <= left <= right <= 231 - 1\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/happy-number",
        "Title": "Happy Number ",
        "Description": "b'Write an algorithm to determine if a number n is happy.\\nA happy number is a number defined by the following process:\\n\\nStarting with any positive integer, replace the number by the sum of the squares of its digits.\\nRepeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1.\\nThose numbers for which this process ends in 1 are happy.\\n\\nReturn true if n is a happy number, and false if not.\\n\\xc2\\xa0\\nExample 1:\\nInput: n = 19\\nOutput: true\\nExplanation:\\n12 + 92 = 82\\n82 + 22 = 68\\n62 + 82 = 100\\n12 + 02 + 02 = 1\\n\\nExample 2:\\nInput: n = 2\\nOutput: false\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= n <= 231 - 1\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/remove-linked-list-elements",
        "Title": "Remove Linked List Elements ",
        "Description": "b'Given the head of a linked list and an integer val, remove all the nodes of the linked list that has Node.val == val, and return the new head.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: head = [1,2,6,3,4,5,6], val = 6\\nOutput: [1,2,3,4,5]\\n\\nExample 2:\\nInput: head = [], val = 1\\nOutput: []\\n\\nExample 3:\\nInput: head = [7,7,7,7], val = 7\\nOutput: []\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of nodes in the list is in the range [0, 104].\\n1 <= Node.val <= 50\\n0 <= val <= 50\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/count-primes",
        "Title": "Count Primes ",
        "Description": "b'Given an integer n, return the number of prime numbers that are strictly less than n.\\n\\xc2\\xa0\\nExample 1:\\nInput: n = 10\\nOutput: 4\\nExplanation: There are 4 prime numbers less than 10, they are 2, 3, 5, 7.\\n\\nExample 2:\\nInput: n = 0\\nOutput: 0\\n\\nExample 3:\\nInput: n = 1\\nOutput: 0\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n0 <= n <= 5 * 106\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/isomorphic-strings",
        "Title": "Isomorphic Strings ",
        "Description": "b'Given two strings s and t, determine if they are isomorphic.\\nTwo strings s and t are isomorphic if the characters in s can be replaced to get t.\\nAll occurrences of a character must be replaced with another character while preserving the order of characters. No two characters may map to the same character, but a character may map to itself.\\n\\xc2\\xa0\\nExample 1:\\nInput: s = \"egg\", t = \"add\"\\nOutput: true\\nExample 2:\\nInput: s = \"foo\", t = \"bar\"\\nOutput: false\\nExample 3:\\nInput: s = \"paper\", t = \"title\"\\nOutput: true\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= s.length <= 5 * 104\\nt.length == s.length\\ns and t consist of any valid ascii character.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/reverse-linked-list",
        "Title": "Reverse Linked List ",
        "Description": "b'Given the head of a singly linked list, reverse the list, and return the reversed list.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: head = [1,2,3,4,5]\\nOutput: [5,4,3,2,1]\\n\\nExample 2:\\n\\nInput: head = [1,2]\\nOutput: [2,1]\\n\\nExample 3:\\nInput: head = []\\nOutput: []\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of nodes in the list is the range [0, 5000].\\n-5000 <= Node.val <= 5000\\n\\n\\xc2\\xa0\\nFollow up: A linked list can be reversed either iteratively or recursively. Could you implement both?\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/course-schedule",
        "Title": "Course Schedule ",
        "Description": "b'There are a total of numCourses courses you have to take, labeled from 0 to numCourses - 1. You are given an array prerequisites where prerequisites[i] = [ai, bi] indicates that you must take course bi first if you want to take course ai.\\n\\nFor example, the pair [0, 1], indicates that to take course 0 you have to first take course 1.\\n\\nReturn true if you can finish all courses. Otherwise, return false.\\n\\xc2\\xa0\\nExample 1:\\nInput: numCourses = 2, prerequisites = [[1,0]]\\nOutput: true\\nExplanation: There are a total of 2 courses to take. \\nTo take course 1 you should have finished course 0. So it is possible.\\n\\nExample 2:\\nInput: numCourses = 2, prerequisites = [[1,0],[0,1]]\\nOutput: false\\nExplanation: There are a total of 2 courses to take. \\nTo take course 1 you should have finished course 0, and to take course 0 you should also have finished course 1. So it is impossible.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= numCourses <= 2000\\n0 <= prerequisites.length <= 5000\\nprerequisites[i].length == 2\\n0 <= ai, bi < numCourses\\nAll the pairs prerequisites[i] are unique.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/implement-trie-prefix-tree",
        "Title": "Implement Trie (Prefix Tree) ",
        "Description": "b'A trie (pronounced as \"try\") or prefix tree is a tree data structure used to efficiently store and retrieve keys in a dataset of strings. There are various applications of this data structure, such as autocomplete and spellchecker.\\nImplement the Trie class:\\n\\nTrie() Initializes the trie object.\\nvoid insert(String word) Inserts the string word into the trie.\\nboolean search(String word) Returns true if the string word is in the trie (i.e., was inserted before), and false otherwise.\\nboolean startsWith(String prefix) Returns true if there is a previously inserted string word that has the prefix prefix, and false otherwise.\\n\\n\\xc2\\xa0\\nExample 1:\\nInput\\n[\"Trie\", \"insert\", \"search\", \"search\", \"startsWith\", \"insert\", \"search\"]\\n[[], [\"apple\"], [\"apple\"], [\"app\"], [\"app\"], [\"app\"], [\"app\"]]\\nOutput\\n[null, null, true, false, true, null, true]\\n\\nExplanation\\nTrie trie = new Trie();\\ntrie.insert(\"apple\");\\ntrie.search(\"apple\");   // return True\\ntrie.search(\"app\");     // return False\\ntrie.startsWith(\"app\"); // return True\\ntrie.insert(\"app\");\\ntrie.search(\"app\");     // return True\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= word.length, prefix.length <= 2000\\nword and prefix consist only of lowercase English letters.\\nAt most 3 * 104 calls in total will be made to insert, search, and startsWith.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/minimum-size-subarray-sum",
        "Title": "Minimum Size Subarray Sum ",
        "Description": "b'Given an array of positive integers nums and a positive integer target, return the minimal length of a contiguous subarray [numsl, numsl+1, ..., numsr-1, numsr] of which the sum is greater than or equal to target. If there is no such subarray, return 0 instead.\\n\\xc2\\xa0\\nExample 1:\\nInput: target = 7, nums = [2,3,1,2,4,3]\\nOutput: 2\\nExplanation: The subarray [4,3] has the minimal length under the problem constraint.\\n\\nExample 2:\\nInput: target = 4, nums = [1,4,4]\\nOutput: 1\\n\\nExample 3:\\nInput: target = 11, nums = [1,1,1,1,1,1,1,1]\\nOutput: 0\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= target <= 109\\n1 <= nums.length <= 105\\n1 <= nums[i] <= 104\\n\\n\\xc2\\xa0\\nFollow up: If you have figured out the O(n) solution, try coding another solution of which the time complexity is O(n log(n)).'"
    },
    {
        "URL": "https://leetcode.com/problems/course-schedule-ii",
        "Title": "Course Schedule II ",
        "Description": "b'There are a total of numCourses courses you have to take, labeled from 0 to numCourses - 1. You are given an array prerequisites where prerequisites[i] = [ai, bi] indicates that you must take course bi first if you want to take course ai.\\n\\nFor example, the pair [0, 1], indicates that to take course 0 you have to first take course 1.\\n\\nReturn the ordering of courses you should take to finish all courses. If there are many valid answers, return any of them. If it is impossible to finish all courses, return an empty array.\\n\\xc2\\xa0\\nExample 1:\\nInput: numCourses = 2, prerequisites = [[1,0]]\\nOutput: [0,1]\\nExplanation: There are a total of 2 courses to take. To take course 1 you should have finished course 0. So the correct course order is [0,1].\\n\\nExample 2:\\nInput: numCourses = 4, prerequisites = [[1,0],[2,0],[3,1],[3,2]]\\nOutput: [0,2,1,3]\\nExplanation: There are a total of 4 courses to take. To take course 3 you should have finished both courses 1 and 2. Both courses 1 and 2 should be taken after you finished course 0.\\nSo one correct course order is [0,1,2,3]. Another correct ordering is [0,2,1,3].\\n\\nExample 3:\\nInput: numCourses = 1, prerequisites = []\\nOutput: [0]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= numCourses <= 2000\\n0 <= prerequisites.length <= numCourses * (numCourses - 1)\\nprerequisites[i].length == 2\\n0 <= ai, bi < numCourses\\nai != bi\\nAll the pairs [ai, bi] are distinct.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/design-add-and-search-words-data-structure",
        "Title": "Design Add and Search Words Data Structure ",
        "Description": "b'Design a data structure that supports adding new words and finding if a string matches any previously added string.\\nImplement the WordDictionary class:\\n\\nWordDictionary()\\xc2\\xa0Initializes the object.\\nvoid addWord(word) Adds word to the data structure, it can be matched later.\\nbool search(word)\\xc2\\xa0Returns true if there is any string in the data structure that matches word\\xc2\\xa0or false otherwise. word may contain dots \\'.\\' where dots can be matched with any letter.\\n\\n\\xc2\\xa0\\nExample:\\nInput\\n[\"WordDictionary\",\"addWord\",\"addWord\",\"addWord\",\"search\",\"search\",\"search\",\"search\"]\\n[[],[\"bad\"],[\"dad\"],[\"mad\"],[\"pad\"],[\"bad\"],[\".ad\"],[\"b..\"]]\\nOutput\\n[null,null,null,null,false,true,true,true]\\n\\nExplanation\\nWordDictionary wordDictionary = new WordDictionary();\\nwordDictionary.addWord(\"bad\");\\nwordDictionary.addWord(\"dad\");\\nwordDictionary.addWord(\"mad\");\\nwordDictionary.search(\"pad\"); // return False\\nwordDictionary.search(\"bad\"); // return True\\nwordDictionary.search(\".ad\"); // return True\\nwordDictionary.search(\"b..\"); // return True\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= word.length <= 25\\nword in addWord consists of lowercase English letters.\\nword in search consist of \\'.\\' or lowercase English letters.\\nThere will be at most 3 dots in word for search queries.\\nAt most 104 calls will be made to addWord and search.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/word-search-ii",
        "Title": "Word Search II ",
        "Description": "b'Given an m x n board\\xc2\\xa0of characters and a list of strings words, return all words on the board.\\nEach word must be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once in a word.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: board = [[\"o\",\"a\",\"a\",\"n\"],[\"e\",\"t\",\"a\",\"e\"],[\"i\",\"h\",\"k\",\"r\"],[\"i\",\"f\",\"l\",\"v\"]], words = [\"oath\",\"pea\",\"eat\",\"rain\"]\\nOutput: [\"eat\",\"oath\"]\\n\\nExample 2:\\n\\nInput: board = [[\"a\",\"b\"],[\"c\",\"d\"]], words = [\"abcb\"]\\nOutput: []\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nm == board.length\\nn == board[i].length\\n1 <= m, n <= 12\\nboard[i][j] is a lowercase English letter.\\n1 <= words.length <= 3 * 104\\n1 <= words[i].length <= 10\\nwords[i] consists of lowercase English letters.\\nAll the strings of words are unique.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/house-robber-ii",
        "Title": "House Robber II ",
        "Description": "b'You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed. All houses at this place are arranged in a circle. That means the first house is the neighbor of the last one. Meanwhile, adjacent houses have a security system connected, and\\xc2\\xa0it will automatically contact the police if two adjacent houses were broken into on the same night.\\nGiven an integer array nums representing the amount of money of each house, return the maximum amount of money you can rob tonight without alerting the police.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [2,3,2]\\nOutput: 3\\nExplanation: You cannot rob house 1 (money = 2) and then rob house 3 (money = 2), because they are adjacent houses.\\n\\nExample 2:\\nInput: nums = [1,2,3,1]\\nOutput: 4\\nExplanation: Rob house 1 (money = 1) and then rob house 3 (money = 3).\\nTotal amount you can rob = 1 + 3 = 4.\\n\\nExample 3:\\nInput: nums = [1,2,3]\\nOutput: 3\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 100\\n0 <= nums[i] <= 1000\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/shortest-palindrome",
        "Title": "Shortest Palindrome ",
        "Description": "b'You are given a string s. You can convert s to a palindrome by adding characters in front of it.\\nReturn the shortest palindrome you can find by performing this transformation.\\n\\xc2\\xa0\\nExample 1:\\nInput: s = \"aacecaaa\"\\nOutput: \"aaacecaaa\"\\nExample 2:\\nInput: s = \"abcd\"\\nOutput: \"dcbabcd\"\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n0 <= s.length <= 5 * 104\\ns consists of lowercase English letters only.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/kth-largest-element-in-an-array",
        "Title": "Kth Largest Element in an Array ",
        "Description": "b'Given an integer array nums and an integer k, return the kth largest element in the array.\\nNote that it is the kth largest element in the sorted order, not the kth distinct element.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [3,2,1,5,6,4], k = 2\\nOutput: 5\\nExample 2:\\nInput: nums = [3,2,3,1,2,4,5,5,6], k = 4\\nOutput: 4\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= k <= nums.length <= 104\\n-104 <= nums[i] <= 104\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/combination-sum-iii",
        "Title": "Combination Sum III ",
        "Description": "b'Find all valid combinations of k numbers that sum up to n such that the following conditions are true:\\n\\nOnly numbers 1 through 9 are used.\\nEach number is used at most once.\\n\\nReturn a list of all possible valid combinations. The list must not contain the same combination twice, and the combinations may be returned in any order.\\n\\xc2\\xa0\\nExample 1:\\nInput: k = 3, n = 7\\nOutput: [[1,2,4]]\\nExplanation:\\n1 + 2 + 4 = 7\\nThere are no other valid combinations.\\nExample 2:\\nInput: k = 3, n = 9\\nOutput: [[1,2,6],[1,3,5],[2,3,4]]\\nExplanation:\\n1 + 2 + 6 = 9\\n1 + 3 + 5 = 9\\n2 + 3 + 4 = 9\\nThere are no other valid combinations.\\n\\nExample 3:\\nInput: k = 4, n = 1\\nOutput: []\\nExplanation: There are no valid combinations.\\nUsing 4 different numbers in the range [1,9], the smallest sum we can get is 1+2+3+4 = 10 and since 10 > 1, there are no valid combination.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n2 <= k <= 9\\n1 <= n <= 60\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/contains-duplicate",
        "Title": "Contains Duplicate ",
        "Description": "b'Given an integer array nums, return true if any value appears at least twice in the array, and return false if every element is distinct.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [1,2,3,1]\\nOutput: true\\nExample 2:\\nInput: nums = [1,2,3,4]\\nOutput: false\\nExample 3:\\nInput: nums = [1,1,1,3,3,4,3,2,4,2]\\nOutput: true\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 105\\n-109 <= nums[i] <= 109\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/the-skyline-problem",
        "Title": "The Skyline Problem ",
        "Description": "b'A city\\'s skyline is the outer contour of the silhouette formed by all the buildings in that city when viewed from a distance. Given the locations and heights of all the buildings, return the skyline formed by these buildings collectively.\\nThe geometric information of each building is given in the array buildings where buildings[i] = [lefti, righti, heighti]:\\n\\nlefti is the x coordinate of the left edge of the ith building.\\nrighti is the x coordinate of the right edge of the ith building.\\nheighti is the height of the ith building.\\n\\nYou may assume all buildings are perfect rectangles grounded on an absolutely flat surface at height 0.\\nThe skyline should be represented as a list of \"key points\" sorted by their x-coordinate in the form [[x1,y1],[x2,y2],...]. Each key point is the left endpoint of some horizontal segment in the skyline except the last point in the list, which always has a y-coordinate 0 and is used to mark the skyline\\'s termination where the rightmost building ends. Any ground between the leftmost and rightmost buildings should be part of the skyline\\'s contour.\\nNote: There must be no consecutive horizontal lines of equal height in the output skyline. For instance, [...,[2 3],[4 5],[7 5],[11 5],[12 7],...] is not acceptable; the three lines of height 5 should be merged into one in the final output as such: [...,[2 3],[4 5],[12 7],...]\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: buildings = [[2,9,10],[3,7,15],[5,12,12],[15,20,10],[19,24,8]]\\nOutput: [[2,10],[3,15],[7,12],[12,0],[15,10],[20,8],[24,0]]\\nExplanation:\\nFigure A shows the buildings of the input.\\nFigure B shows the skyline formed by those buildings. The red points in figure B represent the key points in the output list.\\n\\nExample 2:\\nInput: buildings = [[0,2,3],[2,5,3]]\\nOutput: [[0,3],[5,0]]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= buildings.length <= 104\\n0 <= lefti < righti <= 231 - 1\\n1 <= heighti <= 231 - 1\\nbuildings is sorted by lefti in\\xc2\\xa0non-decreasing order.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/contains-duplicate-ii",
        "Title": "Contains Duplicate II ",
        "Description": "b'Given an integer array nums and an integer k, return true if there are two distinct indices i and j in the array such that nums[i] == nums[j] and abs(i - j) <= k.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [1,2,3,1], k = 3\\nOutput: true\\n\\nExample 2:\\nInput: nums = [1,0,1,1], k = 1\\nOutput: true\\n\\nExample 3:\\nInput: nums = [1,2,3,1,2,3], k = 2\\nOutput: false\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 105\\n-109 <= nums[i] <= 109\\n0 <= k <= 105\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/contains-duplicate-iii",
        "Title": "Contains Duplicate III ",
        "Description": "b'Given an integer array nums and two integers k and t, return true if there are two distinct indices i and j in the array such that abs(nums[i] - nums[j]) <= t and abs(i - j) <= k.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [1,2,3,1], k = 3, t = 0\\nOutput: true\\nExample 2:\\nInput: nums = [1,0,1,1], k = 1, t = 2\\nOutput: true\\nExample 3:\\nInput: nums = [1,5,9,1,5,9], k = 2, t = 3\\nOutput: false\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 2 * 104\\n-231 <= nums[i] <= 231 - 1\\n0 <= k <= 104\\n0 <= t <= 231 - 1\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/maximal-square",
        "Title": "Maximal Square ",
        "Description": "b'Given an m x n binary matrix filled with 0\\'s and 1\\'s, find the largest square containing only 1\\'s and return its area.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: matrix = [[\"1\",\"0\",\"1\",\"0\",\"0\"],[\"1\",\"0\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"0\",\"0\",\"1\",\"0\"]]\\nOutput: 4\\n\\nExample 2:\\n\\nInput: matrix = [[\"0\",\"1\"],[\"1\",\"0\"]]\\nOutput: 1\\n\\nExample 3:\\nInput: matrix = [[\"0\"]]\\nOutput: 0\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nm == matrix.length\\nn == matrix[i].length\\n1 <= m, n <= 300\\nmatrix[i][j] is \\'0\\' or \\'1\\'.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/count-complete-tree-nodes",
        "Title": "Count Complete Tree Nodes ",
        "Description": "b'Given the root of a complete binary tree, return the number of the nodes in the tree.\\nAccording to Wikipedia, every level, except possibly the last, is completely filled in a complete binary tree, and all nodes in the last level are as far left as possible. It can have between 1 and 2h nodes inclusive at the last level h.\\nDesign an algorithm that runs in less than\\xc2\\xa0O(n)\\xc2\\xa0time complexity.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: root = [1,2,3,4,5,6]\\nOutput: 6\\n\\nExample 2:\\nInput: root = []\\nOutput: 0\\n\\nExample 3:\\nInput: root = [1]\\nOutput: 1\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of nodes in the tree is in the range [0, 5 * 104].\\n0 <= Node.val <= 5 * 104\\nThe tree is guaranteed to be complete.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/rectangle-area",
        "Title": "Rectangle Area ",
        "Description": "b'Given the coordinates of two rectilinear rectangles in a 2D plane, return the total area covered by the two rectangles.\\nThe first rectangle is defined by its bottom-left corner (ax1, ay1) and its top-right corner (ax2, ay2).\\nThe second rectangle is defined by its bottom-left corner (bx1, by1) and its top-right corner (bx2, by2).\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: ax1 = -3, ay1 = 0, ax2 = 3, ay2 = 4, bx1 = 0, by1 = -1, bx2 = 9, by2 = 2\\nOutput: 45\\n\\nExample 2:\\nInput: ax1 = -2, ay1 = -2, ax2 = 2, ay2 = 2, bx1 = -2, by1 = -2, bx2 = 2, by2 = 2\\nOutput: 16\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n-104 <= ax1 <= ax2 <= 104\\n-104 <= ay1 <= ay2 <= 104\\n-104 <= bx1 <= bx2 <= 104\\n-104 <= by1 <= by2 <= 104\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/basic-calculator",
        "Title": "Basic Calculator ",
        "Description": "b'Given a string s representing a valid expression, implement a basic calculator to evaluate it, and return the result of the evaluation.\\nNote: You are not allowed to use any built-in function which evaluates strings as mathematical expressions, such as eval().\\n\\xc2\\xa0\\nExample 1:\\nInput: s = \"1 + 1\"\\nOutput: 2\\n\\nExample 2:\\nInput: s = \" 2-1 + 2 \"\\nOutput: 3\\n\\nExample 3:\\nInput: s = \"(1+(4+5+2)-3)+(6+8)\"\\nOutput: 23\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= s.length <= 3 * 105\\ns consists of digits, \\'+\\', \\'-\\', \\'(\\', \\')\\', and \\' \\'.\\ns represents a valid expression.\\n\\'+\\' is not used as a unary operation (i.e., \"+1\" and \"+(2 + 3)\" is invalid).\\n\\'-\\' could be used as a unary operation (i.e., \"-1\" and \"-(2 + 3)\" is valid).\\nThere will be no two consecutive operators in the input.\\nEvery number and running calculation will fit in a signed 32-bit integer.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/implement-stack-using-queues",
        "Title": "Implement Stack using Queues ",
        "Description": "b'Implement a last-in-first-out (LIFO) stack using only two queues. The implemented stack should support all the functions of a normal stack (push, top, pop, and empty).\\nImplement the MyStack class:\\n\\nvoid push(int x) Pushes element x to the top of the stack.\\nint pop() Removes the element on the top of the stack and returns it.\\nint top() Returns the element on the top of the stack.\\nboolean empty() Returns true if the stack is empty, false otherwise.\\n\\nNotes:\\n\\nYou must use only standard operations of a queue, which means that only push to back, peek/pop from front, size and is empty operations are valid.\\nDepending on your language, the queue may not be supported natively. You may simulate a queue using a list or deque (double-ended queue) as long as you use only a queue\\'s standard operations.\\n\\n\\xc2\\xa0\\nExample 1:\\nInput\\n[\"MyStack\", \"push\", \"push\", \"top\", \"pop\", \"empty\"]\\n[[], [1], [2], [], [], []]\\nOutput\\n[null, null, null, 2, 2, false]\\n\\nExplanation\\nMyStack myStack = new MyStack();\\nmyStack.push(1);\\nmyStack.push(2);\\nmyStack.top(); // return 2\\nmyStack.pop(); // return 2\\nmyStack.empty(); // return False\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= x <= 9\\nAt most 100 calls will be made to push, pop, top, and empty.\\nAll the calls to pop and top are valid.\\n\\n\\xc2\\xa0\\nFollow-up: Can you implement the stack using only one queue?\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/invert-binary-tree",
        "Title": "Invert Binary Tree ",
        "Description": "b'Given the root of a binary tree, invert the tree, and return its root.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: root = [4,2,7,1,3,6,9]\\nOutput: [4,7,2,9,6,3,1]\\n\\nExample 2:\\n\\nInput: root = [2,1,3]\\nOutput: [2,3,1]\\n\\nExample 3:\\nInput: root = []\\nOutput: []\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of nodes in the tree is in the range [0, 100].\\n-100 <= Node.val <= 100\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/basic-calculator-ii",
        "Title": "Basic Calculator II ",
        "Description": "b'Given a string s which represents an expression, evaluate this expression and return its value.\\xc2\\xa0\\nThe integer division should truncate toward zero.\\nYou may assume that the given expression is always valid. All intermediate results will be in the range of [-231, 231 - 1].\\nNote: You are not allowed to use any built-in function which evaluates strings as mathematical expressions, such as eval().\\n\\xc2\\xa0\\nExample 1:\\nInput: s = \"3+2*2\"\\nOutput: 7\\nExample 2:\\nInput: s = \" 3/2 \"\\nOutput: 1\\nExample 3:\\nInput: s = \" 3+5 / 2 \"\\nOutput: 5\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= s.length <= 3 * 105\\ns consists of integers and operators (\\'+\\', \\'-\\', \\'*\\', \\'/\\') separated by some number of spaces.\\ns represents a valid expression.\\nAll the integers in the expression are non-negative integers in the range [0, 231 - 1].\\nThe answer is guaranteed to fit in a 32-bit integer.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/summary-ranges",
        "Title": "Summary Ranges ",
        "Description": "b'You are given a sorted unique integer array nums.\\nA range [a,b] is the set of all integers from a to b (inclusive).\\nReturn the smallest sorted list of ranges that cover all the numbers in the array exactly. That is, each element of nums is covered by exactly one of the ranges, and there is no integer x such that x is in one of the ranges but not in nums.\\nEach range [a,b] in the list should be output as:\\n\\n\"a->b\" if a != b\\n\"a\" if a == b\\n\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [0,1,2,4,5,7]\\nOutput: [\"0->2\",\"4->5\",\"7\"]\\nExplanation: The ranges are:\\n[0,2] --> \"0->2\"\\n[4,5] --> \"4->5\"\\n[7,7] --> \"7\"\\n\\nExample 2:\\nInput: nums = [0,2,3,4,6,8,9]\\nOutput: [\"0\",\"2->4\",\"6\",\"8->9\"]\\nExplanation: The ranges are:\\n[0,0] --> \"0\"\\n[2,4] --> \"2->4\"\\n[6,6] --> \"6\"\\n[8,9] --> \"8->9\"\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n0 <= nums.length <= 20\\n-231 <= nums[i] <= 231 - 1\\nAll the values of nums are unique.\\nnums is sorted in ascending order.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/majority-element-ii",
        "Title": "Majority Element II ",
        "Description": "b'Given an integer array of size n, find all elements that appear more than \\xe2\\x8c\\x8a n/3 \\xe2\\x8c\\x8b times.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [3,2,3]\\nOutput: [3]\\n\\nExample 2:\\nInput: nums = [1]\\nOutput: [1]\\n\\nExample 3:\\nInput: nums = [1,2]\\nOutput: [1,2]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 5 * 104\\n-109 <= nums[i] <= 109\\n\\n\\xc2\\xa0\\nFollow up: Could you solve the problem in linear time and in O(1) space?\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/kth-smallest-element-in-a-bst",
        "Title": "Kth Smallest Element in a BST ",
        "Description": "b'Given the root of a binary search tree, and an integer k, return the kth smallest value (1-indexed) of all the values of the nodes in the tree.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: root = [3,1,4,null,2], k = 1\\nOutput: 1\\n\\nExample 2:\\n\\nInput: root = [5,3,6,2,4,null,null,1], k = 3\\nOutput: 3\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of nodes in the tree is n.\\n1 <= k <= n <= 104\\n0 <= Node.val <= 104\\n\\n\\xc2\\xa0\\nFollow up: If the BST is modified often (i.e., we can do insert and delete operations) and you need to find the kth smallest frequently, how would you optimize?\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/power-of-two",
        "Title": "Power of Two ",
        "Description": "b'Given an integer n, return true if it is a power of two. Otherwise, return false.\\nAn integer n is a power of two, if there exists an integer x such that n == 2x.\\n\\xc2\\xa0\\nExample 1:\\nInput: n = 1\\nOutput: true\\nExplanation: 20 = 1\\n\\nExample 2:\\nInput: n = 16\\nOutput: true\\nExplanation: 24 = 16\\n\\nExample 3:\\nInput: n = 3\\nOutput: false\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n-231 <= n <= 231 - 1\\n\\n\\xc2\\xa0\\nFollow up: Could you solve it without loops/recursion?'"
    },
    {
        "URL": "https://leetcode.com/problems/implement-queue-using-stacks",
        "Title": "Implement Queue using Stacks ",
        "Description": "b'Implement a first in first out (FIFO) queue using only two stacks. The implemented queue should support all the functions of a normal queue (push, peek, pop, and empty).\\nImplement the MyQueue class:\\n\\nvoid push(int x) Pushes element x to the back of the queue.\\nint pop() Removes the element from the front of the queue and returns it.\\nint peek() Returns the element at the front of the queue.\\nboolean empty() Returns true if the queue is empty, false otherwise.\\n\\nNotes:\\n\\nYou must use only standard operations of a stack, which means only push to top, peek/pop from top, size, and is empty operations are valid.\\nDepending on your language, the stack may not be supported natively. You may simulate a stack using a list or deque (double-ended queue) as long as you use only a stack\\'s standard operations.\\n\\n\\xc2\\xa0\\nExample 1:\\nInput\\n[\"MyQueue\", \"push\", \"push\", \"peek\", \"pop\", \"empty\"]\\n[[], [1], [2], [], [], []]\\nOutput\\n[null, null, null, 1, 1, false]\\n\\nExplanation\\nMyQueue myQueue = new MyQueue();\\nmyQueue.push(1); // queue is: [1]\\nmyQueue.push(2); // queue is: [1, 2] (leftmost is front of the queue)\\nmyQueue.peek(); // return 1\\nmyQueue.pop(); // return 1, queue is [2]\\nmyQueue.empty(); // return false\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= x <= 9\\nAt most 100\\xc2\\xa0calls will be made to push, pop, peek, and empty.\\nAll the calls to pop and peek are valid.\\n\\n\\xc2\\xa0\\nFollow-up: Can you implement the queue such that each operation is amortized O(1) time complexity? In other words, performing n operations will take overall O(n) time even if one of those operations may take longer.\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/number-of-digit-one",
        "Title": "Number of Digit One ",
        "Description": "b'Given an integer n, count the total number of digit 1 appearing in all non-negative integers less than or equal to n.\\n\\xc2\\xa0\\nExample 1:\\nInput: n = 13\\nOutput: 6\\n\\nExample 2:\\nInput: n = 0\\nOutput: 0\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n0 <= n <= 109\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/palindrome-linked-list",
        "Title": "Palindrome Linked List ",
        "Description": "b'Given the head of a singly linked list, return true if it is a palindrome.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: head = [1,2,2,1]\\nOutput: true\\n\\nExample 2:\\n\\nInput: head = [1,2]\\nOutput: false\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of nodes in the list is in the range [1, 105].\\n0 <= Node.val <= 9\\n\\n\\xc2\\xa0\\nFollow up: Could you do it in O(n) time and O(1) space?'"
    },
    {
        "URL": "https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-search-tree",
        "Title": "Lowest Common Ancestor of a Binary Search Tree ",
        "Description": "b'Given a binary search tree (BST), find the lowest common ancestor (LCA) of two given nodes in the BST.\\nAccording to the definition of LCA on Wikipedia: \\xe2\\x80\\x9cThe lowest common ancestor is defined between two nodes p and q as the lowest node in T that has both p and q as descendants (where we allow a node to be a descendant of itself).\\xe2\\x80\\x9d\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 8\\nOutput: 6\\nExplanation: The LCA of nodes 2 and 8 is 6.\\n\\nExample 2:\\n\\nInput: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 4\\nOutput: 2\\nExplanation: The LCA of nodes 2 and 4 is 2, since a node can be a descendant of itself according to the LCA definition.\\n\\nExample 3:\\nInput: root = [2,1], p = 2, q = 1\\nOutput: 2\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of nodes in the tree is in the range [2, 105].\\n-109 <= Node.val <= 109\\nAll Node.val are unique.\\np != q\\np and q will exist in the BST.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-tree",
        "Title": "Lowest Common Ancestor of a Binary Tree ",
        "Description": "b'Given a binary tree, find the lowest common ancestor (LCA) of two given nodes in the tree.\\nAccording to the definition of LCA on Wikipedia: \\xe2\\x80\\x9cThe lowest common ancestor is defined between two nodes p and q as the lowest node in T that has both p and q as descendants (where we allow a node to be a descendant of itself).\\xe2\\x80\\x9d\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1\\nOutput: 3\\nExplanation: The LCA of nodes 5 and 1 is 3.\\n\\nExample 2:\\n\\nInput: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4\\nOutput: 5\\nExplanation: The LCA of nodes 5 and 4 is 5, since a node can be a descendant of itself according to the LCA definition.\\n\\nExample 3:\\nInput: root = [1,2], p = 1, q = 2\\nOutput: 1\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of nodes in the tree is in the range [2, 105].\\n-109 <= Node.val <= 109\\nAll Node.val are unique.\\np != q\\np and q will exist in the tree.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/delete-node-in-a-linked-list",
        "Title": "Delete Node in a Linked List ",
        "Description": "b'Write a function to delete a node in a singly-linked list. You will not be given access to the head of the list, instead you will be given access to the node to be deleted directly.\\nIt is guaranteed that the node to be deleted is not a tail node in the list.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: head = [4,5,1,9], node = 5\\nOutput: [4,1,9]\\nExplanation: You are given the second node with value 5, the linked list should become 4 -> 1 -> 9 after calling your function.\\n\\nExample 2:\\n\\nInput: head = [4,5,1,9], node = 1\\nOutput: [4,5,9]\\nExplanation: You are given the third node with value 1, the linked list should become 4 -> 5 -> 9 after calling your function.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of the nodes in the given list is in the range [2, 1000].\\n-1000 <= Node.val <= 1000\\nThe value of each node in the list is unique.\\nThe node to be deleted is in the list and is not a tail node\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/product-of-array-except-self",
        "Title": "Product of Array Except Self ",
        "Description": "b'Given an integer array nums, return an array answer such that answer[i] is equal to the product of all the elements of nums except nums[i].\\nThe product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.\\nYou must write an algorithm that runs in\\xc2\\xa0O(n)\\xc2\\xa0time and without using the division operation.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [1,2,3,4]\\nOutput: [24,12,8,6]\\nExample 2:\\nInput: nums = [-1,1,0,-3,3]\\nOutput: [0,0,9,0,0]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n2 <= nums.length <= 105\\n-30 <= nums[i] <= 30\\nThe product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.\\n\\n\\xc2\\xa0\\nFollow up:\\xc2\\xa0Can you solve the problem in O(1)\\xc2\\xa0extra\\xc2\\xa0space complexity? (The output array does not count as extra space for space complexity analysis.)\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/sliding-window-maximum",
        "Title": "Sliding Window Maximum ",
        "Description": "b'You are given an array of integers\\xc2\\xa0nums, there is a sliding window of size k which is moving from the very left of the array to the very right. You can only see the k numbers in the window. Each time the sliding window moves right by one position.\\nReturn the max sliding window.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [1,3,-1,-3,5,3,6,7], k = 3\\nOutput: [3,3,5,5,6,7]\\nExplanation: \\nWindow position                Max\\n---------------               -----\\n[1  3  -1] -3  5  3  6  7       3\\n 1 [3  -1  -3] 5  3  6  7       3\\n 1  3 [-1  -3  5] 3  6  7       5\\n 1  3  -1 [-3  5  3] 6  7       5\\n 1  3  -1  -3 [5  3  6] 7       6\\n 1  3  -1  -3  5 [3  6  7]      7\\n\\nExample 2:\\nInput: nums = [1], k = 1\\nOutput: [1]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 105\\n-104 <= nums[i] <= 104\\n1 <= k <= nums.length\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/search-a-2d-matrix-ii",
        "Title": "Search a 2D Matrix II ",
        "Description": "b'Write an efficient algorithm that searches for a value target in an m x n integer matrix matrix. This matrix has the following properties:\\n\\nIntegers in each row are sorted in ascending from left to right.\\nIntegers in each column are sorted in ascending from top to bottom.\\n\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: matrix = [[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,21,23,26,30]], target = 5\\nOutput: true\\n\\nExample 2:\\n\\nInput: matrix = [[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,21,23,26,30]], target = 20\\nOutput: false\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nm == matrix.length\\nn == matrix[i].length\\n1 <= n, m <= 300\\n-109 <= matrix[i][j] <= 109\\nAll the integers in each row are sorted in ascending order.\\nAll the integers in each column are sorted in ascending order.\\n-109 <= target <= 109\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/different-ways-to-add-parentheses",
        "Title": "Different Ways to Add Parentheses ",
        "Description": "b'Given a string expression of numbers and operators, return all possible results from computing all the different possible ways to group numbers and operators. You may return the answer in any order.\\nThe test cases are generated such that the output values fit in a 32-bit integer and the number of different results does not exceed 104.\\n\\xc2\\xa0\\nExample 1:\\nInput: expression = \"2-1-1\"\\nOutput: [0,2]\\nExplanation:\\n((2-1)-1) = 0 \\n(2-(1-1)) = 2\\n\\nExample 2:\\nInput: expression = \"2*3-4*5\"\\nOutput: [-34,-14,-10,-10,10]\\nExplanation:\\n(2*(3-(4*5))) = -34 \\n((2*3)-(4*5)) = -14 \\n((2*(3-4))*5) = -10 \\n(2*((3-4)*5)) = -10 \\n(((2*3)-4)*5) = 10\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= expression.length <= 20\\nexpression consists of digits and the operator \\'+\\', \\'-\\', and \\'*\\'.\\nAll the integer values in the input expression are in the range [0, 99].\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/valid-anagram",
        "Title": "Valid Anagram ",
        "Description": "b'Given two strings s and t, return true if t is an anagram of s, and false otherwise.\\nAn Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.\\n\\xc2\\xa0\\nExample 1:\\nInput: s = \"anagram\", t = \"nagaram\"\\nOutput: true\\nExample 2:\\nInput: s = \"rat\", t = \"car\"\\nOutput: false\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= s.length, t.length <= 5 * 104\\ns and t consist of lowercase English letters.\\n\\n\\xc2\\xa0\\nFollow up: What if the inputs contain Unicode characters? How would you adapt your solution to such a case?\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/shortest-word-distance",
        "Title": "Shortest Word Distance ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/shortest-word-distance-ii",
        "Title": "Shortest Word Distance II ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/shortest-word-distance-iii",
        "Title": "Shortest Word Distance III ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/strobogrammatic-number",
        "Title": "Strobogrammatic Number ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/strobogrammatic-number-ii",
        "Title": "Strobogrammatic Number II ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/strobogrammatic-number-iii",
        "Title": "Strobogrammatic Number III ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/group-shifted-strings",
        "Title": "Group Shifted Strings ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/count-univalue-subtrees",
        "Title": "Count Univalue Subtrees ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/flatten-2d-vector",
        "Title": "Flatten 2D Vector ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/meeting-rooms",
        "Title": "Meeting Rooms ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/meeting-rooms-ii",
        "Title": "Meeting Rooms II ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/factor-combinations",
        "Title": "Factor Combinations ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/verify-preorder-sequence-in-binary-search-tree",
        "Title": "Verify Preorder Sequence in Binary Search Tree ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/paint-house",
        "Title": "Paint House ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/binary-tree-paths",
        "Title": "Binary Tree Paths ",
        "Description": "b'Given the root of a binary tree, return all root-to-leaf paths in any order.\\nA leaf is a node with no children.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: root = [1,2,3,null,5]\\nOutput: [\"1->2->5\",\"1->3\"]\\n\\nExample 2:\\nInput: root = [1]\\nOutput: [\"1\"]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of nodes in the tree is in the range [1, 100].\\n-100 <= Node.val <= 100\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/add-digits",
        "Title": "Add Digits ",
        "Description": "b'Given an integer num, repeatedly add all its digits until the result has only one digit, and return it.\\n\\xc2\\xa0\\nExample 1:\\nInput: num = 38\\nOutput: 2\\nExplanation: The process is\\n38 --> 3 + 8 --> 11\\n11 --> 1 + 1 --> 2 \\nSince 2 has only one digit, return it.\\n\\nExample 2:\\nInput: num = 0\\nOutput: 0\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n0 <= num <= 231 - 1\\n\\n\\xc2\\xa0\\nFollow up: Could you do it without any loop/recursion in O(1) runtime?\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/3sum-smaller",
        "Title": "3Sum Smaller ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/single-number-iii",
        "Title": "Single Number III ",
        "Description": "b'Given an integer array nums, in which exactly two elements appear only once and all the other elements appear exactly twice. Find the two elements that appear only once. You can return the answer in any order.\\nYou must write an\\xc2\\xa0algorithm that runs in linear runtime complexity and uses\\xc2\\xa0only constant extra space.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [1,2,1,3,2,5]\\nOutput: [3,5]\\nExplanation:  [5, 3] is also a valid answer.\\n\\nExample 2:\\nInput: nums = [-1,0]\\nOutput: [-1,0]\\n\\nExample 3:\\nInput: nums = [0,1]\\nOutput: [1,0]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n2 <= nums.length <= 3 * 104\\n-231 <= nums[i] <= 231 - 1\\nEach integer in nums will appear twice, only two integers will appear once.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/graph-valid-tree",
        "Title": "Graph Valid Tree ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/trips-and-users",
        "Title": "Trips and Users ",
        "Description": "b'SQL SchemaTable: Trips\\n+-------------+----------+\\n| Column Name | Type     |\\n+-------------+----------+\\n| id          | int      |\\n| client_id   | int      |\\n| driver_id   | int      |\\n| city_id     | int      |\\n| status      | enum     |\\n| request_at  | date     |     \\n+-------------+----------+\\nid is the primary key for this table.\\nThe table holds all taxi trips. Each trip has a unique id, while client_id and driver_id are foreign keys to the users_id at the Users table.\\nStatus is an ENUM type of (\\'completed\\', \\'cancelled_by_driver\\', \\'cancelled_by_client\\').\\n\\n\\xc2\\xa0\\nTable: Users\\n+-------------+----------+\\n| Column Name | Type     |\\n+-------------+----------+\\n| users_id    | int      |\\n| banned      | enum     |\\n| role        | enum     |\\n+-------------+----------+\\nusers_id is the primary key for this table.\\nThe table holds all users. Each user has a unique users_id, and role is an ENUM type of (\\'client\\', \\'driver\\', \\'partner\\').\\nbanned is an ENUM type of (\\'Yes\\', \\'No\\').\\n\\n\\xc2\\xa0\\nThe cancellation rate is computed by dividing the number of canceled (by client or driver) requests with unbanned users by the total number of requests with unbanned users on that day.\\nWrite a SQL query to find the cancellation rate of requests with unbanned users (both client and driver must not be banned) each day between \"2013-10-01\" and \"2013-10-03\". Round Cancellation Rate to two decimal points.\\nReturn the result table in any order.\\nThe query result format is in the following example.\\n\\xc2\\xa0\\nExample 1:\\nInput: \\nTrips table:\\n+----+-----------+-----------+---------+---------------------+------------+\\n| id | client_id | driver_id | city_id | status              | request_at |\\n+----+-----------+-----------+---------+---------------------+------------+\\n| 1  | 1         | 10        | 1       | completed           | 2013-10-01 |\\n| 2  | 2         | 11        | 1       | cancelled_by_driver | 2013-10-01 |\\n| 3  | 3         | 12        | 6       | completed           | 2013-10-01 |\\n| 4  | 4         | 13        | 6       | cancelled_by_client | 2013-10-01 |\\n| 5  | 1         | 10        | 1       | completed           | 2013-10-02 |\\n| 6  | 2         | 11        | 6       | completed           | 2013-10-02 |\\n| 7  | 3         | 12        | 6       | completed           | 2013-10-02 |\\n| 8  | 2         | 12        | 12      | completed           | 2013-10-03 |\\n| 9  | 3         | 10        | 12      | completed           | 2013-10-03 |\\n| 10 | 4         | 13        | 12      | cancelled_by_driver | 2013-10-03 |\\n+----+-----------+-----------+---------+---------------------+------------+\\nUsers table:\\n+----------+--------+--------+\\n| users_id | banned | role   |\\n+----------+--------+--------+\\n| 1        | No     | client |\\n| 2        | Yes    | client |\\n| 3        | No     | client |\\n| 4        | No     | client |\\n| 10       | No     | driver |\\n| 11       | No     | driver |\\n| 12       | No     | driver |\\n| 13       | No     | driver |\\n+----------+--------+--------+\\nOutput: \\n+------------+-------------------+\\n| Day        | Cancellation Rate |\\n+------------+-------------------+\\n| 2013-10-01 | 0.33              |\\n| 2013-10-02 | 0.00              |\\n| 2013-10-03 | 0.50              |\\n+------------+-------------------+\\nExplanation: \\nOn 2013-10-01:\\n  - There were 4 requests in total, 2 of which were canceled.\\n  - However, the request with Id=2 was made by a banned client (User_Id=2), so it is ignored in the calculation.\\n  - Hence there are 3 unbanned requests in total, 1 of which was canceled.\\n  - The Cancellation Rate is (1 / 3) = 0.33\\nOn 2013-10-02:\\n  - There were 3 requests in total, 0 of which were canceled.\\n  - The request with Id=6 was made by a banned client, so it is ignored.\\n  - Hence there are 2 unbanned requests in total, 0 of which were canceled.\\n  - The Cancellation Rate is (0 / 2) = 0.00\\nOn 2013-10-03:\\n  - There were 3 requests in total, 1 of which was canceled.\\n  - The request with Id=8 was made by a banned client, so it is ignored.\\n  - Hence there are 2 unbanned request in total, 1 of which were canceled.\\n  - The Cancellation Rate is (1 / 2) = 0.50\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/ugly-number",
        "Title": "Ugly Number ",
        "Description": "b'An ugly number is a positive integer whose prime factors are limited to 2, 3, and 5.\\nGiven an integer n, return true if n is an ugly number.\\n\\xc2\\xa0\\nExample 1:\\nInput: n = 6\\nOutput: true\\nExplanation: 6 = 2 \\xc3\\x97 3\\n\\nExample 2:\\nInput: n = 1\\nOutput: true\\nExplanation: 1 has no prime factors, therefore all of its prime factors are limited to 2, 3, and 5.\\n\\nExample 3:\\nInput: n = 14\\nOutput: false\\nExplanation: 14 is not ugly since it includes the prime factor 7.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n-231 <= n <= 231 - 1\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/ugly-number-ii",
        "Title": "Ugly Number II ",
        "Description": "b'An ugly number is a positive integer whose prime factors are limited to 2, 3, and 5.\\nGiven an integer n, return the nth ugly number.\\n\\xc2\\xa0\\nExample 1:\\nInput: n = 10\\nOutput: 12\\nExplanation: [1, 2, 3, 4, 5, 6, 8, 9, 10, 12] is the sequence of the first 10 ugly numbers.\\n\\nExample 2:\\nInput: n = 1\\nOutput: 1\\nExplanation: 1 has no prime factors, therefore all of its prime factors are limited to 2, 3, and 5.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= n <= 1690\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/paint-house-ii",
        "Title": "Paint House II ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/palindrome-permutation",
        "Title": "Palindrome Permutation ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/palindrome-permutation-ii",
        "Title": "Palindrome Permutation II ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/missing-number",
        "Title": "Missing Number ",
        "Description": "b'Given an array nums containing n distinct numbers in the range [0, n], return the only number in the range that is missing from the array.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [3,0,1]\\nOutput: 2\\nExplanation: n = 3 since there are 3 numbers, so all numbers are in the range [0,3]. 2 is the missing number in the range since it does not appear in nums.\\n\\nExample 2:\\nInput: nums = [0,1]\\nOutput: 2\\nExplanation: n = 2 since there are 2 numbers, so all numbers are in the range [0,2]. 2 is the missing number in the range since it does not appear in nums.\\n\\nExample 3:\\nInput: nums = [9,6,4,2,3,5,7,0,1]\\nOutput: 8\\nExplanation: n = 9 since there are 9 numbers, so all numbers are in the range [0,9]. 8 is the missing number in the range since it does not appear in nums.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nn == nums.length\\n1 <= n <= 104\\n0 <= nums[i] <= n\\nAll the numbers of nums are unique.\\n\\n\\xc2\\xa0\\nFollow up: Could you implement a solution using only O(1) extra space complexity and O(n) runtime complexity?\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/alien-dictionary",
        "Title": "Alien Dictionary ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/closest-binary-search-tree-value",
        "Title": "Closest Binary Search Tree Value ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/encode-and-decode-strings",
        "Title": "Encode and Decode Strings ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/closest-binary-search-tree-value-ii",
        "Title": "Closest Binary Search Tree Value II ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/integer-to-english-words",
        "Title": "Integer to English Words ",
        "Description": "b'Convert a non-negative integer num to its English words representation.\\n\\xc2\\xa0\\nExample 1:\\nInput: num = 123\\nOutput: \"One Hundred Twenty Three\"\\n\\nExample 2:\\nInput: num = 12345\\nOutput: \"Twelve Thousand Three Hundred Forty Five\"\\n\\nExample 3:\\nInput: num = 1234567\\nOutput: \"One Million Two Hundred Thirty Four Thousand Five Hundred Sixty Seven\"\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n0 <= num <= 231 - 1\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/h-index",
        "Title": "H-Index ",
        "Description": "b\"Given an array of integers citations where citations[i] is the number of citations a researcher received for their ith paper, return compute the researcher's h-index.\\nAccording to the definition of h-index on Wikipedia: A scientist has an index h if h of their n papers have at least h citations each, and the other n \\xe2\\x88\\x92 h papers have no more than h citations each.\\nIf there are several possible values for h, the maximum one is taken as the h-index.\\n\\xc2\\xa0\\nExample 1:\\nInput: citations = [3,0,6,1,5]\\nOutput: 3\\nExplanation: [3,0,6,1,5] means the researcher has 5 papers in total and each of them had received 3, 0, 6, 1, 5 citations respectively.\\nSince the researcher has 3 papers with at least 3 citations each and the remaining two with no more than 3 citations each, their h-index is 3.\\n\\nExample 2:\\nInput: citations = [1,3,1]\\nOutput: 1\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nn == citations.length\\n1 <= n <= 5000\\n0 <= citations[i] <= 1000\\n\\n\""
    },
    {
        "URL": "https://leetcode.com/problems/h-index-ii",
        "Title": "H-Index II ",
        "Description": "b\"Given an array of integers citations where citations[i] is the number of citations a researcher received for their ith paper and citations\\xc2\\xa0is sorted in an ascending order, return compute the researcher's h-index.\\nAccording to the definition of h-index on Wikipedia: A scientist has an index h if h of their n papers have at least h citations each, and the other n \\xe2\\x88\\x92 h papers have no more than h citations each.\\nIf there are several possible values for h, the maximum one is taken as the h-index.\\nYou must write an algorithm that runs in logarithmic time.\\n\\xc2\\xa0\\nExample 1:\\nInput: citations = [0,1,3,5,6]\\nOutput: 3\\nExplanation: [0,1,3,5,6] means the researcher has 5 papers in total and each of them had received 0, 1, 3, 5, 6 citations respectively.\\nSince the researcher has 3 papers with at least 3 citations each and the remaining two with no more than 3 citations each, their h-index is 3.\\n\\nExample 2:\\nInput: citations = [1,2,100]\\nOutput: 2\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nn == citations.length\\n1 <= n <= 105\\n0 <= citations[i] <= 1000\\ncitations is sorted in ascending order.\\n\\n\""
    },
    {
        "URL": "https://leetcode.com/problems/paint-fence",
        "Title": "Paint Fence ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/find-the-celebrity",
        "Title": "Find the Celebrity ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/first-bad-version",
        "Title": "First Bad Version ",
        "Description": "b'You are a product manager and currently leading a team to develop a new product. Unfortunately, the latest version of your product fails the quality check. Since each version is developed based on the previous version, all the versions after a bad version are also bad.\\nSuppose you have n versions [1, 2, ..., n] and you want to find out the first bad one, which causes all the following ones to be bad.\\nYou are given an API bool isBadVersion(version) which returns whether version is bad. Implement a function to find the first bad version. You should minimize the number of calls to the API.\\n\\xc2\\xa0\\nExample 1:\\nInput: n = 5, bad = 4\\nOutput: 4\\nExplanation:\\ncall isBadVersion(3) -> false\\ncall isBadVersion(5)\\xc2\\xa0-> true\\ncall isBadVersion(4)\\xc2\\xa0-> true\\nThen 4 is the first bad version.\\n\\nExample 2:\\nInput: n = 1, bad = 1\\nOutput: 1\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= bad <= n <= 231 - 1\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/perfect-squares",
        "Title": "Perfect Squares ",
        "Description": "b'Given an integer n, return the least number of perfect square numbers that sum to n.\\nA perfect square is an integer that is the square of an integer; in other words, it is the product of some integer with itself. For example, 1, 4, 9, and 16 are perfect squares while 3 and 11 are not.\\n\\xc2\\xa0\\nExample 1:\\nInput: n = 12\\nOutput: 3\\nExplanation: 12 = 4 + 4 + 4.\\n\\nExample 2:\\nInput: n = 13\\nOutput: 2\\nExplanation: 13 = 4 + 9.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= n <= 104\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/wiggle-sort",
        "Title": "Wiggle Sort ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/zigzag-iterator",
        "Title": "Zigzag Iterator ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/expression-add-operators",
        "Title": "Expression Add Operators ",
        "Description": "b'Given a string num that contains only digits and an integer target, return all possibilities to insert the binary operators \\'+\\', \\'-\\', and/or \\'*\\' between the digits of num so that the resultant expression evaluates to the target value.\\nNote that operands in the returned expressions should not contain leading zeros.\\n\\xc2\\xa0\\nExample 1:\\nInput: num = \"123\", target = 6\\nOutput: [\"1*2*3\",\"1+2+3\"]\\nExplanation: Both \"1*2*3\" and \"1+2+3\" evaluate to 6.\\n\\nExample 2:\\nInput: num = \"232\", target = 8\\nOutput: [\"2*3+2\",\"2+3*2\"]\\nExplanation: Both \"2*3+2\" and \"2+3*2\" evaluate to 8.\\n\\nExample 3:\\nInput: num = \"3456237490\", target = 9191\\nOutput: []\\nExplanation: There are no expressions that can be created from \"3456237490\" to evaluate to 9191.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= num.length <= 10\\nnum consists of only digits.\\n-231 <= target <= 231 - 1\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/move-zeroes",
        "Title": "Move Zeroes ",
        "Description": "b\"Given an integer array nums, move all 0's to the end of it while maintaining the relative order of the non-zero elements.\\nNote that you must do this in-place without making a copy of the array.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [0,1,0,3,12]\\nOutput: [1,3,12,0,0]\\nExample 2:\\nInput: nums = [0]\\nOutput: [0]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 104\\n-231 <= nums[i] <= 231 - 1\\n\\n\\xc2\\xa0\\nFollow up: Could you minimize the total number of operations done?\""
    },
    {
        "URL": "https://leetcode.com/problems/peeking-iterator",
        "Title": "Peeking Iterator ",
        "Description": "b'Design an iterator that supports the peek operation on an existing iterator in addition to the hasNext and the next operations.\\nImplement the PeekingIterator class:\\n\\nPeekingIterator(Iterator<int> nums) Initializes the object with the given integer iterator iterator.\\nint next() Returns the next element in the array and moves the pointer to the next element.\\nboolean hasNext() Returns true if there are still elements in the array.\\nint peek() Returns the next element in the array without moving the pointer.\\n\\nNote: Each language may have a different implementation of the constructor and Iterator, but they all support the int next() and boolean hasNext() functions.\\n\\xc2\\xa0\\nExample 1:\\nInput\\n[\"PeekingIterator\", \"next\", \"peek\", \"next\", \"next\", \"hasNext\"]\\n[[[1, 2, 3]], [], [], [], [], []]\\nOutput\\n[null, 1, 2, 2, 3, false]\\n\\nExplanation\\nPeekingIterator peekingIterator = new PeekingIterator([1, 2, 3]); // [1,2,3]\\npeekingIterator.next();    // return 1, the pointer moves to the next element [1,2,3].\\npeekingIterator.peek();    // return 2, the pointer does not move [1,2,3].\\npeekingIterator.next();    // return 2, the pointer moves to the next element [1,2,3]\\npeekingIterator.next();    // return 3, the pointer moves to the next element [1,2,3]\\npeekingIterator.hasNext(); // return False\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 1000\\n1 <= nums[i] <= 1000\\nAll the calls to next and peek are valid.\\nAt most 1000 calls will be made to next, hasNext, and peek.\\n\\n\\xc2\\xa0\\nFollow up: How would you extend your design to be generic and work with all types, not just integer?'"
    },
    {
        "URL": "https://leetcode.com/problems/inorder-successor-in-bst",
        "Title": "Inorder Successor in BST ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/walls-and-gates",
        "Title": "Walls and Gates ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/find-the-duplicate-number",
        "Title": "Find the Duplicate Number ",
        "Description": "b'Given an array of integers nums containing\\xc2\\xa0n + 1 integers where each integer is in the range [1, n] inclusive.\\nThere is only one repeated number in nums, return this\\xc2\\xa0repeated\\xc2\\xa0number.\\nYou must solve the problem without modifying the array nums\\xc2\\xa0and uses only constant extra space.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [1,3,4,2,2]\\nOutput: 2\\n\\nExample 2:\\nInput: nums = [3,1,3,4,2]\\nOutput: 3\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= n <= 105\\nnums.length == n + 1\\n1 <= nums[i] <= n\\nAll the integers in nums appear only once except for precisely one integer which appears two or more times.\\n\\n\\xc2\\xa0\\nFollow up:\\n\\nHow can we prove that at least one duplicate number must exist in nums?\\nCan you solve the problem in linear runtime complexity?\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/unique-word-abbreviation",
        "Title": "Unique Word Abbreviation ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/game-of-life",
        "Title": "Game of Life ",
        "Description": "b'According to\\xc2\\xa0Wikipedia\\'s article: \"The Game of Life, also known simply as Life, is a cellular automaton devised by the British mathematician John Horton Conway in 1970.\"\\nThe board is made up of an m x n grid of cells, where each cell has an initial state: live (represented by a 1) or dead (represented by a 0). Each cell interacts with its eight neighbors (horizontal, vertical, diagonal) using the following four rules (taken from the above Wikipedia article):\\n\\nAny live cell with fewer than two live neighbors dies as if caused by under-population.\\nAny live cell with two or three live neighbors lives on to the next generation.\\nAny live cell with more than three live neighbors dies, as if by over-population.\\nAny dead cell with exactly three live neighbors becomes a live cell, as if by reproduction.\\n\\nThe next state is created by applying the above rules simultaneously to every cell in the current state, where births and deaths occur simultaneously. Given the current state of the m x n grid board, return the next state.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: board = [[0,1,0],[0,0,1],[1,1,1],[0,0,0]]\\nOutput: [[0,0,0],[1,0,1],[0,1,1],[0,1,0]]\\n\\nExample 2:\\n\\nInput: board = [[1,1],[1,0]]\\nOutput: [[1,1],[1,1]]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nm == board.length\\nn == board[i].length\\n1 <= m, n <= 25\\nboard[i][j] is 0 or 1.\\n\\n\\xc2\\xa0\\nFollow up:\\n\\nCould you solve it in-place? Remember that the board needs to be updated simultaneously: You cannot update some cells first and then use their updated values to update other cells.\\nIn this question, we represent the board using a 2D array. In principle, the board is infinite, which would cause problems when the active area encroaches upon the border of the array (i.e., live cells reach the border). How would you address these problems?\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/word-pattern",
        "Title": "Word Pattern ",
        "Description": "b'Given a pattern and a string s, find if s\\xc2\\xa0follows the same pattern.\\nHere follow means a full match, such that there is a bijection between a letter in pattern and a non-empty word in s.\\n\\xc2\\xa0\\nExample 1:\\nInput: pattern = \"abba\", s = \"dog cat cat dog\"\\nOutput: true\\n\\nExample 2:\\nInput: pattern = \"abba\", s = \"dog cat cat fish\"\\nOutput: false\\n\\nExample 3:\\nInput: pattern = \"aaaa\", s = \"dog cat cat dog\"\\nOutput: false\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= pattern.length <= 300\\npattern contains only lower-case English letters.\\n1 <= s.length <= 3000\\ns contains only lowercase English letters and spaces \\' \\'.\\ns does not contain any leading or trailing spaces.\\nAll the words in s are separated by a single space.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/word-pattern-ii",
        "Title": "Word Pattern II ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/nim-game",
        "Title": "Nim Game ",
        "Description": "b'You are playing the following Nim Game with your friend:\\n\\nInitially, there is a heap of stones on the table.\\nYou and your friend will alternate taking turns, and you go first.\\nOn each turn, the person whose turn it is will remove 1 to 3 stones from the heap.\\nThe one who removes the last stone is the winner.\\n\\nGiven n, the number of stones in the heap, return true if you can win the game assuming both you and your friend play optimally, otherwise return false.\\n\\xc2\\xa0\\nExample 1:\\nInput: n = 4\\nOutput: false\\nExplanation: These are the possible outcomes:\\n1. You remove 1 stone. Your friend removes 3 stones, including the last stone. Your friend wins.\\n2. You remove 2 stones. Your friend removes 2 stones, including the last stone. Your friend wins.\\n3. You remove 3 stones. Your friend removes the last stone. Your friend wins.\\nIn all outcomes, your friend wins.\\n\\nExample 2:\\nInput: n = 1\\nOutput: true\\n\\nExample 3:\\nInput: n = 2\\nOutput: true\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= n <= 231 - 1\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/flip-game",
        "Title": "Flip Game ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/flip-game-ii",
        "Title": "Flip Game II ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/find-median-from-data-stream",
        "Title": "Find Median from Data Stream ",
        "Description": "b'The median is the middle value in an ordered integer list. If the size of the list is even, there is no middle value and the median is the mean of the two middle values.\\n\\nFor example, for arr = [2,3,4], the median is 3.\\nFor example, for arr = [2,3], the median is (2 + 3) / 2 = 2.5.\\n\\nImplement the MedianFinder class:\\n\\nMedianFinder() initializes the MedianFinder object.\\nvoid addNum(int num) adds the integer num from the data stream to the data structure.\\ndouble findMedian() returns the median of all elements so far. Answers within 10-5 of the actual answer will be accepted.\\n\\n\\xc2\\xa0\\nExample 1:\\nInput\\n[\"MedianFinder\", \"addNum\", \"addNum\", \"findMedian\", \"addNum\", \"findMedian\"]\\n[[], [1], [2], [], [3], []]\\nOutput\\n[null, null, null, 1.5, null, 2.0]\\n\\nExplanation\\nMedianFinder medianFinder = new MedianFinder();\\nmedianFinder.addNum(1);    // arr = [1]\\nmedianFinder.addNum(2);    // arr = [1, 2]\\nmedianFinder.findMedian(); // return 1.5 (i.e., (1 + 2) / 2)\\nmedianFinder.addNum(3);    // arr[1, 2, 3]\\nmedianFinder.findMedian(); // return 2.0\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n-105 <= num <= 105\\nThere will be at least one element in the data structure before calling findMedian.\\nAt most 5 * 104 calls will be made to addNum and findMedian.\\n\\n\\xc2\\xa0\\nFollow up:\\n\\nIf all integer numbers from the stream are in the range [0, 100], how would you optimize your solution?\\nIf 99% of all integer numbers from the stream are in the range [0, 100], how would you optimize your solution?\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/best-meeting-point",
        "Title": "Best Meeting Point ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/serialize-and-deserialize-binary-tree",
        "Title": "Serialize and Deserialize Binary Tree ",
        "Description": "b'Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.\\nDesign an algorithm to serialize and deserialize a binary tree. There is no restriction on how your serialization/deserialization algorithm should work. You just need to ensure that a binary tree can be serialized to a string and this string can be deserialized to the original tree structure.\\nClarification: The input/output format is the same as how LeetCode serializes a binary tree. You do not necessarily need to follow this format, so please be creative and come up with different approaches yourself.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: root = [1,2,3,null,null,4,5]\\nOutput: [1,2,3,null,null,4,5]\\n\\nExample 2:\\nInput: root = []\\nOutput: []\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of nodes in the tree is in the range [0, 104].\\n-1000 <= Node.val <= 1000\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/binary-tree-longest-consecutive-sequence",
        "Title": "Binary Tree Longest Consecutive Sequence ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/bulls-and-cows",
        "Title": "Bulls and Cows ",
        "Description": "b'You are playing the Bulls and Cows game with your friend.\\nYou write down a secret number and ask your friend to guess what the number is. When your friend makes a guess, you provide a hint with the following info:\\n\\nThe number of \"bulls\", which are digits in the guess that are in the correct position.\\nThe number of \"cows\", which are digits in the guess that are in your secret number but are located in the wrong position. Specifically, the non-bull digits in the guess that could be rearranged such that they become bulls.\\n\\nGiven the secret number secret and your friend\\'s guess guess, return the hint for your friend\\'s guess.\\nThe hint should be formatted as \"xAyB\", where x is the number of bulls and y is the number of cows. Note that both secret and guess may contain duplicate digits.\\n\\xc2\\xa0\\nExample 1:\\nInput: secret = \"1807\", guess = \"7810\"\\nOutput: \"1A3B\"\\nExplanation: Bulls are connected with a \\'|\\' and cows are underlined:\\n\"1807\"\\n  |\\n\"7810\"\\nExample 2:\\nInput: secret = \"1123\", guess = \"0111\"\\nOutput: \"1A1B\"\\nExplanation: Bulls are connected with a \\'|\\' and cows are underlined:\\n\"1123\"        \"1123\"\\n  |      or     |\\n\"0111\"        \"0111\"\\nNote that only one of the two unmatched 1s is counted as a cow since the non-bull digits can only be rearranged to allow one 1 to be a bull.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= secret.length, guess.length <= 1000\\nsecret.length == guess.length\\nsecret and guess consist of digits only.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/longest-increasing-subsequence",
        "Title": "Longest Increasing Subsequence ",
        "Description": "b'Given an integer array nums, return the length of the longest strictly increasing subsequence.\\nA subsequence is a sequence that can be derived from an array by deleting some or no elements without changing the order of the remaining elements. For example, [3,6,2,7] is a subsequence of the array [0,3,1,6,2,2,7].\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [10,9,2,5,3,7,101,18]\\nOutput: 4\\nExplanation: The longest increasing subsequence is [2,3,7,101], therefore the length is 4.\\n\\nExample 2:\\nInput: nums = [0,1,0,3,2,3]\\nOutput: 4\\n\\nExample 3:\\nInput: nums = [7,7,7,7,7,7,7]\\nOutput: 1\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 2500\\n-104 <= nums[i] <= 104\\n\\n\\xc2\\xa0\\nFollow up:\\xc2\\xa0Can you come up with an algorithm that runs in\\xc2\\xa0O(n log(n)) time complexity?\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/remove-invalid-parentheses",
        "Title": "Remove Invalid Parentheses ",
        "Description": "b'Given a string s that contains parentheses and letters, remove the minimum number of invalid parentheses to make the input string valid.\\nReturn all the possible results. You may return the answer in any order.\\n\\xc2\\xa0\\nExample 1:\\nInput: s = \"()())()\"\\nOutput: [\"(())()\",\"()()()\"]\\n\\nExample 2:\\nInput: s = \"(a)())()\"\\nOutput: [\"(a())()\",\"(a)()()\"]\\n\\nExample 3:\\nInput: s = \")(\"\\nOutput: [\"\"]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= s.length <= 25\\ns consists of lowercase English letters and parentheses \\'(\\' and \\')\\'.\\nThere will be at most 20 parentheses in s.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/smallest-rectangle-enclosing-black-pixels",
        "Title": "Smallest Rectangle Enclosing Black Pixels ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/range-sum-query-immutable",
        "Title": "Range Sum Query - Immutable ",
        "Description": "b'Given an integer array nums, handle multiple queries of the following type:\\n\\nCalculate the sum of the elements of nums between indices left and right inclusive where left <= right.\\n\\nImplement the NumArray class:\\n\\nNumArray(int[] nums) Initializes the object with the integer array nums.\\nint sumRange(int left, int right) Returns the sum of the elements of nums between indices left and right inclusive (i.e. nums[left] + nums[left + 1] + ... + nums[right]).\\n\\n\\xc2\\xa0\\nExample 1:\\nInput\\n[\"NumArray\", \"sumRange\", \"sumRange\", \"sumRange\"]\\n[[[-2, 0, 3, -5, 2, -1]], [0, 2], [2, 5], [0, 5]]\\nOutput\\n[null, 1, -1, -3]\\n\\nExplanation\\nNumArray numArray = new NumArray([-2, 0, 3, -5, 2, -1]);\\nnumArray.sumRange(0, 2); // return (-2) + 0 + 3 = 1\\nnumArray.sumRange(2, 5); // return 3 + (-5) + 2 + (-1) = -1\\nnumArray.sumRange(0, 5); // return (-2) + 0 + 3 + (-5) + 2 + (-1) = -3\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 104\\n-105 <= nums[i] <= 105\\n0 <= left <= right < nums.length\\nAt most 104 calls will be made to sumRange.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/range-sum-query-2d-immutable",
        "Title": "Range Sum Query 2D - Immutable ",
        "Description": "b'Given a 2D matrix matrix, handle multiple queries of the following type:\\n\\nCalculate the sum of the elements of matrix inside the rectangle defined by its upper left corner (row1, col1) and lower right corner (row2, col2).\\n\\nImplement the NumMatrix class:\\n\\nNumMatrix(int[][] matrix) Initializes the object with the integer matrix matrix.\\nint sumRegion(int row1, int col1, int row2, int col2) Returns the sum of the elements of matrix inside the rectangle defined by its upper left corner (row1, col1) and lower right corner (row2, col2).\\n\\n\\xc2\\xa0\\nExample 1:\\n\\nInput\\n[\"NumMatrix\", \"sumRegion\", \"sumRegion\", \"sumRegion\"]\\n[[[[3, 0, 1, 4, 2], [5, 6, 3, 2, 1], [1, 2, 0, 1, 5], [4, 1, 0, 1, 7], [1, 0, 3, 0, 5]]], [2, 1, 4, 3], [1, 1, 2, 2], [1, 2, 2, 4]]\\nOutput\\n[null, 8, 11, 12]\\n\\nExplanation\\nNumMatrix numMatrix = new NumMatrix([[3, 0, 1, 4, 2], [5, 6, 3, 2, 1], [1, 2, 0, 1, 5], [4, 1, 0, 1, 7], [1, 0, 3, 0, 5]]);\\nnumMatrix.sumRegion(2, 1, 4, 3); // return 8 (i.e sum of the red rectangle)\\nnumMatrix.sumRegion(1, 1, 2, 2); // return 11 (i.e sum of the green rectangle)\\nnumMatrix.sumRegion(1, 2, 2, 4); // return 12 (i.e sum of the blue rectangle)\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nm == matrix.length\\nn == matrix[i].length\\n1 <= m, n <= 200\\n-104 <= matrix[i][j] <= 104\\n0 <= row1 <= row2 < m\\n0 <= col1 <= col2 < n\\nAt most 104 calls will be made to sumRegion.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/number-of-islands-ii",
        "Title": "Number of Islands II ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/additive-number",
        "Title": "Additive Number ",
        "Description": "b'An additive number is a string whose digits can form an additive sequence.\\nA valid additive sequence should contain at least three numbers. Except for the first two numbers, each subsequent number in the sequence must be the sum of the preceding two.\\nGiven a string containing only digits, return true if it is an additive number or false otherwise.\\nNote: Numbers in the additive sequence cannot have leading zeros, so sequence 1, 2, 03 or 1, 02, 3 is invalid.\\n\\xc2\\xa0\\nExample 1:\\nInput: \"112358\"\\nOutput: true\\nExplanation: \\nThe digits can form an additive sequence: 1, 1, 2, 3, 5, 8. \\n1 + 1 = 2, 1 + 2 = 3, 2 + 3 = 5, 3 + 5 = 8\\n\\nExample 2:\\nInput: \"199100199\"\\nOutput: true\\nExplanation: \\nThe additive sequence is: 1, 99, 100, 199.\\xc2\\xa0\\n1 + 99 = 100, 99 + 100 = 199\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= num.length <= 35\\nnum consists only of digits.\\n\\n\\xc2\\xa0\\nFollow up: How would you handle overflow for very large input integers?\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/range-sum-query-mutable",
        "Title": "Range Sum Query - Mutable ",
        "Description": "b'Given an integer array nums, handle multiple queries of the following types:\\n\\nUpdate the value of an element in nums.\\nCalculate the sum of the elements of nums between indices left and right inclusive where left <= right.\\n\\nImplement the NumArray class:\\n\\nNumArray(int[] nums) Initializes the object with the integer array nums.\\nvoid update(int index, int val) Updates the value of nums[index] to be val.\\nint sumRange(int left, int right) Returns the sum of the elements of nums between indices left and right inclusive (i.e. nums[left] + nums[left + 1] + ... + nums[right]).\\n\\n\\xc2\\xa0\\nExample 1:\\nInput\\n[\"NumArray\", \"sumRange\", \"update\", \"sumRange\"]\\n[[[1, 3, 5]], [0, 2], [1, 2], [0, 2]]\\nOutput\\n[null, 9, null, 8]\\n\\nExplanation\\nNumArray numArray = new NumArray([1, 3, 5]);\\nnumArray.sumRange(0, 2); // return 1 + 3 + 5 = 9\\nnumArray.update(1, 2);   // nums = [1, 2, 5]\\nnumArray.sumRange(0, 2); // return 1 + 2 + 5 = 8\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 3 * 104\\n-100 <= nums[i] <= 100\\n0 <= index < nums.length\\n-100 <= val <= 100\\n0 <= left <= right < nums.length\\nAt most 3 * 104 calls will be made to update and sumRange.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/range-sum-query-2d-mutable",
        "Title": "Range Sum Query 2D - Mutable ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-cooldown",
        "Title": "Best Time to Buy and Sell Stock with Cooldown ",
        "Description": "b'You are given an array prices where prices[i] is the price of a given stock on the ith day.\\nFind the maximum profit you can achieve. You may complete as many transactions as you like (i.e., buy one and sell one share of the stock multiple times) with the following restrictions:\\n\\nAfter you sell your stock, you cannot buy stock on the next day (i.e., cooldown one day).\\n\\nNote: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).\\n\\xc2\\xa0\\nExample 1:\\nInput: prices = [1,2,3,0,2]\\nOutput: 3\\nExplanation: transactions = [buy, sell, cooldown, buy, sell]\\n\\nExample 2:\\nInput: prices = [1]\\nOutput: 0\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= prices.length <= 5000\\n0 <= prices[i] <= 1000\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/minimum-height-trees",
        "Title": "Minimum Height Trees ",
        "Description": "b\"A tree is an undirected graph in which any two vertices are connected by\\xc2\\xa0exactly\\xc2\\xa0one path. In other words, any connected graph without simple cycles is a tree.\\nGiven a tree of n nodes\\xc2\\xa0labelled from 0 to n - 1, and an array of\\xc2\\xa0n - 1\\xc2\\xa0edges where edges[i] = [ai, bi] indicates that there is an undirected edge between the two nodes\\xc2\\xa0ai and\\xc2\\xa0bi in the tree,\\xc2\\xa0you can choose any node of the tree as the root. When you select a node x as the root, the result tree has height h. Among all possible rooted trees, those with minimum height (i.e. min(h))\\xc2\\xa0 are called minimum height trees (MHTs).\\nReturn a list of all MHTs' root labels.\\xc2\\xa0You can return the answer in any order.\\nThe height of a rooted tree is the number of edges on the longest downward path between the root and a leaf.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: n = 4, edges = [[1,0],[1,2],[1,3]]\\nOutput: [1]\\nExplanation: As shown, the height of the tree is 1 when the root is the node with label 1 which is the only MHT.\\n\\nExample 2:\\n\\nInput: n = 6, edges = [[3,0],[3,1],[3,2],[3,4],[5,4]]\\nOutput: [3,4]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= n <= 2 * 104\\nedges.length == n - 1\\n0 <= ai, bi < n\\nai != bi\\nAll the pairs (ai, bi) are distinct.\\nThe given input is guaranteed to be a tree and there will be no repeated edges.\\n\\n\""
    },
    {
        "URL": "https://leetcode.com/problems/sparse-matrix-multiplication",
        "Title": "Sparse Matrix Multiplication ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/burst-balloons",
        "Title": "Burst Balloons ",
        "Description": "b'You are given n balloons, indexed from 0 to n - 1. Each balloon is painted with a number on it represented by an array nums. You are asked to burst all the balloons.\\nIf you burst the ith balloon, you will get nums[i - 1] * nums[i] * nums[i + 1] coins. If i - 1 or i + 1 goes out of bounds of the array, then treat it as if there is a balloon with a 1 painted on it.\\nReturn the maximum coins you can collect by bursting the balloons wisely.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [3,1,5,8]\\nOutput: 167\\nExplanation:\\nnums = [3,1,5,8] --> [3,5,8] --> [3,8] --> [8] --> []\\ncoins =  3*1*5    +   3*5*8   +  1*3*8  + 1*8*1 = 167\\nExample 2:\\nInput: nums = [1,5]\\nOutput: 10\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nn == nums.length\\n1 <= n <= 300\\n0 <= nums[i] <= 100\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/super-ugly-number",
        "Title": "Super Ugly Number ",
        "Description": "b'A super ugly number is a positive integer whose prime factors are in the array primes.\\nGiven an integer n and an array of integers primes, return the nth super ugly number.\\nThe nth super ugly number is guaranteed to fit in a 32-bit signed integer.\\n\\xc2\\xa0\\nExample 1:\\nInput: n = 12, primes = [2,7,13,19]\\nOutput: 32\\nExplanation: [1,2,4,7,8,13,14,16,19,26,28,32] is the sequence of the first 12 super ugly numbers given primes = [2,7,13,19].\\n\\nExample 2:\\nInput: n = 1, primes = [2,3,5]\\nOutput: 1\\nExplanation: 1 has no prime factors, therefore all of its prime factors are in the array primes = [2,3,5].\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= n <= 105\\n1 <= primes.length <= 100\\n2 <= primes[i] <= 1000\\nprimes[i] is guaranteed to be a prime number.\\nAll the values of primes are unique and sorted in ascending order.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/binary-tree-vertical-order-traversal",
        "Title": "Binary Tree Vertical Order Traversal ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/count-of-smaller-numbers-after-self",
        "Title": "Count of Smaller Numbers After Self ",
        "Description": "b'You are given an integer array nums and you have to return a new counts array. The counts array has the property where counts[i] is the number of smaller elements to the right of nums[i].\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [5,2,6,1]\\nOutput: [2,1,1,0]\\nExplanation:\\nTo the right of 5 there are 2 smaller elements (2 and 1).\\nTo the right of 2 there is only 1 smaller element (1).\\nTo the right of 6 there is 1 smaller element (1).\\nTo the right of 1 there is 0 smaller element.\\n\\nExample 2:\\nInput: nums = [-1]\\nOutput: [0]\\n\\nExample 3:\\nInput: nums = [-1,-1]\\nOutput: [0,0]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 105\\n-104 <= nums[i] <= 104\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/remove-duplicate-letters",
        "Title": "Remove Duplicate Letters ",
        "Description": "b'Given a string s, remove duplicate letters so that every letter appears once and only once. You must make sure your result is the smallest in lexicographical order among all possible results.\\n\\xc2\\xa0\\nExample 1:\\nInput: s = \"bcabc\"\\nOutput: \"abc\"\\n\\nExample 2:\\nInput: s = \"cbacdcbc\"\\nOutput: \"acdb\"\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= s.length <= 104\\ns consists of lowercase English letters.\\n\\n\\xc2\\xa0\\nNote: This question is the same as 1081: https://leetcode.com/problems/smallest-subsequence-of-distinct-characters/\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/shortest-distance-from-all-buildings",
        "Title": "Shortest Distance from All Buildings ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/maximum-product-of-word-lengths",
        "Title": "Maximum Product of Word Lengths ",
        "Description": "b'Given a string array words, return the maximum value of length(word[i]) * length(word[j]) where the two words do not share common letters. If no such two words exist, return 0.\\n\\xc2\\xa0\\nExample 1:\\nInput: words = [\"abcw\",\"baz\",\"foo\",\"bar\",\"xtfn\",\"abcdef\"]\\nOutput: 16\\nExplanation: The two words can be \"abcw\", \"xtfn\".\\n\\nExample 2:\\nInput: words = [\"a\",\"ab\",\"abc\",\"d\",\"cd\",\"bcd\",\"abcd\"]\\nOutput: 4\\nExplanation: The two words can be \"ab\", \"cd\".\\n\\nExample 3:\\nInput: words = [\"a\",\"aa\",\"aaa\",\"aaaa\"]\\nOutput: 0\\nExplanation: No such pair of words.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n2 <= words.length <= 1000\\n1 <= words[i].length <= 1000\\nwords[i] consists only of lowercase English letters.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/bulb-switcher",
        "Title": "Bulb Switcher ",
        "Description": "b\"There are n bulbs that are initially off. You first turn on all the bulbs, then\\xc2\\xa0you turn off every second bulb.\\nOn the third round, you toggle every third bulb (turning on if it's off or turning off if it's on). For the ith round, you toggle every i bulb. For the nth round, you only toggle the last bulb.\\nReturn the number of bulbs that are on after n rounds.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: n = 3\\nOutput: 1\\nExplanation: At first, the three bulbs are [off, off, off].\\nAfter the first round, the three bulbs are [on, on, on].\\nAfter the second round, the three bulbs are [on, off, on].\\nAfter the third round, the three bulbs are [on, off, off]. \\nSo you should return 1 because there is only one bulb is on.\\nExample 2:\\nInput: n = 0\\nOutput: 0\\n\\nExample 3:\\nInput: n = 1\\nOutput: 1\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n0 <= n <= 109\\n\\n\""
    },
    {
        "URL": "https://leetcode.com/problems/generalized-abbreviation",
        "Title": "Generalized Abbreviation ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/create-maximum-number",
        "Title": "Create Maximum Number ",
        "Description": "b'You are given two integer arrays nums1 and nums2 of lengths m and n respectively. nums1 and nums2 represent the digits of two numbers. You are also given an integer k.\\nCreate the maximum number of length k <= m + n from digits of the two numbers. The relative order of the digits from the same array must be preserved.\\nReturn an array of the k digits representing the answer.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums1 = [3,4,6,5], nums2 = [9,1,2,5,8,3], k = 5\\nOutput: [9,8,6,5,3]\\n\\nExample 2:\\nInput: nums1 = [6,7], nums2 = [6,0,4], k = 5\\nOutput: [6,7,6,0,4]\\n\\nExample 3:\\nInput: nums1 = [3,9], nums2 = [8,9], k = 3\\nOutput: [9,8,9]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nm == nums1.length\\nn == nums2.length\\n1 <= m, n <= 500\\n0 <= nums1[i], nums2[i] <= 9\\n1 <= k <= m + n\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/coin-change",
        "Title": "Coin Change ",
        "Description": "b'You are given an integer array coins representing coins of different denominations and an integer amount representing a total amount of money.\\nReturn the fewest number of coins that you need to make up that amount. If that amount of money cannot be made up by any combination of the coins, return -1.\\nYou may assume that you have an infinite number of each kind of coin.\\n\\xc2\\xa0\\nExample 1:\\nInput: coins = [1,2,5], amount = 11\\nOutput: 3\\nExplanation: 11 = 5 + 5 + 1\\n\\nExample 2:\\nInput: coins = [2], amount = 3\\nOutput: -1\\n\\nExample 3:\\nInput: coins = [1], amount = 0\\nOutput: 0\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= coins.length <= 12\\n1 <= coins[i] <= 231 - 1\\n0 <= amount <= 104\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/number-of-connected-components-in-an-undirected-graph",
        "Title": "Number of Connected Components in an Undirected Graph ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/wiggle-sort-ii",
        "Title": "Wiggle Sort II ",
        "Description": "b'Given an integer array nums, reorder it such that nums[0] < nums[1] > nums[2] < nums[3]....\\nYou may assume the input array always has a valid answer.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [1,5,1,1,6,4]\\nOutput: [1,6,1,5,1,4]\\nExplanation: [1,4,1,5,1,6] is also accepted.\\n\\nExample 2:\\nInput: nums = [1,3,2,2,3,1]\\nOutput: [2,3,1,3,1,2]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 5 * 104\\n0 <= nums[i] <= 5000\\nIt is guaranteed that there will be an answer for the given input nums.\\n\\n\\xc2\\xa0\\nFollow Up: Can you do it in O(n) time and/or in-place with O(1) extra space?'"
    },
    {
        "URL": "https://leetcode.com/problems/maximum-size-subarray-sum-equals-k",
        "Title": "Maximum Size Subarray Sum Equals k ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/power-of-three",
        "Title": "Power of Three ",
        "Description": "b'Given an integer n, return true if it is a power of three. Otherwise, return false.\\nAn integer n is a power of three, if there exists an integer x such that n == 3x.\\n\\xc2\\xa0\\nExample 1:\\nInput: n = 27\\nOutput: true\\n\\nExample 2:\\nInput: n = 0\\nOutput: false\\n\\nExample 3:\\nInput: n = 9\\nOutput: true\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n-231 <= n <= 231 - 1\\n\\n\\xc2\\xa0\\nFollow up: Could you solve it without loops/recursion?'"
    },
    {
        "URL": "https://leetcode.com/problems/count-of-range-sum",
        "Title": "Count of Range Sum ",
        "Description": "b'Given an integer array nums and two integers lower and upper, return the number of range sums that lie in [lower, upper] inclusive.\\nRange sum S(i, j) is defined as the sum of the elements in nums between indices i and j inclusive, where i <= j.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [-2,5,-1], lower = -2, upper = 2\\nOutput: 3\\nExplanation: The three ranges are: [0,0], [2,2], and [0,2] and their respective sums are: -2, -1, 2.\\n\\nExample 2:\\nInput: nums = [0], lower = 0, upper = 0\\nOutput: 1\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 105\\n-231 <= nums[i] <= 231 - 1\\n-105 <= lower <= upper <= 105\\nThe answer is guaranteed to fit in a 32-bit integer.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/odd-even-linked-list",
        "Title": "Odd Even Linked List ",
        "Description": "b'Given the head of a singly linked list, group all the nodes with odd indices together followed by the nodes with even indices, and return the reordered list.\\nThe first node is considered odd, and the second node is even, and so on.\\nNote that the relative order inside both the even and odd groups should remain as it was in the input.\\nYou must solve the problem\\xc2\\xa0in O(1)\\xc2\\xa0extra space complexity and O(n) time complexity.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: head = [1,2,3,4,5]\\nOutput: [1,3,5,2,4]\\n\\nExample 2:\\n\\nInput: head = [2,1,3,5,6,4,7]\\nOutput: [2,3,6,7,1,5,4]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of nodes in the linked list is in the range [0, 104].\\n-106 <= Node.val <= 106\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/longest-increasing-path-in-a-matrix",
        "Title": "Longest Increasing Path in a Matrix ",
        "Description": "b'Given an m x n integers matrix, return the length of the longest increasing path in matrix.\\nFrom each cell, you can either move in four directions: left, right, up, or down. You may not move diagonally or move outside the boundary (i.e., wrap-around is not allowed).\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: matrix = [[9,9,4],[6,6,8],[2,1,1]]\\nOutput: 4\\nExplanation: The longest increasing path is [1, 2, 6, 9].\\n\\nExample 2:\\n\\nInput: matrix = [[3,4,5],[3,2,6],[2,2,1]]\\nOutput: 4\\nExplanation: The longest increasing path is [3, 4, 5, 6]. Moving diagonally is not allowed.\\n\\nExample 3:\\nInput: matrix = [[1]]\\nOutput: 1\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nm == matrix.length\\nn == matrix[i].length\\n1 <= m, n <= 200\\n0 <= matrix[i][j] <= 231 - 1\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/patching-array",
        "Title": "Patching Array ",
        "Description": "b'Given a sorted integer array nums and an integer n, add/patch elements to the array such that any number in the range [1, n] inclusive can be formed by the sum of some elements in the array.\\nReturn the minimum number of patches required.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [1,3], n = 6\\nOutput: 1\\nExplanation:\\nCombinations of nums are [1], [3], [1,3], which form possible sums of: 1, 3, 4.\\nNow if we add/patch 2 to nums, the combinations are: [1], [2], [3], [1,3], [2,3], [1,2,3].\\nPossible sums are 1, 2, 3, 4, 5, 6, which now covers the range [1, 6].\\nSo we only need 1 patch.\\n\\nExample 2:\\nInput: nums = [1,5,10], n = 20\\nOutput: 2\\nExplanation: The two patches can be [2, 4].\\n\\nExample 3:\\nInput: nums = [1,2,2], n = 5\\nOutput: 0\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 1000\\n1 <= nums[i] <= 104\\nnums is sorted in ascending order.\\n1 <= n <= 231 - 1\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/verify-preorder-serialization-of-a-binary-tree",
        "Title": "Verify Preorder Serialization of a Binary Tree ",
        "Description": "b'One way to serialize a binary tree is to use preorder traversal. When we encounter a non-null node, we record the node\\'s value. If it is a null node, we record using a sentinel value such as \\'#\\'.\\n\\nFor example, the above binary tree can be serialized to the string \"9,3,4,#,#,1,#,#,2,#,6,#,#\", where \\'#\\' represents a null node.\\nGiven a string of comma-separated values preorder, return true if it is a correct preorder traversal serialization of a binary tree.\\nIt is guaranteed that each comma-separated value in the string must be either an integer or a character \\'#\\' representing null pointer.\\nYou may assume that the input format is always valid.\\n\\nFor example, it could never contain two consecutive commas, such as \"1,,3\".\\n\\nNote:\\xc2\\xa0You are not allowed to reconstruct the tree.\\n\\xc2\\xa0\\nExample 1:\\nInput: preorder = \"9,3,4,#,#,1,#,#,2,#,6,#,#\"\\nOutput: true\\nExample 2:\\nInput: preorder = \"1,#\"\\nOutput: false\\nExample 3:\\nInput: preorder = \"9,#,#,1\"\\nOutput: false\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= preorder.length <= 104\\npreorder consist of integers in the range [0, 100] and \\'#\\' separated by commas \\',\\'.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/reconstruct-itinerary",
        "Title": "Reconstruct Itinerary ",
        "Description": "b'You are given a list of airline tickets where tickets[i] = [fromi, toi] represent the departure and the arrival airports of one flight. Reconstruct the itinerary in order and return it.\\nAll of the tickets belong to a man who departs from \"JFK\", thus, the itinerary must begin with \"JFK\". If there are multiple valid itineraries, you should return the itinerary that has the smallest lexical order when read as a single string.\\n\\nFor example, the itinerary [\"JFK\", \"LGA\"] has a smaller lexical order than [\"JFK\", \"LGB\"].\\n\\nYou may assume all tickets form at least one valid itinerary. You must use all the tickets once and only once.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: tickets = [[\"MUC\",\"LHR\"],[\"JFK\",\"MUC\"],[\"SFO\",\"SJC\"],[\"LHR\",\"SFO\"]]\\nOutput: [\"JFK\",\"MUC\",\"LHR\",\"SFO\",\"SJC\"]\\n\\nExample 2:\\n\\nInput: tickets = [[\"JFK\",\"SFO\"],[\"JFK\",\"ATL\"],[\"SFO\",\"ATL\"],[\"ATL\",\"JFK\"],[\"ATL\",\"SFO\"]]\\nOutput: [\"JFK\",\"ATL\",\"JFK\",\"SFO\",\"ATL\",\"SFO\"]\\nExplanation: Another possible reconstruction is [\"JFK\",\"SFO\",\"ATL\",\"JFK\",\"ATL\",\"SFO\"] but it is larger in lexical order.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= tickets.length <= 300\\ntickets[i].length == 2\\nfromi.length == 3\\ntoi.length == 3\\nfromi and toi consist of uppercase English letters.\\nfromi != toi\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/largest-bst-subtree",
        "Title": "Largest BST Subtree ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/increasing-triplet-subsequence",
        "Title": "Increasing Triplet Subsequence ",
        "Description": "b'Given an integer array nums, return true if there exists a triple of indices (i, j, k) such that i < j < k and nums[i] < nums[j] < nums[k]. If no such indices exists, return false.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [1,2,3,4,5]\\nOutput: true\\nExplanation: Any triplet where i < j < k is valid.\\n\\nExample 2:\\nInput: nums = [5,4,3,2,1]\\nOutput: false\\nExplanation: No triplet exists.\\n\\nExample 3:\\nInput: nums = [2,1,5,0,4,6]\\nOutput: true\\nExplanation: The triplet (3, 4, 5) is valid because nums[3] == 0 < nums[4] == 4 < nums[5] == 6.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 5 * 105\\n-231 <= nums[i] <= 231 - 1\\n\\n\\xc2\\xa0\\nFollow up: Could you implement a solution that runs in O(n) time complexity and O(1) space complexity?'"
    },
    {
        "URL": "https://leetcode.com/problems/self-crossing",
        "Title": "Self Crossing ",
        "Description": "b'You are given an array of integers distance.\\nYou start at point (0,0) on an X-Y plane and you move distance[0] meters to the north, then distance[1] meters to the west, distance[2] meters to the south, distance[3] meters to the east, and so on. In other words, after each move, your direction changes counter-clockwise.\\nReturn true if your path crosses itself, and false if it does not.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: distance = [2,1,1,2]\\nOutput: true\\n\\nExample 2:\\n\\nInput: distance = [1,2,3,4]\\nOutput: false\\n\\nExample 3:\\n\\nInput: distance = [1,1,1,1]\\nOutput: true\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <=\\xc2\\xa0distance.length <= 105\\n1 <=\\xc2\\xa0distance[i] <= 105\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/palindrome-pairs",
        "Title": "Palindrome Pairs ",
        "Description": "b'Given a list of unique words, return all the pairs of the\\xc2\\xa0distinct indices (i, j) in the given list, so that the concatenation of the two words\\xc2\\xa0words[i] + words[j] is a palindrome.\\n\\xc2\\xa0\\nExample 1:\\nInput: words = [\"abcd\",\"dcba\",\"lls\",\"s\",\"sssll\"]\\nOutput: [[0,1],[1,0],[3,2],[2,4]]\\nExplanation: The palindromes are [\"dcbaabcd\",\"abcddcba\",\"slls\",\"llssssll\"]\\n\\nExample 2:\\nInput: words = [\"bat\",\"tab\",\"cat\"]\\nOutput: [[0,1],[1,0]]\\nExplanation: The palindromes are [\"battab\",\"tabbat\"]\\n\\nExample 3:\\nInput: words = [\"a\",\"\"]\\nOutput: [[0,1],[1,0]]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= words.length <= 5000\\n0 <= words[i].length <= 300\\nwords[i] consists of lower-case English letters.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/house-robber-iii",
        "Title": "House Robber III ",
        "Description": "b'The thief has found himself a new place for his thievery again. There is only one entrance to this area, called root.\\nBesides the root, each house has one and only one parent house. After a tour, the smart thief realized that all houses in this place form a binary tree. It will automatically contact the police if two directly-linked houses were broken into on the same night.\\nGiven the root of the binary tree, return the maximum amount of money the thief can rob without alerting the police.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: root = [3,2,3,null,3,null,1]\\nOutput: 7\\nExplanation: Maximum amount of money the thief can rob = 3 + 3 + 1 = 7.\\n\\nExample 2:\\n\\nInput: root = [3,4,5,1,3,null,1]\\nOutput: 9\\nExplanation: Maximum amount of money the thief can rob = 4 + 5 = 9.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of nodes in the tree is in the range [1, 104].\\n0 <= Node.val <= 104\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/counting-bits",
        "Title": "Counting Bits ",
        "Description": "b\"Given an integer n, return an array ans of length n + 1 such that for each i (0 <= i <= n), ans[i] is the number of 1's in the binary representation of i.\\n\\xc2\\xa0\\nExample 1:\\nInput: n = 2\\nOutput: [0,1,1]\\nExplanation:\\n0 --> 0\\n1 --> 1\\n2 --> 10\\n\\nExample 2:\\nInput: n = 5\\nOutput: [0,1,1,2,1,2]\\nExplanation:\\n0 --> 0\\n1 --> 1\\n2 --> 10\\n3 --> 11\\n4 --> 100\\n5 --> 101\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n0 <= n <= 105\\n\\n\\xc2\\xa0\\nFollow up:\\n\\nIt is very easy to come up with a solution with a runtime of O(n log n). Can you do it in linear time O(n) and possibly in a single pass?\\nCan you do it without using any built-in function (i.e., like __builtin_popcount in C++)?\\n\\n\""
    },
    {
        "URL": "https://leetcode.com/problems/nested-list-weight-sum",
        "Title": "Nested List Weight Sum ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/longest-substring-with-at-most-k-distinct-characters",
        "Title": "Longest Substring with At Most K Distinct Characters ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/flatten-nested-list-iterator",
        "Title": "Flatten Nested List Iterator ",
        "Description": "b'You are given a nested list of integers nestedList. Each element is either an integer or a list whose elements may also be integers or other lists. Implement an iterator to flatten it.\\nImplement the NestedIterator class:\\n\\nNestedIterator(List<NestedInteger> nestedList) Initializes the iterator with the nested list nestedList.\\nint next() Returns the next integer in the nested list.\\nboolean hasNext() Returns true if there are still some integers in the nested list and false otherwise.\\n\\nYour code will be tested with the following pseudocode:\\ninitialize iterator with nestedList\\nres = []\\nwhile iterator.hasNext()\\n    append iterator.next() to the end of res\\nreturn res\\n\\nIf res matches the expected flattened list, then your code will be judged as correct.\\n\\xc2\\xa0\\nExample 1:\\nInput: nestedList = [[1,1],2,[1,1]]\\nOutput: [1,1,2,1,1]\\nExplanation: By calling next repeatedly until hasNext returns false, the order of elements returned by next should be: [1,1,2,1,1].\\n\\nExample 2:\\nInput: nestedList = [1,[4,[6]]]\\nOutput: [1,4,6]\\nExplanation: By calling next repeatedly until hasNext returns false, the order of elements returned by next should be: [1,4,6].\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nestedList.length <= 500\\nThe values of the integers in the nested list is in the range [-106, 106].\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/power-of-four",
        "Title": "Power of Four ",
        "Description": "b'Given an integer n, return true if it is a power of four. Otherwise, return false.\\nAn integer n is a power of four, if there exists an integer x such that n == 4x.\\n\\xc2\\xa0\\nExample 1:\\nInput: n = 16\\nOutput: true\\nExample 2:\\nInput: n = 5\\nOutput: false\\nExample 3:\\nInput: n = 1\\nOutput: true\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n-231 <= n <= 231 - 1\\n\\n\\xc2\\xa0\\nFollow up: Could you solve it without loops/recursion?'"
    },
    {
        "URL": "https://leetcode.com/problems/integer-break",
        "Title": "Integer Break ",
        "Description": "b'Given an integer n, break it into the sum of k positive integers, where k >= 2, and maximize the product of those integers.\\nReturn the maximum product you can get.\\n\\xc2\\xa0\\nExample 1:\\nInput: n = 2\\nOutput: 1\\nExplanation: 2 = 1 + 1, 1 \\xc3\\x97 1 = 1.\\n\\nExample 2:\\nInput: n = 10\\nOutput: 36\\nExplanation: 10 = 3 + 3 + 4, 3 \\xc3\\x97 3 \\xc3\\x97 4 = 36.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n2 <= n <= 58\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/reverse-string",
        "Title": "Reverse String ",
        "Description": "b'Write a function that reverses a string. The input string is given as an array of characters s.\\nYou must do this by modifying the input array in-place with O(1) extra memory.\\n\\xc2\\xa0\\nExample 1:\\nInput: s = [\"h\",\"e\",\"l\",\"l\",\"o\"]\\nOutput: [\"o\",\"l\",\"l\",\"e\",\"h\"]\\nExample 2:\\nInput: s = [\"H\",\"a\",\"n\",\"n\",\"a\",\"h\"]\\nOutput: [\"h\",\"a\",\"n\",\"n\",\"a\",\"H\"]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= s.length <= 105\\ns[i] is a printable ascii character.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/reverse-vowels-of-a-string",
        "Title": "Reverse Vowels of a String ",
        "Description": "b'Given a string s, reverse only all the vowels in the string and return it.\\nThe vowels are \\'a\\', \\'e\\', \\'i\\', \\'o\\', and \\'u\\', and they can appear in both cases.\\n\\xc2\\xa0\\nExample 1:\\nInput: s = \"hello\"\\nOutput: \"holle\"\\nExample 2:\\nInput: s = \"leetcode\"\\nOutput: \"leotcede\"\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= s.length <= 3 * 105\\ns consist of printable ASCII characters.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/moving-average-from-data-stream",
        "Title": "Moving Average from Data Stream ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/top-k-frequent-elements",
        "Title": "Top K Frequent Elements ",
        "Description": "b\"Given an integer array nums and an integer k, return the k most frequent elements. You may return the answer in any order.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [1,1,1,2,2,3], k = 2\\nOutput: [1,2]\\nExample 2:\\nInput: nums = [1], k = 1\\nOutput: [1]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 105\\nk is in the range [1, the number of unique elements in the array].\\nIt is guaranteed that the answer is unique.\\n\\n\\xc2\\xa0\\nFollow up: Your algorithm's time complexity must be better than O(n log n), where n is the array's size.\\n\""
    },
    {
        "URL": "https://leetcode.com/problems/design-tic-tac-toe",
        "Title": "Design Tic-Tac-Toe ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/intersection-of-two-arrays",
        "Title": "Intersection of Two Arrays ",
        "Description": "b'Given two integer arrays nums1 and nums2, return an array of their intersection. Each element in the result must be unique and you may return the result in any order.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums1 = [1,2,2,1], nums2 = [2,2]\\nOutput: [2]\\n\\nExample 2:\\nInput: nums1 = [4,9,5], nums2 = [9,4,9,8,4]\\nOutput: [9,4]\\nExplanation: [4,9] is also accepted.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums1.length, nums2.length <= 1000\\n0 <= nums1[i], nums2[i] <= 1000\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/intersection-of-two-arrays-ii",
        "Title": "Intersection of Two Arrays II ",
        "Description": "b\"Given two integer arrays nums1 and nums2, return an array of their intersection. Each element in the result must appear as many times as it shows in both arrays and you may return the result in any order.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums1 = [1,2,2,1], nums2 = [2,2]\\nOutput: [2,2]\\n\\nExample 2:\\nInput: nums1 = [4,9,5], nums2 = [9,4,9,8,4]\\nOutput: [4,9]\\nExplanation: [9,4] is also accepted.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums1.length, nums2.length <= 1000\\n0 <= nums1[i], nums2[i] <= 1000\\n\\n\\xc2\\xa0\\nFollow up:\\n\\nWhat if the given array is already sorted? How would you optimize your algorithm?\\nWhat if nums1's size is small compared to nums2's size? Which algorithm is better?\\nWhat if elements of nums2 are stored on disk, and the memory is limited such that you cannot load all elements into the memory at once?\\n\\n\""
    },
    {
        "URL": "https://leetcode.com/problems/two-sum",
        "Title": "Two Sum ",
        "Description": "b'Given an array of integers nums\\xc2\\xa0and an integer target, return indices of the two numbers such that they add up to target.\\nYou may assume that each input would have exactly one solution, and you may not use the same element twice.\\nYou can return the answer in any order.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [2,7,11,15], target = 9\\nOutput: [0,1]\\nExplanation: Because nums[0] + nums[1] == 9, we return [0, 1].\\n\\nExample 2:\\nInput: nums = [3,2,4], target = 6\\nOutput: [1,2]\\n\\nExample 3:\\nInput: nums = [3,3], target = 6\\nOutput: [0,1]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n2 <= nums.length <= 104\\n-109 <= nums[i] <= 109\\n-109 <= target <= 109\\nOnly one valid answer exists.\\n\\n\\xc2\\xa0\\nFollow-up:\\xc2\\xa0Can you come up with an algorithm that is less than\\xc2\\xa0O(n2)\\xc2\\xa0time complexity?'"
    },
    {
        "URL": "https://leetcode.com/problems/add-two-numbers",
        "Title": "Add Two Numbers ",
        "Description": "b'You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum\\xc2\\xa0as a linked list.\\nYou may assume the two numbers do not contain any leading zero, except the number 0 itself.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: l1 = [2,4,3], l2 = [5,6,4]\\nOutput: [7,0,8]\\nExplanation: 342 + 465 = 807.\\n\\nExample 2:\\nInput: l1 = [0], l2 = [0]\\nOutput: [0]\\n\\nExample 3:\\nInput: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]\\nOutput: [8,9,9,9,0,0,0,1]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of nodes in each linked list is in the range [1, 100].\\n0 <= Node.val <= 9\\nIt is guaranteed that the list represents a number that does not have leading zeros.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/longest-substring-without-repeating-characters",
        "Title": "Longest Substring Without Repeating Characters ",
        "Description": "b'Given a string s, find the length of the longest substring without repeating characters.\\n\\xc2\\xa0\\nExample 1:\\nInput: s = \"abcabcbb\"\\nOutput: 3\\nExplanation: The answer is \"abc\", with the length of 3.\\n\\nExample 2:\\nInput: s = \"bbbbb\"\\nOutput: 1\\nExplanation: The answer is \"b\", with the length of 1.\\n\\nExample 3:\\nInput: s = \"pwwkew\"\\nOutput: 3\\nExplanation: The answer is \"wke\", with the length of 3.\\nNotice that the answer must be a substring, \"pwke\" is a subsequence and not a substring.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n0 <= s.length <= 5 * 104\\ns consists of English letters, digits, symbols and spaces.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/median-of-two-sorted-arrays",
        "Title": "Median of Two Sorted Arrays ",
        "Description": "b'Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.\\nThe overall run time complexity should be O(log (m+n)).\\n\\xc2\\xa0\\nExample 1:\\nInput: nums1 = [1,3], nums2 = [2]\\nOutput: 2.00000\\nExplanation: merged array = [1,2,3] and median is 2.\\n\\nExample 2:\\nInput: nums1 = [1,2], nums2 = [3,4]\\nOutput: 2.50000\\nExplanation: merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nnums1.length == m\\nnums2.length == n\\n0 <= m <= 1000\\n0 <= n <= 1000\\n1 <= m + n <= 2000\\n-106 <= nums1[i], nums2[i] <= 106\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/longest-palindromic-substring",
        "Title": "Longest Palindromic Substring ",
        "Description": "b'Given a string s, return the longest palindromic substring in s.\\n\\xc2\\xa0\\nExample 1:\\nInput: s = \"babad\"\\nOutput: \"bab\"\\nExplanation: \"aba\" is also a valid answer.\\n\\nExample 2:\\nInput: s = \"cbbd\"\\nOutput: \"bb\"\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= s.length <= 1000\\ns consist of only digits and English letters.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/zigzag-conversion",
        "Title": "Zigzag Conversion ",
        "Description": "b'The string \"PAYPALISHIRING\" is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)\\nP   A   H   N\\nA P L S I I G\\nY   I   R\\n\\nAnd then read line by line: \"PAHNAPLSIIGYIR\"\\nWrite the code that will take a string and make this conversion given a number of rows:\\nstring convert(string s, int numRows);\\n\\n\\xc2\\xa0\\nExample 1:\\nInput: s = \"PAYPALISHIRING\", numRows = 3\\nOutput: \"PAHNAPLSIIGYIR\"\\n\\nExample 2:\\nInput: s = \"PAYPALISHIRING\", numRows = 4\\nOutput: \"PINALSIGYAHRPI\"\\nExplanation:\\nP     I    N\\nA   L S  I G\\nY A   H R\\nP     I\\n\\nExample 3:\\nInput: s = \"A\", numRows = 1\\nOutput: \"A\"\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= s.length <= 1000\\ns consists of English letters (lower-case and upper-case), \\',\\' and \\'.\\'.\\n1 <= numRows <= 1000\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/reverse-integer",
        "Title": "Reverse Integer ",
        "Description": "b'Given a signed 32-bit integer x, return x with its digits reversed. If reversing x causes the value to go outside the signed 32-bit integer range [-231, 231 - 1], then return 0.\\nAssume the environment does not allow you to store 64-bit integers (signed or unsigned).\\n\\xc2\\xa0\\nExample 1:\\nInput: x = 123\\nOutput: 321\\n\\nExample 2:\\nInput: x = -123\\nOutput: -321\\n\\nExample 3:\\nInput: x = 120\\nOutput: 21\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n-231 <= x <= 231 - 1\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/string-to-integer-atoi",
        "Title": "String to Integer (atoi) ",
        "Description": "b'Implement the myAtoi(string s) function, which converts a string to a 32-bit signed integer (similar to C/C++\\'s atoi function).\\nThe algorithm for myAtoi(string s) is as follows:\\n\\nRead in and ignore any leading whitespace.\\nCheck if the next character (if not already at the end of the string) is \\'-\\' or \\'+\\'. Read this character in if it is either. This determines if the final result is negative or positive respectively. Assume the result is positive if neither is present.\\nRead in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.\\nConvert these digits into an integer (i.e. \"123\" -> 123, \"0032\" -> 32). If no digits were read, then the integer is 0. Change the sign as necessary (from step 2).\\nIf the integer is out of the 32-bit signed integer range [-231, 231 - 1], then clamp the integer so that it remains in the range. Specifically, integers less than -231 should be clamped to -231, and integers greater than 231 - 1 should be clamped to 231 - 1.\\nReturn the integer as the final result.\\n\\nNote:\\n\\nOnly the space character \\' \\' is considered a whitespace character.\\nDo not ignore any characters other than the leading whitespace or the rest of the string after the digits.\\n\\n\\xc2\\xa0\\nExample 1:\\nInput: s = \"42\"\\nOutput: 42\\nExplanation: The underlined characters are what is read in, the caret is the current reader position.\\nStep 1: \"42\" (no characters read because there is no leading whitespace)\\n         ^\\nStep 2: \"42\" (no characters read because there is neither a \\'-\\' nor \\'+\\')\\n         ^\\nStep 3: \"42\" (\"42\" is read in)\\n           ^\\nThe parsed integer is 42.\\nSince 42 is in the range [-231, 231 - 1], the final result is 42.\\n\\nExample 2:\\nInput: s = \"   -42\"\\nOutput: -42\\nExplanation:\\nStep 1: \"   -42\" (leading whitespace is read and ignored)\\n            ^\\nStep 2: \"   -42\" (\\'-\\' is read, so the result should be negative)\\n             ^\\nStep 3: \"   -42\" (\"42\" is read in)\\n               ^\\nThe parsed integer is -42.\\nSince -42 is in the range [-231, 231 - 1], the final result is -42.\\n\\nExample 3:\\nInput: s = \"4193 with words\"\\nOutput: 4193\\nExplanation:\\nStep 1: \"4193 with words\" (no characters read because there is no leading whitespace)\\n         ^\\nStep 2: \"4193 with words\" (no characters read because there is neither a \\'-\\' nor \\'+\\')\\n         ^\\nStep 3: \"4193 with words\" (\"4193\" is read in; reading stops because the next character is a non-digit)\\n             ^\\nThe parsed integer is 4193.\\nSince 4193 is in the range [-231, 231 - 1], the final result is 4193.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n0 <= s.length <= 200\\ns consists of English letters (lower-case and upper-case), digits (0-9), \\' \\', \\'+\\', \\'-\\', and \\'.\\'.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/palindrome-number",
        "Title": "Palindrome Number ",
        "Description": "b'Given an integer x, return true if x is palindrome integer.\\nAn integer is a palindrome when it reads the same backward as forward.\\n\\nFor example, 121 is a palindrome while 123 is not.\\n\\n\\xc2\\xa0\\nExample 1:\\nInput: x = 121\\nOutput: true\\nExplanation: 121 reads as 121 from left to right and from right to left.\\n\\nExample 2:\\nInput: x = -121\\nOutput: false\\nExplanation: From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome.\\n\\nExample 3:\\nInput: x = 10\\nOutput: false\\nExplanation: Reads 01 from right to left. Therefore it is not a palindrome.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n-231\\xc2\\xa0<= x <= 231\\xc2\\xa0- 1\\n\\n\\xc2\\xa0\\nFollow up: Could you solve it without converting the integer to a string?'"
    },
    {
        "URL": "https://leetcode.com/problems/regular-expression-matching",
        "Title": "Regular Expression Matching ",
        "Description": "b'Given an input string s\\xc2\\xa0and a pattern p, implement regular expression matching with support for \\'.\\' and \\'*\\' where:\\n\\n\\'.\\' Matches any single character.\\xe2\\x80\\x8b\\xe2\\x80\\x8b\\xe2\\x80\\x8b\\xe2\\x80\\x8b\\n\\'*\\' Matches zero or more of the preceding element.\\n\\nThe matching should cover the entire input string (not partial).\\n\\xc2\\xa0\\nExample 1:\\nInput: s = \"aa\", p = \"a\"\\nOutput: false\\nExplanation: \"a\" does not match the entire string \"aa\".\\n\\nExample 2:\\nInput: s = \"aa\", p = \"a*\"\\nOutput: true\\nExplanation: \\'*\\' means zero or more of the preceding element, \\'a\\'. Therefore, by repeating \\'a\\' once, it becomes \"aa\".\\n\\nExample 3:\\nInput: s = \"ab\", p = \".*\"\\nOutput: true\\nExplanation: \".*\" means \"zero or more (*) of any character (.)\".\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= s.length\\xc2\\xa0<= 20\\n1 <= p.length\\xc2\\xa0<= 30\\ns contains only lowercase English letters.\\np contains only lowercase English letters, \\'.\\', and\\xc2\\xa0\\'*\\'.\\nIt is guaranteed for each appearance of the character \\'*\\', there will be a previous valid character to match.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/container-with-most-water",
        "Title": "Container With Most Water ",
        "Description": "b'You are given an integer array height of length n. There are n vertical lines drawn such that the two endpoints of the ith line are (i, 0) and (i, height[i]).\\nFind two lines that together with the x-axis form a container, such that the container contains the most water.\\nReturn the maximum amount of water a container can store.\\nNotice that you may not slant the container.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: height = [1,8,6,2,5,4,8,3,7]\\nOutput: 49\\nExplanation: The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49.\\n\\nExample 2:\\nInput: height = [1,1]\\nOutput: 1\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nn == height.length\\n2 <= n <= 105\\n0 <= height[i] <= 104\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/integer-to-roman",
        "Title": "Integer to Roman ",
        "Description": "b'Roman numerals are represented by seven different symbols:\\xc2\\xa0I, V, X, L, C, D and M.\\nSymbol       Value\\nI             1\\nV             5\\nX             10\\nL             50\\nC             100\\nD             500\\nM             1000\\nFor example,\\xc2\\xa02 is written as II\\xc2\\xa0in Roman numeral, just two one\\'s added together. 12 is written as\\xc2\\xa0XII, which is simply X + II. The number 27 is written as XXVII, which is XX + V + II.\\nRoman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:\\n\\nI can be placed before V (5) and X (10) to make 4 and 9.\\xc2\\xa0\\nX can be placed before L (50) and C (100) to make 40 and 90.\\xc2\\xa0\\nC can be placed before D (500) and M (1000) to make 400 and 900.\\n\\nGiven an integer, convert it to a roman numeral.\\n\\xc2\\xa0\\nExample 1:\\nInput: num = 3\\nOutput: \"III\"\\nExplanation: 3 is represented as 3 ones.\\n\\nExample 2:\\nInput: num = 58\\nOutput: \"LVIII\"\\nExplanation: L = 50, V = 5, III = 3.\\n\\nExample 3:\\nInput: num = 1994\\nOutput: \"MCMXCIV\"\\nExplanation: M = 1000, CM = 900, XC = 90 and IV = 4.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= num <= 3999\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/roman-to-integer",
        "Title": "Roman to Integer ",
        "Description": "b'Roman numerals are represented by seven different symbols:\\xc2\\xa0I, V, X, L, C, D and M.\\nSymbol       Value\\nI             1\\nV             5\\nX             10\\nL             50\\nC             100\\nD             500\\nM             1000\\nFor example,\\xc2\\xa02 is written as II\\xc2\\xa0in Roman numeral, just two ones added together. 12 is written as\\xc2\\xa0XII, which is simply X + II. The number 27 is written as XXVII, which is XX + V + II.\\nRoman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:\\n\\nI can be placed before V (5) and X (10) to make 4 and 9.\\xc2\\xa0\\nX can be placed before L (50) and C (100) to make 40 and 90.\\xc2\\xa0\\nC can be placed before D (500) and M (1000) to make 400 and 900.\\n\\nGiven a roman numeral, convert it to an integer.\\n\\xc2\\xa0\\nExample 1:\\nInput: s = \"III\"\\nOutput: 3\\nExplanation: III = 3.\\n\\nExample 2:\\nInput: s = \"LVIII\"\\nOutput: 58\\nExplanation: L = 50, V= 5, III = 3.\\n\\nExample 3:\\nInput: s = \"MCMXCIV\"\\nOutput: 1994\\nExplanation: M = 1000, CM = 900, XC = 90 and IV = 4.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= s.length <= 15\\ns contains only\\xc2\\xa0the characters (\\'I\\', \\'V\\', \\'X\\', \\'L\\', \\'C\\', \\'D\\', \\'M\\').\\nIt is guaranteed\\xc2\\xa0that s is a valid roman numeral in the range [1, 3999].\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/longest-common-prefix",
        "Title": "Longest Common Prefix ",
        "Description": "b'Write a function to find the longest common prefix string amongst an array of strings.\\nIf there is no common prefix, return an empty string \"\".\\n\\xc2\\xa0\\nExample 1:\\nInput: strs = [\"flower\",\"flow\",\"flight\"]\\nOutput: \"fl\"\\n\\nExample 2:\\nInput: strs = [\"dog\",\"racecar\",\"car\"]\\nOutput: \"\"\\nExplanation: There is no common prefix among the input strings.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= strs.length <= 200\\n0 <= strs[i].length <= 200\\nstrs[i] consists of only lowercase English letters.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/3sum",
        "Title": "3Sum ",
        "Description": "b'Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.\\nNotice that the solution set must not contain duplicate triplets.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [-1,0,1,2,-1,-4]\\nOutput: [[-1,-1,2],[-1,0,1]]\\nExample 2:\\nInput: nums = []\\nOutput: []\\nExample 3:\\nInput: nums = [0]\\nOutput: []\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n0 <= nums.length <= 3000\\n-105 <= nums[i] <= 105\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/3sum-closest",
        "Title": "3Sum Closest ",
        "Description": "b'Given an integer array nums of length n and an integer target, find three integers in nums such that the sum is closest to target.\\nReturn the sum of the three integers.\\nYou may assume that each input would have exactly one solution.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [-1,2,1,-4], target = 1\\nOutput: 2\\nExplanation: The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).\\n\\nExample 2:\\nInput: nums = [0,0,0], target = 1\\nOutput: 0\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n3 <= nums.length <= 1000\\n-1000 <= nums[i] <= 1000\\n-104 <= target <= 104\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/letter-combinations-of-a-phone-number",
        "Title": "Letter Combinations of a Phone Number ",
        "Description": "b'Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. Return the answer in any order.\\nA mapping of digits to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.\\n\\n\\xc2\\xa0\\nExample 1:\\nInput: digits = \"23\"\\nOutput: [\"ad\",\"ae\",\"af\",\"bd\",\"be\",\"bf\",\"cd\",\"ce\",\"cf\"]\\n\\nExample 2:\\nInput: digits = \"\"\\nOutput: []\\n\\nExample 3:\\nInput: digits = \"2\"\\nOutput: [\"a\",\"b\",\"c\"]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n0 <= digits.length <= 4\\ndigits[i] is a digit in the range [\\'2\\', \\'9\\'].\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/4sum",
        "Title": "4Sum ",
        "Description": "b'Given an array nums of n integers, return an array of all the unique quadruplets [nums[a], nums[b], nums[c], nums[d]] such that:\\n\\n0 <= a, b, c, d\\xc2\\xa0< n\\na, b, c, and d are distinct.\\nnums[a] + nums[b] + nums[c] + nums[d] == target\\n\\nYou may return the answer in any order.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [1,0,-1,0,-2,2], target = 0\\nOutput: [[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]]\\n\\nExample 2:\\nInput: nums = [2,2,2,2,2], target = 8\\nOutput: [[2,2,2,2]]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 200\\n-109 <= nums[i] <= 109\\n-109 <= target <= 109\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/remove-nth-node-from-end-of-list",
        "Title": "Remove Nth Node From End of List ",
        "Description": "b'Given the head of a linked list, remove the nth node from the end of the list and return its head.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: head = [1,2,3,4,5], n = 2\\nOutput: [1,2,3,5]\\n\\nExample 2:\\nInput: head = [1], n = 1\\nOutput: []\\n\\nExample 3:\\nInput: head = [1,2], n = 1\\nOutput: [1]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of nodes in the list is sz.\\n1 <= sz <= 30\\n0 <= Node.val <= 100\\n1 <= n <= sz\\n\\n\\xc2\\xa0\\nFollow up: Could you do this in one pass?\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/valid-parentheses",
        "Title": "Valid Parentheses ",
        "Description": "b'Given a string s containing just the characters \\'(\\', \\')\\', \\'{\\', \\'}\\', \\'[\\' and \\']\\', determine if the input string is valid.\\nAn input string is valid if:\\n\\nOpen brackets must be closed by the same type of brackets.\\nOpen brackets must be closed in the correct order.\\n\\n\\xc2\\xa0\\nExample 1:\\nInput: s = \"()\"\\nOutput: true\\n\\nExample 2:\\nInput: s = \"()[]{}\"\\nOutput: true\\n\\nExample 3:\\nInput: s = \"(]\"\\nOutput: false\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= s.length <= 104\\ns consists of parentheses only \\'()[]{}\\'.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/merge-two-sorted-lists",
        "Title": "Merge Two Sorted Lists ",
        "Description": "b'You are given the heads of two sorted linked lists list1 and list2.\\nMerge the two lists in a one sorted list. The list should be made by splicing together the nodes of the first two lists.\\nReturn the head of the merged linked list.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: list1 = [1,2,4], list2 = [1,3,4]\\nOutput: [1,1,2,3,4,4]\\n\\nExample 2:\\nInput: list1 = [], list2 = []\\nOutput: []\\n\\nExample 3:\\nInput: list1 = [], list2 = [0]\\nOutput: [0]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of nodes in both lists is in the range [0, 50].\\n-100 <= Node.val <= 100\\nBoth list1 and list2 are sorted in non-decreasing order.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/generate-parentheses",
        "Title": "Generate Parentheses ",
        "Description": "b'Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.\\n\\xc2\\xa0\\nExample 1:\\nInput: n = 3\\nOutput: [\"((()))\",\"(()())\",\"(())()\",\"()(())\",\"()()()\"]\\nExample 2:\\nInput: n = 1\\nOutput: [\"()\"]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= n <= 8\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/merge-k-sorted-lists",
        "Title": "Merge k Sorted Lists ",
        "Description": "b'You are given an array of k linked-lists lists, each linked-list is sorted in ascending order.\\nMerge all the linked-lists into one sorted linked-list and return it.\\n\\xc2\\xa0\\nExample 1:\\nInput: lists = [[1,4,5],[1,3,4],[2,6]]\\nOutput: [1,1,2,3,4,4,5,6]\\nExplanation: The linked-lists are:\\n[\\n  1->4->5,\\n  1->3->4,\\n  2->6\\n]\\nmerging them into one sorted list:\\n1->1->2->3->4->4->5->6\\n\\nExample 2:\\nInput: lists = []\\nOutput: []\\n\\nExample 3:\\nInput: lists = [[]]\\nOutput: []\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nk == lists.length\\n0 <= k <= 104\\n0 <= lists[i].length <= 500\\n-104 <= lists[i][j] <= 104\\nlists[i] is sorted in ascending order.\\nThe sum of lists[i].length will not exceed 104.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/swap-nodes-in-pairs",
        "Title": "Swap Nodes in Pairs ",
        "Description": "b\"Given a\\xc2\\xa0linked list, swap every two adjacent nodes and return its head. You must solve the problem without\\xc2\\xa0modifying the values in the list's nodes (i.e., only nodes themselves may be changed.)\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: head = [1,2,3,4]\\nOutput: [2,1,4,3]\\n\\nExample 2:\\nInput: head = []\\nOutput: []\\n\\nExample 3:\\nInput: head = [1]\\nOutput: [1]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of nodes in the\\xc2\\xa0list\\xc2\\xa0is in the range [0, 100].\\n0 <= Node.val <= 100\\n\\n\""
    },
    {
        "URL": "https://leetcode.com/problems/reverse-nodes-in-k-group",
        "Title": "Reverse Nodes in k-Group ",
        "Description": "b\"Given the head of a linked list, reverse the nodes of the list k at a time, and return the modified list.\\nk is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes, in the end, should remain as it is.\\nYou may not alter the values in the list's nodes, only nodes themselves may be changed.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: head = [1,2,3,4,5], k = 2\\nOutput: [2,1,4,3,5]\\n\\nExample 2:\\n\\nInput: head = [1,2,3,4,5], k = 3\\nOutput: [3,2,1,4,5]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of nodes in the list is n.\\n1 <= k <= n <= 5000\\n0 <= Node.val <= 1000\\n\\n\\xc2\\xa0\\nFollow-up: Can you solve the problem in O(1) extra memory space?\\n\""
    },
    {
        "URL": "https://leetcode.com/problems/remove-duplicates-from-sorted-array",
        "Title": "Remove Duplicates from Sorted Array ",
        "Description": "b'Given an integer array nums sorted in non-decreasing order, remove the duplicates in-place such that each unique element appears only once. The relative order of the elements should be kept the same.\\nSince it is impossible to change the length of the array in some languages, you must instead have the result be placed in the first part of the array nums. More formally, if there are k elements after removing the duplicates, then the first k elements of nums\\xc2\\xa0should hold the final result. It does not matter what you leave beyond the first\\xc2\\xa0k\\xc2\\xa0elements.\\nReturn k after placing the final result in the first k slots of nums.\\nDo not allocate extra space for another array. You must do this by modifying the input array in-place with O(1) extra memory.\\nCustom Judge:\\nThe judge will test your solution with the following code:\\nint[] nums = [...]; // Input array\\nint[] expectedNums = [...]; // The expected answer with correct length\\n\\nint k = removeDuplicates(nums); // Calls your implementation\\n\\nassert k == expectedNums.length;\\nfor (int i = 0; i < k; i++) {\\n    assert nums[i] == expectedNums[i];\\n}\\n\\nIf all assertions pass, then your solution will be accepted.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [1,1,2]\\nOutput: 2, nums = [1,2,_]\\nExplanation: Your function should return k = 2, with the first two elements of nums being 1 and 2 respectively.\\nIt does not matter what you leave beyond the returned k (hence they are underscores).\\n\\nExample 2:\\nInput: nums = [0,0,1,1,1,2,2,3,3,4]\\nOutput: 5, nums = [0,1,2,3,4,_,_,_,_,_]\\nExplanation: Your function should return k = 5, with the first five elements of nums being 0, 1, 2, 3, and 4 respectively.\\nIt does not matter what you leave beyond the returned k (hence they are underscores).\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 3 * 104\\n-100 <= nums[i] <= 100\\nnums is sorted in non-decreasing order.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/remove-element",
        "Title": "Remove Element ",
        "Description": "b'Given an integer array nums and an integer val, remove all occurrences of val in nums in-place. The relative order of the elements may be changed.\\nSince it is impossible to change the length of the array in some languages, you must instead have the result be placed in the first part of the array nums. More formally, if there are k elements after removing the duplicates, then the first k elements of nums should hold the final result. It does not matter what you leave beyond the first k elements.\\nReturn k after placing the final result in the first k slots of nums.\\nDo not allocate extra space for another array. You must do this by modifying the input array in-place with O(1) extra memory.\\nCustom Judge:\\nThe judge will test your solution with the following code:\\nint[] nums = [...]; // Input array\\nint val = ...; // Value to remove\\nint[] expectedNums = [...]; // The expected answer with correct length.\\n                            // It is sorted with no values equaling val.\\n\\nint k = removeElement(nums, val); // Calls your implementation\\n\\nassert k == expectedNums.length;\\nsort(nums, 0, k); // Sort the first k elements of nums\\nfor (int i = 0; i < actualLength; i++) {\\n    assert nums[i] == expectedNums[i];\\n}\\n\\nIf all assertions pass, then your solution will be accepted.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [3,2,2,3], val = 3\\nOutput: 2, nums = [2,2,_,_]\\nExplanation: Your function should return k = 2, with the first two elements of nums being 2.\\nIt does not matter what you leave beyond the returned k (hence they are underscores).\\n\\nExample 2:\\nInput: nums = [0,1,2,2,3,0,4,2], val = 2\\nOutput: 5, nums = [0,1,4,0,3,_,_,_]\\nExplanation: Your function should return k = 5, with the first five elements of nums containing 0, 0, 1, 3, and 4.\\nNote that the five elements can be returned in any order.\\nIt does not matter what you leave beyond the returned k (hence they are underscores).\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n0 <= nums.length <= 100\\n0 <= nums[i] <= 50\\n0 <= val <= 100\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/implement-strstr",
        "Title": "Implement strStr() ",
        "Description": "b'Implement strStr().\\nGiven two strings needle and haystack, return the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.\\nClarification:\\nWhat should we return when needle is an empty string? This is a great question to ask during an interview.\\nFor the purpose of this problem, we will return 0 when needle is an empty string. This is consistent to C\\'s strstr() and Java\\'s indexOf().\\n\\xc2\\xa0\\nExample 1:\\nInput: haystack = \"hello\", needle = \"ll\"\\nOutput: 2\\n\\nExample 2:\\nInput: haystack = \"aaaaa\", needle = \"bba\"\\nOutput: -1\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= haystack.length, needle.length <= 104\\nhaystack and needle consist of only lowercase English characters.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/divide-two-integers",
        "Title": "Divide Two Integers ",
        "Description": "b'Given two integers dividend and divisor, divide two integers without using multiplication, division, and mod operator.\\nThe integer division should truncate toward zero, which means losing its fractional part. For example, 8.345 would be truncated to 8, and -2.7335 would be truncated to -2.\\nReturn the quotient after dividing dividend by divisor.\\nNote: Assume we are dealing with an environment that could only store integers within the 32-bit signed integer range: [\\xe2\\x88\\x92231, 231 \\xe2\\x88\\x92 1]. For this problem, if the quotient is strictly greater than 231 - 1, then return 231 - 1, and if the quotient is strictly less than -231, then return -231.\\n\\xc2\\xa0\\nExample 1:\\nInput: dividend = 10, divisor = 3\\nOutput: 3\\nExplanation: 10/3 = 3.33333.. which is truncated to 3.\\n\\nExample 2:\\nInput: dividend = 7, divisor = -3\\nOutput: -2\\nExplanation: 7/-3 = -2.33333.. which is truncated to -2.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n-231 <= dividend, divisor <= 231 - 1\\ndivisor != 0\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/substring-with-concatenation-of-all-words",
        "Title": "Substring with Concatenation of All Words ",
        "Description": "b'You are given a string s and an array of strings words of the same length. Return\\xc2\\xa0all starting indices of substring(s) in s\\xc2\\xa0that is a concatenation of each word in words exactly once, in any order,\\xc2\\xa0and without any intervening characters.\\nYou can return the answer in any order.\\n\\xc2\\xa0\\nExample 1:\\nInput: s = \"barfoothefoobarman\", words = [\"foo\",\"bar\"]\\nOutput: [0,9]\\nExplanation: Substrings starting at index 0 and 9 are \"barfoo\" and \"foobar\" respectively.\\nThe output order does not matter, returning [9,0] is fine too.\\n\\nExample 2:\\nInput: s = \"wordgoodgoodgoodbestword\", words = [\"word\",\"good\",\"best\",\"word\"]\\nOutput: []\\n\\nExample 3:\\nInput: s = \"barfoofoobarthefoobarman\", words = [\"bar\",\"foo\",\"the\"]\\nOutput: [6,9,12]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= s.length <= 104\\ns consists of lower-case English letters.\\n1 <= words.length <= 5000\\n1 <= words[i].length <= 30\\nwords[i]\\xc2\\xa0consists of lower-case English letters.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/next-permutation",
        "Title": "Next Permutation ",
        "Description": "b'A permutation of an array of integers is an arrangement of its members into a sequence or linear order.\\n\\nFor example, for arr = [1,2,3], the following are considered permutations of arr: [1,2,3], [1,3,2], [3,1,2], [2,3,1].\\n\\nThe next permutation of an array of integers is the next lexicographically greater permutation of its integer. More formally, if all the permutations of the array are sorted in one container according to their lexicographical order, then the next permutation of that array is the permutation that follows it in the sorted container. If such arrangement is not possible, the array must be rearranged as the lowest possible order (i.e., sorted in ascending order).\\n\\nFor example, the next permutation of arr = [1,2,3] is [1,3,2].\\nSimilarly, the next permutation of arr = [2,3,1] is [3,1,2].\\nWhile the next permutation of arr = [3,2,1] is [1,2,3] because [3,2,1] does not have a lexicographical larger rearrangement.\\n\\nGiven an array of integers nums, find the next permutation of nums.\\nThe replacement must be in place and use only constant extra memory.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [1,2,3]\\nOutput: [1,3,2]\\n\\nExample 2:\\nInput: nums = [3,2,1]\\nOutput: [1,2,3]\\n\\nExample 3:\\nInput: nums = [1,1,5]\\nOutput: [1,5,1]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 100\\n0 <= nums[i] <= 100\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/longest-valid-parentheses",
        "Title": "Longest Valid Parentheses ",
        "Description": "b'Given a string containing just the characters \\'(\\' and \\')\\', find the length of the longest valid (well-formed) parentheses substring.\\n\\xc2\\xa0\\nExample 1:\\nInput: s = \"(()\"\\nOutput: 2\\nExplanation: The longest valid parentheses substring is \"()\".\\n\\nExample 2:\\nInput: s = \")()())\"\\nOutput: 4\\nExplanation: The longest valid parentheses substring is \"()()\".\\n\\nExample 3:\\nInput: s = \"\"\\nOutput: 0\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n0 <= s.length <= 3 * 104\\ns[i] is \\'(\\', or \\')\\'.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/search-in-rotated-sorted-array",
        "Title": "Search in Rotated Sorted Array ",
        "Description": "b'There is an integer array nums sorted in ascending order (with distinct values).\\nPrior to being passed to your function, nums is possibly rotated at an unknown pivot index k (1 <= k < nums.length) such that the resulting array is [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). For example, [0,1,2,4,5,6,7] might be rotated at pivot index 3 and become [4,5,6,7,0,1,2].\\nGiven the array nums after the possible rotation and an integer target, return the index of target if it is in nums, or -1 if it is not in nums.\\nYou must write an algorithm with O(log n) runtime complexity.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [4,5,6,7,0,1,2], target = 0\\nOutput: 4\\nExample 2:\\nInput: nums = [4,5,6,7,0,1,2], target = 3\\nOutput: -1\\nExample 3:\\nInput: nums = [1], target = 0\\nOutput: -1\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 5000\\n-104 <= nums[i] <= 104\\nAll values of nums are unique.\\nnums is an ascending array that is possibly rotated.\\n-104 <= target <= 104\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array",
        "Title": "Find First and Last Position of Element in Sorted Array ",
        "Description": "b'Given an array of integers nums sorted in non-decreasing order, find the starting and ending position of a given target value.\\nIf target is not found in the array, return [-1, -1].\\nYou must\\xc2\\xa0write an algorithm with\\xc2\\xa0O(log n) runtime complexity.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [5,7,7,8,8,10], target = 8\\nOutput: [3,4]\\nExample 2:\\nInput: nums = [5,7,7,8,8,10], target = 6\\nOutput: [-1,-1]\\nExample 3:\\nInput: nums = [], target = 0\\nOutput: [-1,-1]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n0 <= nums.length <= 105\\n-109\\xc2\\xa0<= nums[i]\\xc2\\xa0<= 109\\nnums is a non-decreasing array.\\n-109\\xc2\\xa0<= target\\xc2\\xa0<= 109\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/search-insert-position",
        "Title": "Search Insert Position ",
        "Description": "b'Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.\\nYou must\\xc2\\xa0write an algorithm with\\xc2\\xa0O(log n) runtime complexity.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [1,3,5,6], target = 5\\nOutput: 2\\n\\nExample 2:\\nInput: nums = [1,3,5,6], target = 2\\nOutput: 1\\n\\nExample 3:\\nInput: nums = [1,3,5,6], target = 7\\nOutput: 4\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 104\\n-104 <= nums[i] <= 104\\nnums contains distinct values sorted in ascending order.\\n-104 <= target <= 104\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/valid-sudoku",
        "Title": "Valid Sudoku ",
        "Description": "b'Determine if a\\xc2\\xa09 x 9 Sudoku board\\xc2\\xa0is valid.\\xc2\\xa0Only the filled cells need to be validated\\xc2\\xa0according to the following rules:\\n\\nEach row\\xc2\\xa0must contain the\\xc2\\xa0digits\\xc2\\xa01-9 without repetition.\\nEach column must contain the digits\\xc2\\xa01-9\\xc2\\xa0without repetition.\\nEach of the nine\\xc2\\xa03 x 3 sub-boxes of the grid must contain the digits\\xc2\\xa01-9\\xc2\\xa0without repetition.\\n\\nNote:\\n\\nA Sudoku board (partially filled) could be valid but is not necessarily solvable.\\nOnly the filled cells need to be validated according to the mentioned\\xc2\\xa0rules.\\n\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: board = \\n[[\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"]\\n,[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"]\\n,[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"]\\n,[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"]\\n,[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"]\\n,[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"]\\n,[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"]\\n,[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"]\\n,[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]\\nOutput: true\\n\\nExample 2:\\nInput: board = \\n[[\"8\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"]\\n,[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"]\\n,[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"]\\n,[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"]\\n,[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"]\\n,[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"]\\n,[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"]\\n,[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"]\\n,[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]\\nOutput: false\\nExplanation: Same as Example 1, except with the 5 in the top left corner being modified to 8. Since there are two 8\\'s in the top left 3x3 sub-box, it is invalid.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nboard.length == 9\\nboard[i].length == 9\\nboard[i][j] is a digit 1-9 or \\'.\\'.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/sudoku-solver",
        "Title": "Sudoku Solver ",
        "Description": "b'Write a program to solve a Sudoku puzzle by filling the empty cells.\\nA sudoku solution must satisfy all of the following rules:\\n\\nEach of the digits 1-9 must occur exactly once in each row.\\nEach of the digits 1-9 must occur exactly once in each column.\\nEach of the digits 1-9 must occur exactly once in each of the 9 3x3 sub-boxes of the grid.\\n\\nThe \\'.\\' character indicates empty cells.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: board = [[\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"],[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"],[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"],[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"],[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"],[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"],[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"],[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"],[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]\\nOutput: [[\"5\",\"3\",\"4\",\"6\",\"7\",\"8\",\"9\",\"1\",\"2\"],[\"6\",\"7\",\"2\",\"1\",\"9\",\"5\",\"3\",\"4\",\"8\"],[\"1\",\"9\",\"8\",\"3\",\"4\",\"2\",\"5\",\"6\",\"7\"],[\"8\",\"5\",\"9\",\"7\",\"6\",\"1\",\"4\",\"2\",\"3\"],[\"4\",\"2\",\"6\",\"8\",\"5\",\"3\",\"7\",\"9\",\"1\"],[\"7\",\"1\",\"3\",\"9\",\"2\",\"4\",\"8\",\"5\",\"6\"],[\"9\",\"6\",\"1\",\"5\",\"3\",\"7\",\"2\",\"8\",\"4\"],[\"2\",\"8\",\"7\",\"4\",\"1\",\"9\",\"6\",\"3\",\"5\"],[\"3\",\"4\",\"5\",\"2\",\"8\",\"6\",\"1\",\"7\",\"9\"]]\\nExplanation:\\xc2\\xa0The input board is shown above and the only valid solution is shown below:\\n\\n\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nboard.length == 9\\nboard[i].length == 9\\nboard[i][j] is a digit or \\'.\\'.\\nIt is guaranteed that the input board has only one solution.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/count-and-say",
        "Title": "Count and Say ",
        "Description": "b'The count-and-say sequence is a sequence of digit strings defined by the recursive formula:\\n\\ncountAndSay(1) = \"1\"\\ncountAndSay(n) is the way you would \"say\" the digit string from countAndSay(n-1), which is then converted into a different digit string.\\n\\nTo determine how you \"say\" a digit string, split it into the minimal number of substrings such that each substring contains exactly one unique digit. Then for each substring, say the number of digits, then say the digit. Finally, concatenate every said digit.\\nFor example, the saying and conversion for digit string \"3322251\":\\n\\nGiven a positive integer n, return the nth term of the count-and-say sequence.\\n\\xc2\\xa0\\nExample 1:\\nInput: n = 1\\nOutput: \"1\"\\nExplanation: This is the base case.\\n\\nExample 2:\\nInput: n = 4\\nOutput: \"1211\"\\nExplanation:\\ncountAndSay(1) = \"1\"\\ncountAndSay(2) = say \"1\" = one 1 = \"11\"\\ncountAndSay(3) = say \"11\" = two 1\\'s = \"21\"\\ncountAndSay(4) = say \"21\" = one 2 + one 1 = \"12\" + \"11\" = \"1211\"\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= n <= 30\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/combination-sum",
        "Title": "Combination Sum ",
        "Description": "b'Given an array of distinct integers candidates and a target integer target, return a list of all unique combinations of candidates where the chosen numbers sum to target. You may return the combinations in any order.\\nThe same number may be chosen from candidates an unlimited number of times. Two combinations are unique if the frequency of at least one of the chosen numbers is different.\\nIt is guaranteed that the number of unique combinations that sum up to target is less than 150 combinations for the given input.\\n\\xc2\\xa0\\nExample 1:\\nInput: candidates = [2,3,6,7], target = 7\\nOutput: [[2,2,3],[7]]\\nExplanation:\\n2 and 3 are candidates, and 2 + 2 + 3 = 7. Note that 2 can be used multiple times.\\n7 is a candidate, and 7 = 7.\\nThese are the only two combinations.\\n\\nExample 2:\\nInput: candidates = [2,3,5], target = 8\\nOutput: [[2,2,2,2],[2,3,3],[3,5]]\\n\\nExample 3:\\nInput: candidates = [2], target = 1\\nOutput: []\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= candidates.length <= 30\\n1 <= candidates[i] <= 200\\nAll elements of candidates are distinct.\\n1 <= target <= 500\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/combination-sum-ii",
        "Title": "Combination Sum II ",
        "Description": "b'Given a collection of candidate numbers (candidates) and a target number (target), find all unique combinations in candidates\\xc2\\xa0where the candidate numbers sum to target.\\nEach number in candidates\\xc2\\xa0may only be used once in the combination.\\nNote:\\xc2\\xa0The solution set must not contain duplicate combinations.\\n\\xc2\\xa0\\nExample 1:\\nInput: candidates = [10,1,2,7,6,1,5], target = 8\\nOutput: \\n[\\n[1,1,6],\\n[1,2,5],\\n[1,7],\\n[2,6]\\n]\\n\\nExample 2:\\nInput: candidates = [2,5,2,1,2], target = 5\\nOutput: \\n[\\n[1,2,2],\\n[5]\\n]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <=\\xc2\\xa0candidates.length <= 100\\n1 <=\\xc2\\xa0candidates[i] <= 50\\n1 <= target <= 30\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/first-missing-positive",
        "Title": "First Missing Positive ",
        "Description": "b'Given an unsorted integer array nums, return the smallest missing positive integer.\\nYou must implement an algorithm that runs in O(n) time and uses constant extra space.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [1,2,0]\\nOutput: 3\\nExample 2:\\nInput: nums = [3,4,-1,1]\\nOutput: 2\\nExample 3:\\nInput: nums = [7,8,9,11,12]\\nOutput: 1\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 5 * 105\\n-231 <= nums[i] <= 231 - 1\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/trapping-rain-water",
        "Title": "Trapping Rain Water ",
        "Description": "b'Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: height = [0,1,0,2,1,0,1,3,2,1,2,1]\\nOutput: 6\\nExplanation: The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped.\\n\\nExample 2:\\nInput: height = [4,2,0,3,2,5]\\nOutput: 9\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nn == height.length\\n1 <= n <= 2 * 104\\n0 <= height[i] <= 105\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/multiply-strings",
        "Title": "Multiply Strings ",
        "Description": "b'Given two non-negative integers num1 and num2 represented as strings, return the product of num1 and num2, also represented as a string.\\nNote:\\xc2\\xa0You must not use any built-in BigInteger library or convert the inputs to integer directly.\\n\\xc2\\xa0\\nExample 1:\\nInput: num1 = \"2\", num2 = \"3\"\\nOutput: \"6\"\\nExample 2:\\nInput: num1 = \"123\", num2 = \"456\"\\nOutput: \"56088\"\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= num1.length, num2.length <= 200\\nnum1 and num2 consist of digits only.\\nBoth num1 and num2\\xc2\\xa0do not contain any leading zero, except the number 0 itself.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/wildcard-matching",
        "Title": "Wildcard Matching ",
        "Description": "b'Given an input string (s) and a pattern (p), implement wildcard pattern matching with support for \\'?\\' and \\'*\\' where:\\n\\n\\'?\\' Matches any single character.\\n\\'*\\' Matches any sequence of characters (including the empty sequence).\\n\\nThe matching should cover the entire input string (not partial).\\n\\xc2\\xa0\\nExample 1:\\nInput: s = \"aa\", p = \"a\"\\nOutput: false\\nExplanation: \"a\" does not match the entire string \"aa\".\\n\\nExample 2:\\nInput: s = \"aa\", p = \"*\"\\nOutput: true\\nExplanation:\\xc2\\xa0\\'*\\' matches any sequence.\\n\\nExample 3:\\nInput: s = \"cb\", p = \"?a\"\\nOutput: false\\nExplanation:\\xc2\\xa0\\'?\\' matches \\'c\\', but the second letter is \\'a\\', which does not match \\'b\\'.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n0 <= s.length, p.length <= 2000\\ns contains only lowercase English letters.\\np contains only lowercase English letters, \\'?\\' or \\'*\\'.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/jump-game-ii",
        "Title": "Jump Game II ",
        "Description": "b'Given an array of non-negative integers nums, you are initially positioned at the first index of the array.\\nEach element in the array represents your maximum jump length at that position.\\nYour goal is to reach the last index in the minimum number of jumps.\\nYou can assume that you can always reach the last index.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [2,3,1,1,4]\\nOutput: 2\\nExplanation: The minimum number of jumps to reach the last index is 2. Jump 1 step from index 0 to 1, then 3 steps to the last index.\\n\\nExample 2:\\nInput: nums = [2,3,0,1,4]\\nOutput: 2\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 104\\n0 <= nums[i] <= 1000\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/permutations",
        "Title": "Permutations ",
        "Description": "b'Given an array nums of distinct integers, return all the possible permutations. You can return the answer in any order.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [1,2,3]\\nOutput: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]\\nExample 2:\\nInput: nums = [0,1]\\nOutput: [[0,1],[1,0]]\\nExample 3:\\nInput: nums = [1]\\nOutput: [[1]]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 6\\n-10 <= nums[i] <= 10\\nAll the integers of nums are unique.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/permutations-ii",
        "Title": "Permutations II ",
        "Description": "b'Given a collection of numbers, nums,\\xc2\\xa0that might contain duplicates, return all possible unique permutations in any order.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [1,1,2]\\nOutput:\\n[[1,1,2],\\n [1,2,1],\\n [2,1,1]]\\n\\nExample 2:\\nInput: nums = [1,2,3]\\nOutput: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 8\\n-10 <= nums[i] <= 10\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/rotate-image",
        "Title": "Rotate Image ",
        "Description": "b'You are given an n x n 2D matrix representing an image, rotate the image by 90 degrees (clockwise).\\nYou have to rotate the image in-place, which means you have to modify the input 2D matrix directly. DO NOT allocate another 2D matrix and do the rotation.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: matrix = [[1,2,3],[4,5,6],[7,8,9]]\\nOutput: [[7,4,1],[8,5,2],[9,6,3]]\\n\\nExample 2:\\n\\nInput: matrix = [[5,1,9,11],[2,4,8,10],[13,3,6,7],[15,14,12,16]]\\nOutput: [[15,13,2,5],[14,3,4,1],[12,6,8,9],[16,7,10,11]]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nn == matrix.length == matrix[i].length\\n1 <= n <= 20\\n-1000 <= matrix[i][j] <= 1000\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/group-anagrams",
        "Title": "Group Anagrams ",
        "Description": "b'Given an array of strings strs, group the anagrams together. You can return the answer in any order.\\nAn Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.\\n\\xc2\\xa0\\nExample 1:\\nInput: strs = [\"eat\",\"tea\",\"tan\",\"ate\",\"nat\",\"bat\"]\\nOutput: [[\"bat\"],[\"nat\",\"tan\"],[\"ate\",\"eat\",\"tea\"]]\\nExample 2:\\nInput: strs = [\"\"]\\nOutput: [[\"\"]]\\nExample 3:\\nInput: strs = [\"a\"]\\nOutput: [[\"a\"]]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= strs.length <= 104\\n0 <= strs[i].length <= 100\\nstrs[i] consists of lowercase English letters.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/powx-n",
        "Title": "Pow(x, n) ",
        "Description": "b'Implement pow(x, n), which calculates x raised to the power n (i.e., xn).\\n\\xc2\\xa0\\nExample 1:\\nInput: x = 2.00000, n = 10\\nOutput: 1024.00000\\n\\nExample 2:\\nInput: x = 2.10000, n = 3\\nOutput: 9.26100\\n\\nExample 3:\\nInput: x = 2.00000, n = -2\\nOutput: 0.25000\\nExplanation: 2-2 = 1/22 = 1/4 = 0.25\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n-100.0 < x < 100.0\\n-231 <= n <= 231-1\\n-104 <= xn <= 104\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/binary-watch",
        "Title": "Binary Watch ",
        "Description": "b'A binary watch has 4 LEDs on the top to represent the hours (0-11), and 6 LEDs on the bottom to represent\\xc2\\xa0the minutes (0-59). Each LED represents a zero or one, with the least significant bit on the right.\\n\\nFor example, the below binary watch reads \"4:51\".\\n\\n\\nGiven an integer turnedOn which represents the number of LEDs that are currently on (ignoring the PM), return all possible times the watch could represent. You may return the answer in any order.\\nThe hour must not contain a leading zero.\\n\\nFor example, \"01:00\" is not valid. It should be \"1:00\".\\n\\nThe minute must be consist of two digits and may contain a leading zero.\\n\\nFor example, \"10:2\" is not valid. It should be \"10:02\".\\n\\n\\xc2\\xa0\\nExample 1:\\nInput: turnedOn = 1\\nOutput: [\"0:01\",\"0:02\",\"0:04\",\"0:08\",\"0:16\",\"0:32\",\"1:00\",\"2:00\",\"4:00\",\"8:00\"]\\nExample 2:\\nInput: turnedOn = 9\\nOutput: []\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n0 <= turnedOn <= 10\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/remove-k-digits",
        "Title": "Remove K Digits ",
        "Description": "b'Given string num representing a non-negative integer num, and an integer k, return the smallest possible integer after removing k digits from num.\\n\\xc2\\xa0\\nExample 1:\\nInput: num = \"1432219\", k = 3\\nOutput: \"1219\"\\nExplanation: Remove the three digits 4, 3, and 2 to form the new number 1219 which is the smallest.\\n\\nExample 2:\\nInput: num = \"10200\", k = 1\\nOutput: \"200\"\\nExplanation: Remove the leading 1 and the number is 200. Note that the output must not contain leading zeroes.\\n\\nExample 3:\\nInput: num = \"10\", k = 2\\nOutput: \"0\"\\nExplanation: Remove all the digits from the number and it is left with nothing which is 0.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= k <= num.length <= 105\\nnum consists of only digits.\\nnum does not have any leading zeros except for the zero itself.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/frog-jump",
        "Title": "Frog Jump ",
        "Description": "b\"A frog is crossing a river. The river is divided into some number of units, and at each unit, there may or may not exist a stone. The frog can jump on a stone, but it must not jump into the water.\\nGiven a list of stones' positions (in units) in sorted ascending order, determine if the frog can cross the river by landing on the last stone. Initially, the frog is on the first stone and assumes the first jump must be 1 unit.\\nIf the frog's last jump was k units, its next jump must be either k - 1, k, or k + 1 units. The frog can only jump in the forward direction.\\n\\xc2\\xa0\\nExample 1:\\nInput: stones = [0,1,3,5,6,8,12,17]\\nOutput: true\\nExplanation: The frog can jump to the last stone by jumping 1 unit to the 2nd stone, then 2 units to the 3rd stone, then 2 units to the 4th stone, then 3 units to the 6th stone, 4 units to the 7th stone, and 5 units to the 8th stone.\\n\\nExample 2:\\nInput: stones = [0,1,2,3,4,8,9,11]\\nOutput: false\\nExplanation: There is no way to jump to the last stone as the gap between the 5th and 6th stone is too large.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n2 <= stones.length <= 2000\\n0 <= stones[i] <= 231 - 1\\nstones[0] == 0\\nstones\\xc2\\xa0is sorted in a strictly increasing order.\\n\\n\""
    },
    {
        "URL": "https://leetcode.com/problems/sum-of-left-leaves",
        "Title": "Sum of Left Leaves ",
        "Description": "b'Given the root of a binary tree, return the sum of all left leaves.\\nA leaf is a node with no children. A left leaf is a leaf that is the left child of another node.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: root = [3,9,20,null,null,15,7]\\nOutput: 24\\nExplanation: There are two left leaves in the binary tree, with values 9 and 15 respectively.\\n\\nExample 2:\\nInput: root = [1]\\nOutput: 0\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of nodes in the tree is in the range [1, 1000].\\n-1000 <= Node.val <= 1000\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/convert-a-number-to-hexadecimal",
        "Title": "Convert a Number to Hexadecimal ",
        "Description": "b'Given an integer num, return a string representing its hexadecimal representation. For negative integers, two\\xe2\\x80\\x99s complement method is used.\\nAll the letters in the answer string should be lowercase characters, and there should not be any leading zeros in the answer except for the zero itself.\\nNote:\\xc2\\xa0You are not allowed to use any built-in library method to directly solve this problem.\\n\\xc2\\xa0\\nExample 1:\\nInput: num = 26\\nOutput: \"1a\"\\nExample 2:\\nInput: num = -1\\nOutput: \"ffffffff\"\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n-231 <= num <= 231 - 1\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/queue-reconstruction-by-height",
        "Title": "Queue Reconstruction by Height ",
        "Description": "b'You are given an array of people, people, which are the attributes of some people in a queue (not necessarily in order). Each people[i] = [hi, ki] represents the ith person of height hi with exactly ki other people in front who have a height greater than or equal to hi.\\nReconstruct and return the queue that is represented by the input array people. The returned queue should be formatted as an array queue, where queue[j] = [hj, kj] is the attributes of the jth person in the queue (queue[0] is the person at the front of the queue).\\n\\xc2\\xa0\\nExample 1:\\nInput: people = [[7,0],[4,4],[7,1],[5,0],[6,1],[5,2]]\\nOutput: [[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]]\\nExplanation:\\nPerson 0 has height 5 with no other people taller or the same height in front.\\nPerson 1 has height 7 with no other people taller or the same height in front.\\nPerson 2 has height 5 with two persons taller or the same height in front, which is person 0 and 1.\\nPerson 3 has height 6 with one person taller or the same height in front, which is person 1.\\nPerson 4 has height 4 with four people taller or the same height in front, which are people 0, 1, 2, and 3.\\nPerson 5 has height 7 with one person taller or the same height in front, which is person 1.\\nHence [[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]] is the reconstructed queue.\\n\\nExample 2:\\nInput: people = [[6,0],[5,0],[4,0],[3,2],[2,2],[1,4]]\\nOutput: [[4,0],[5,0],[2,2],[3,2],[1,4],[6,0]]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= people.length <= 2000\\n0 <= hi <= 106\\n0 <= ki < people.length\\nIt is guaranteed that the queue can be reconstructed.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/trapping-rain-water-ii",
        "Title": "Trapping Rain Water II ",
        "Description": "b'Given an m x n integer matrix heightMap representing the height of each unit cell in a 2D elevation map, return the volume of water it can trap after raining.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: heightMap = [[1,4,3,1,3,2],[3,2,1,3,2,4],[2,3,3,2,3,1]]\\nOutput: 4\\nExplanation: After the rain, water is trapped between the blocks.\\nWe have two small ponds 1 and 3 units trapped.\\nThe total volume of water trapped is 4.\\n\\nExample 2:\\n\\nInput: heightMap = [[3,3,3,3,3],[3,2,2,2,3],[3,2,1,2,3],[3,2,2,2,3],[3,3,3,3,3]]\\nOutput: 10\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nm == heightMap.length\\nn == heightMap[i].length\\n1 <= m, n <= 200\\n0 <= heightMap[i][j] <= 2 * 104\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/valid-word-abbreviation",
        "Title": "Valid Word Abbreviation ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/longest-palindrome",
        "Title": "Longest Palindrome ",
        "Description": "b'Given a string s which consists of lowercase or uppercase letters, return the length of the longest palindrome\\xc2\\xa0that can be built with those letters.\\nLetters are case sensitive, for example,\\xc2\\xa0\"Aa\" is not considered a palindrome here.\\n\\xc2\\xa0\\nExample 1:\\nInput: s = \"abccccdd\"\\nOutput: 7\\nExplanation: One longest palindrome that can be built is \"dccaccd\", whose length is 7.\\n\\nExample 2:\\nInput: s = \"a\"\\nOutput: 1\\nExplanation: The longest palindrome that can be built is \"a\", whose length is 1.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= s.length <= 2000\\ns consists of lowercase and/or uppercase English\\xc2\\xa0letters only.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/split-array-largest-sum",
        "Title": "Split Array Largest Sum ",
        "Description": "b'Given an array nums which consists of non-negative integers and an integer m, you can split the array into m non-empty continuous subarrays.\\nWrite an algorithm to minimize the largest sum among these m subarrays.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [7,2,5,10,8], m = 2\\nOutput: 18\\nExplanation:\\nThere are four ways to split nums into two subarrays.\\nThe best way is to split it into [7,2,5] and [10,8],\\nwhere the largest sum among the two subarrays is only 18.\\n\\nExample 2:\\nInput: nums = [1,2,3,4,5], m = 2\\nOutput: 9\\n\\nExample 3:\\nInput: nums = [1,4,4], m = 3\\nOutput: 4\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 1000\\n0 <= nums[i] <= 106\\n1 <= m <= min(50, nums.length)\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/minimum-unique-word-abbreviation",
        "Title": "Minimum Unique Word Abbreviation ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/fizz-buzz",
        "Title": "Fizz Buzz ",
        "Description": "b'Given an integer n, return a string array answer (1-indexed) where:\\n\\nanswer[i] == \"FizzBuzz\" if i is divisible by 3 and 5.\\nanswer[i] == \"Fizz\" if i is divisible by 3.\\nanswer[i] == \"Buzz\" if i is divisible by 5.\\nanswer[i] == i (as a string) if none of the above conditions are true.\\n\\n\\xc2\\xa0\\nExample 1:\\nInput: n = 3\\nOutput: [\"1\",\"2\",\"Fizz\"]\\nExample 2:\\nInput: n = 5\\nOutput: [\"1\",\"2\",\"Fizz\",\"4\",\"Buzz\"]\\nExample 3:\\nInput: n = 15\\nOutput: [\"1\",\"2\",\"Fizz\",\"4\",\"Buzz\",\"Fizz\",\"7\",\"8\",\"Fizz\",\"Buzz\",\"11\",\"Fizz\",\"13\",\"14\",\"FizzBuzz\"]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= n <= 104\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/arithmetic-slices",
        "Title": "Arithmetic Slices ",
        "Description": "b'An integer array is called arithmetic if it consists of at least three elements and if the difference between any two consecutive elements is the same.\\n\\nFor example, [1,3,5,7,9], [7,7,7,7], and [3,-1,-5,-9] are arithmetic sequences.\\n\\nGiven an integer array nums, return the number of arithmetic subarrays of nums.\\nA subarray is a contiguous subsequence of the array.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [1,2,3,4]\\nOutput: 3\\nExplanation: We have 3 arithmetic slices in nums: [1, 2, 3], [2, 3, 4] and [1,2,3,4] itself.\\n\\nExample 2:\\nInput: nums = [1]\\nOutput: 0\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 5000\\n-1000 <= nums[i] <= 1000\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/third-maximum-number",
        "Title": "Third Maximum Number ",
        "Description": "b\"Given an integer array nums, return the third distinct maximum number in this array. If the third maximum does not exist, return the maximum number.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [3,2,1]\\nOutput: 1\\nExplanation:\\nThe first distinct maximum is 3.\\nThe second distinct maximum is 2.\\nThe third distinct maximum is 1.\\n\\nExample 2:\\nInput: nums = [1,2]\\nOutput: 2\\nExplanation:\\nThe first distinct maximum is 2.\\nThe second distinct maximum is 1.\\nThe third distinct maximum does not exist, so the maximum (2) is returned instead.\\n\\nExample 3:\\nInput: nums = [2,2,3,1]\\nOutput: 1\\nExplanation:\\nThe first distinct maximum is 3.\\nThe second distinct maximum is 2 (both 2's are counted together since they have the same value).\\nThe third distinct maximum is 1.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 104\\n-231 <= nums[i] <= 231 - 1\\n\\n\\xc2\\xa0\\nFollow up: Can you find an O(n) solution?\""
    },
    {
        "URL": "https://leetcode.com/problems/add-strings",
        "Title": "Add Strings ",
        "Description": "b'Given two non-negative integers, num1 and num2 represented as string, return the sum of num1 and num2 as a string.\\nYou must solve the problem without using any built-in library for handling large integers (such as BigInteger). You must also not convert the inputs to integers directly.\\n\\xc2\\xa0\\nExample 1:\\nInput: num1 = \"11\", num2 = \"123\"\\nOutput: \"134\"\\n\\nExample 2:\\nInput: num1 = \"456\", num2 = \"77\"\\nOutput: \"533\"\\n\\nExample 3:\\nInput: num1 = \"0\", num2 = \"0\"\\nOutput: \"0\"\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= num1.length, num2.length <= 104\\nnum1 and num2 consist of only digits.\\nnum1 and num2 don\\'t have any leading zeros except for the zero itself.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/partition-equal-subset-sum",
        "Title": "Partition Equal Subset Sum ",
        "Description": "b'Given a non-empty array nums containing only positive integers, find if the array can be partitioned into two subsets such that the sum of elements in both subsets is equal.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [1,5,11,5]\\nOutput: true\\nExplanation: The array can be partitioned as [1, 5, 5] and [11].\\n\\nExample 2:\\nInput: nums = [1,2,3,5]\\nOutput: false\\nExplanation: The array cannot be partitioned into equal sum subsets.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 200\\n1 <= nums[i] <= 100\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/pacific-atlantic-water-flow",
        "Title": "Pacific Atlantic Water Flow ",
        "Description": "b\"There is an m x n rectangular island that borders both the Pacific Ocean and Atlantic Ocean. The Pacific Ocean touches the island's left and top edges, and the Atlantic Ocean touches the island's right and bottom edges.\\nThe island is partitioned into a grid of square cells. You are given an m x n integer matrix heights where heights[r][c] represents the height above sea level of the cell at coordinate (r, c).\\nThe island receives a lot of rain, and the rain water can flow to neighboring cells directly north, south, east, and west if the neighboring cell's height is less than or equal to the current cell's height. Water can flow from any cell adjacent to an ocean into the ocean.\\nReturn a 2D list of grid coordinates result where result[i] = [ri, ci] denotes that rain water can flow from cell (ri, ci) to both the Pacific and Atlantic oceans.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: heights = [[1,2,2,3,5],[3,2,3,4,4],[2,4,5,3,1],[6,7,1,4,5],[5,1,1,2,4]]\\nOutput: [[0,4],[1,3],[1,4],[2,2],[3,0],[3,1],[4,0]]\\n\\nExample 2:\\nInput: heights = [[2,1],[1,2]]\\nOutput: [[0,0],[0,1],[1,0],[1,1]]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nm == heights.length\\nn == heights[r].length\\n1 <= m, n <= 200\\n0 <= heights[r][c] <= 105\\n\\n\""
    },
    {
        "URL": "https://leetcode.com/problems/sentence-screen-fitting",
        "Title": "Sentence Screen Fitting ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/battleships-in-a-board",
        "Title": "Battleships in a Board ",
        "Description": "b'Given an m x n matrix board where each cell is a battleship \\'X\\' or empty \\'.\\', return the number of the battleships on board.\\nBattleships can only be placed horizontally or vertically on board. In other words, they can only be made of the shape 1 x k (1 row, k columns) or k x 1 (k rows, 1 column), where k can be of any size. At least one horizontal or vertical cell separates between two battleships (i.e., there are no adjacent battleships).\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: board = [[\"X\",\".\",\".\",\"X\"],[\".\",\".\",\".\",\"X\"],[\".\",\".\",\".\",\"X\"]]\\nOutput: 2\\n\\nExample 2:\\nInput: board = [[\".\"]]\\nOutput: 0\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nm == board.length\\nn == board[i].length\\n1 <= m, n <= 200\\nboard[i][j] is either \\'.\\' or \\'X\\'.\\n\\n\\xc2\\xa0\\nFollow up: Could you do it in one-pass, using only O(1) extra memory and without modifying the values board?\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/strong-password-checker",
        "Title": "Strong Password Checker ",
        "Description": "b'A password is considered strong if the below conditions are all met:\\n\\nIt has at least 6 characters and at most 20 characters.\\nIt contains at least one lowercase letter, at least one uppercase letter, and at least one digit.\\nIt does\\xc2\\xa0not contain three repeating characters in a row (i.e.,\\xc2\\xa0\"...aaa...\" is weak, but \"...aa...a...\" is strong, assuming other conditions are met).\\n\\nGiven a string password, return the minimum number of steps required to make password strong. if password is already strong, return 0.\\nIn one step, you can:\\n\\nInsert one character to password,\\nDelete one character from password, or\\nReplace\\xc2\\xa0one character of password with another character.\\n\\n\\xc2\\xa0\\nExample 1:\\nInput: password = \"a\"\\nOutput: 5\\nExample 2:\\nInput: password = \"aA1\"\\nOutput: 3\\nExample 3:\\nInput: password = \"1337C0d3\"\\nOutput: 0\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= password.length <= 50\\npassword consists of letters, digits, dot\\xc2\\xa0\\'.\\' or exclamation mark \\'!\\'.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/maximum-xor-of-two-numbers-in-an-array",
        "Title": "Maximum XOR of Two Numbers in an Array ",
        "Description": "b'Given an integer array nums, return the maximum result of nums[i] XOR nums[j], where 0 <= i <= j < n.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [3,10,5,25,2,8]\\nOutput: 28\\nExplanation: The maximum result is 5 XOR 25 = 28.\\n\\nExample 2:\\nInput: nums = [14,70,53,83,49,91,36,80,92,51,66,70]\\nOutput: 127\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 2 * 105\\n0 <= nums[i] <= 231 - 1\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/valid-word-square",
        "Title": "Valid Word Square ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/reconstruct-original-digits-from-english",
        "Title": "Reconstruct Original Digits from English ",
        "Description": "b'Given a string s containing an out-of-order English representation of digits 0-9, return the digits in ascending order.\\n\\xc2\\xa0\\nExample 1:\\nInput: s = \"owoztneoer\"\\nOutput: \"012\"\\nExample 2:\\nInput: s = \"fviefuro\"\\nOutput: \"45\"\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= s.length <= 105\\ns[i] is one of the characters [\"e\",\"g\",\"f\",\"i\",\"h\",\"o\",\"n\",\"s\",\"r\",\"u\",\"t\",\"w\",\"v\",\"x\",\"z\"].\\ns is guaranteed to be valid.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/longest-repeating-character-replacement",
        "Title": "Longest Repeating Character Replacement ",
        "Description": "b'You are given a string s and an integer k. You can choose any character of the string and change it to any other uppercase English character. You can perform this operation at most k times.\\nReturn the length of the longest substring containing the same letter you can get after performing the above operations.\\n\\xc2\\xa0\\nExample 1:\\nInput: s = \"ABAB\", k = 2\\nOutput: 4\\nExplanation: Replace the two \\'A\\'s with two \\'B\\'s or vice versa.\\n\\nExample 2:\\nInput: s = \"AABABBA\", k = 1\\nOutput: 4\\nExplanation: Replace the one \\'A\\' in the middle with \\'B\\' and form \"AABBBBA\".\\nThe substring \"BBBB\" has the longest repeating letters, which is 4.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= s.length <= 105\\ns consists of only uppercase English letters.\\n0 <= k <= s.length\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/word-squares",
        "Title": "Word Squares ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/convert-binary-search-tree-to-sorted-doubly-linked-list",
        "Title": "Convert Binary Search Tree to Sorted Doubly Linked List ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/construct-quad-tree",
        "Title": "Construct Quad Tree ",
        "Description": "b\"Given a n * n matrix grid of 0's and 1's only. We want to represent the grid with a Quad-Tree.\\nReturn the root of the Quad-Tree representing the grid.\\nNotice that you can assign the value of a node to True or False when isLeaf is False, and both are accepted in the answer.\\nA Quad-Tree is a tree data structure in which each internal node has exactly four children. Besides, each node has two attributes:\\n\\nval: True if the node represents a grid of 1's or False if the node represents a grid of 0's.\\nisLeaf: True if the node is leaf node on the tree or False if the node has the four children.\\n\\nclass Node {\\n    public boolean val;\\n    public boolean isLeaf;\\n    public Node topLeft;\\n    public Node topRight;\\n    public Node bottomLeft;\\n    public Node bottomRight;\\n}\\nWe can construct a Quad-Tree from a two-dimensional area using the following steps:\\n\\nIf the current grid has the same value (i.e all 1's or all 0's) set isLeaf True and set val to the value of the grid and set the four children to Null and stop.\\nIf the current grid has different values, set isLeaf to False and set val to any value and divide the current grid into four sub-grids as shown in the photo.\\nRecurse for each of the children with the proper sub-grid.\\n\\n\\nIf you want to know more about the Quad-Tree, you can refer to the wiki.\\nQuad-Tree format:\\nThe output represents the serialized format of a Quad-Tree using level order traversal, where null signifies a path terminator where no node exists below.\\nIt is very similar to the serialization of the binary tree. The only difference is that the node is represented as a list [isLeaf, val].\\nIf the value of isLeaf or val is True we represent it as 1 in the list [isLeaf, val] and if the value of isLeaf or val is False we represent it as 0.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: grid = [[0,1],[1,0]]\\nOutput: [[0,1],[1,0],[1,1],[1,1],[1,0]]\\nExplanation: The explanation of this example is shown below:\\nNotice that 0 represnts False and 1 represents True in the photo representing the Quad-Tree.\\n\\n\\nExample 2:\\n\\nInput: grid = [[1,1,1,1,0,0,0,0],[1,1,1,1,0,0,0,0],[1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1],[1,1,1,1,0,0,0,0],[1,1,1,1,0,0,0,0],[1,1,1,1,0,0,0,0],[1,1,1,1,0,0,0,0]]\\nOutput: [[0,1],[1,1],[0,1],[1,1],[1,0],null,null,null,null,[1,0],[1,0],[1,1],[1,1]]\\nExplanation: All values in the grid are not the same. We divide the grid into four sub-grids.\\nThe topLeft, bottomLeft and bottomRight each has the same value.\\nThe topRight have different values so we divide it into 4 sub-grids where each has the same value.\\nExplanation is shown in the photo below:\\n\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nn == grid.length == grid[i].length\\nn == 2x where 0 <= x <= 6\\n\\n\""
    },
    {
        "URL": "https://leetcode.com/problems/serialize-and-deserialize-n-ary-tree",
        "Title": "Serialize and Deserialize N-ary Tree ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/n-ary-tree-level-order-traversal",
        "Title": "N-ary Tree Level Order Traversal ",
        "Description": "b\"Given an n-ary tree, return the level order traversal of its nodes' values.\\nNary-Tree input serialization is represented in their level order traversal, each group of children is separated by the null value (See examples).\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: root = [1,null,3,2,4,null,5,6]\\nOutput: [[1],[3,2,4],[5,6]]\\n\\nExample 2:\\n\\nInput: root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]\\nOutput: [[1],[2,3,4,5],[6,7,8,9,10],[11,12,13],[14]]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe height of the n-ary tree is less than or equal to 1000\\nThe total number of nodes is between [0, 104]\\n\\n\""
    },
    {
        "URL": "https://leetcode.com/problems/flatten-a-multilevel-doubly-linked-list",
        "Title": "Flatten a Multilevel Doubly Linked List ",
        "Description": "b'You are given a doubly linked list, which contains nodes that have a next pointer, a previous pointer, and an additional child pointer. This child pointer may or may not point to a separate doubly linked list, also containing these special nodes. These child lists may have one or more children of their own, and so on, to produce a multilevel data structure as shown in the example below.\\nGiven the head of the first level of the list, flatten the list so that all the nodes appear in a single-level, doubly linked list. Let curr be a node with a child list. The nodes in the child list should appear after curr and before curr.next in the flattened list.\\nReturn the head of the flattened list. The nodes in the list must have all of their child pointers set to null.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: head = [1,2,3,4,5,6,null,null,null,7,8,9,10,null,null,11,12]\\nOutput: [1,2,3,7,8,11,12,9,10,4,5,6]\\nExplanation: The multilevel linked list in the input is shown.\\nAfter flattening the multilevel linked list it becomes:\\n\\n\\nExample 2:\\n\\nInput: head = [1,2,null,3]\\nOutput: [1,3,2]\\nExplanation: The multilevel linked list in the input is shown.\\nAfter flattening the multilevel linked list it becomes:\\n\\n\\nExample 3:\\nInput: head = []\\nOutput: []\\nExplanation: There could be empty list in the input.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of Nodes will not exceed 1000.\\n1 <= Node.val <= 105\\n\\n\\xc2\\xa0\\nHow the multilevel linked list is represented in test cases:\\nWe use the multilevel linked list from Example 1 above:\\n 1---2---3---4---5---6--NULL\\n         |\\n         7---8---9---10--NULL\\n             |\\n             11--12--NULL\\nThe serialization of each level is as follows:\\n[1,2,3,4,5,6,null]\\n[7,8,9,10,null]\\n[11,12,null]\\n\\nTo serialize all levels together, we will add nulls in each level to signify no node connects to the upper node of the previous level. The serialization becomes:\\n[1,    2,    3, 4, 5, 6, null]\\n             |\\n[null, null, 7,    8, 9, 10, null]\\n                   |\\n[            null, 11, 12, null]\\n\\nMerging the serialization of each level and removing trailing nulls we obtain:\\n[1,2,3,4,5,6,null,null,null,7,8,9,10,null,null,11,12]\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/encode-n-ary-tree-to-binary-tree",
        "Title": "Encode N-ary Tree to Binary Tree ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/all-oone-data-structure",
        "Title": "All O`one Data Structure ",
        "Description": "b'Design a data structure to store the strings\\' count with the ability to return the strings with minimum and maximum counts.\\nImplement the AllOne class:\\n\\nAllOne() Initializes the object of the data structure.\\ninc(String key) Increments the count of the string key by 1. If key does not exist in the data structure, insert it with count 1.\\ndec(String key) Decrements the count of the string key by 1. If the count of key is 0 after the decrement, remove it from the data structure. It is guaranteed that key exists in the data structure before the decrement.\\ngetMaxKey() Returns one of the keys with the maximal count. If no element exists, return an empty string \"\".\\ngetMinKey() Returns one of the keys with the minimum count. If no element exists, return an empty string \"\".\\n\\nNote that each function must run in O(1) average time complexity.\\n\\xc2\\xa0\\nExample 1:\\nInput\\n[\"AllOne\", \"inc\", \"inc\", \"getMaxKey\", \"getMinKey\", \"inc\", \"getMaxKey\", \"getMinKey\"]\\n[[], [\"hello\"], [\"hello\"], [], [], [\"leet\"], [], []]\\nOutput\\n[null, null, null, \"hello\", \"hello\", null, \"hello\", \"leet\"]\\n\\nExplanation\\nAllOne allOne = new AllOne();\\nallOne.inc(\"hello\");\\nallOne.inc(\"hello\");\\nallOne.getMaxKey(); // return \"hello\"\\nallOne.getMinKey(); // return \"hello\"\\nallOne.inc(\"leet\");\\nallOne.getMaxKey(); // return \"hello\"\\nallOne.getMinKey(); // return \"leet\"\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= key.length <= 10\\nkey consists of lowercase English letters.\\nIt is guaranteed that for each call to dec, key is existing in the data structure.\\nAt most 5 * 104\\xc2\\xa0calls will be made to inc, dec, getMaxKey, and getMinKey.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/minimum-genetic-mutation",
        "Title": "Minimum Genetic Mutation ",
        "Description": "b'A gene string can be represented by an 8-character long string, with choices from \\'A\\', \\'C\\', \\'G\\', and \\'T\\'.\\nSuppose we need to investigate a mutation from a gene string start to a gene string end where one mutation is defined as one single character changed in the gene string.\\n\\nFor example, \"AACCGGTT\" --> \"AACCGGTA\" is one mutation.\\n\\nThere is also a gene bank bank that records all the valid gene mutations. A gene must be in bank to make it a valid gene string.\\nGiven the two gene strings start and end and the gene bank bank, return the minimum number of mutations needed to mutate from start to end. If there is no such a mutation, return -1.\\nNote that the starting point is assumed to be valid, so it might not be included in the bank.\\n\\xc2\\xa0\\nExample 1:\\nInput: start = \"AACCGGTT\", end = \"AACCGGTA\", bank = [\"AACCGGTA\"]\\nOutput: 1\\n\\nExample 2:\\nInput: start = \"AACCGGTT\", end = \"AAACGGTA\", bank = [\"AACCGGTA\",\"AACCGCTA\",\"AAACGGTA\"]\\nOutput: 2\\n\\nExample 3:\\nInput: start = \"AAAAACCC\", end = \"AACCCCCC\", bank = [\"AAAACCCC\",\"AAACCCCC\",\"AACCCCCC\"]\\nOutput: 3\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nstart.length == 8\\nend.length == 8\\n0 <= bank.length <= 10\\nbank[i].length == 8\\nstart, end, and bank[i] consist of only the characters [\\'A\\', \\'C\\', \\'G\\', \\'T\\'].\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/number-of-segments-in-a-string",
        "Title": "Number of Segments in a String ",
        "Description": "b'Given a string s, return the number of segments in the string.\\nA segment is defined to be a contiguous sequence of non-space characters.\\n\\xc2\\xa0\\nExample 1:\\nInput: s = \"Hello, my name is John\"\\nOutput: 5\\nExplanation: The five segments are [\"Hello,\", \"my\", \"name\", \"is\", \"John\"]\\n\\nExample 2:\\nInput: s = \"Hello\"\\nOutput: 1\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n0 <= s.length <= 300\\ns consists of lowercase and uppercase English letters, digits, or one of the following characters \"!@#$%^&*()_+-=\\',.:\".\\nThe only space character in s is \\' \\'.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/non-overlapping-intervals",
        "Title": "Non-overlapping Intervals ",
        "Description": "b\"Given an array of intervals intervals where intervals[i] = [starti, endi], return the minimum number of intervals you need to remove to make the rest of the intervals non-overlapping.\\n\\xc2\\xa0\\nExample 1:\\nInput: intervals = [[1,2],[2,3],[3,4],[1,3]]\\nOutput: 1\\nExplanation: [1,3] can be removed and the rest of the intervals are non-overlapping.\\n\\nExample 2:\\nInput: intervals = [[1,2],[1,2],[1,2]]\\nOutput: 2\\nExplanation: You need to remove two [1,2] to make the rest of the intervals non-overlapping.\\n\\nExample 3:\\nInput: intervals = [[1,2],[2,3]]\\nOutput: 0\\nExplanation: You don't need to remove any of the intervals since they're already non-overlapping.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= intervals.length <= 105\\nintervals[i].length == 2\\n-5 * 104 <= starti < endi <= 5 * 104\\n\\n\""
    },
    {
        "URL": "https://leetcode.com/problems/find-right-interval",
        "Title": "Find Right Interval ",
        "Description": "b'You are given an array of intervals, where intervals[i] = [starti, endi] and each starti is unique.\\nThe right interval for an interval i is an interval j such that startj >= endi and startj is minimized. Note that i may equal j.\\nReturn an array of right interval indices for each interval i. If no right interval exists for interval i, then put -1 at index i.\\n\\xc2\\xa0\\nExample 1:\\nInput: intervals = [[1,2]]\\nOutput: [-1]\\nExplanation: There is only one interval in the collection, so it outputs -1.\\n\\nExample 2:\\nInput: intervals = [[3,4],[2,3],[1,2]]\\nOutput: [-1,0,1]\\nExplanation: There is no right interval for [3,4].\\nThe right interval for [2,3] is [3,4] since start0 = 3 is the smallest start that is >= end1 = 3.\\nThe right interval for [1,2] is [2,3] since start1 = 2 is the smallest start that is >= end2 = 2.\\n\\nExample 3:\\nInput: intervals = [[1,4],[2,3],[3,4]]\\nOutput: [-1,2,-1]\\nExplanation: There is no right interval for [1,4] and [3,4].\\nThe right interval for [2,3] is [3,4] since start2 = 3 is the smallest start that is >= end1 = 3.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= intervals.length <= 2 * 104\\nintervals[i].length == 2\\n-106 <= starti <= endi <= 106\\nThe start point of each interval is unique.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/path-sum-iii",
        "Title": "Path Sum III ",
        "Description": "b'Given the root of a binary tree and an integer targetSum, return the number of paths where the sum of the values\\xc2\\xa0along the path equals\\xc2\\xa0targetSum.\\nThe path does not need to start or end at the root or a leaf, but it must go downwards (i.e., traveling only from parent nodes to child nodes).\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: root = [10,5,-3,3,2,null,11,3,-2,null,1], targetSum = 8\\nOutput: 3\\nExplanation: The paths that sum to 8 are shown.\\n\\nExample 2:\\nInput: root = [5,4,8,11,null,13,4,7,2,null,null,5,1], targetSum = 22\\nOutput: 3\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of nodes in the tree is in the range [0, 1000].\\n-109 <= Node.val <= 109\\n-1000 <= targetSum <= 1000\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/find-all-anagrams-in-a-string",
        "Title": "Find All Anagrams in a String ",
        "Description": "b'Given two strings s and p, return an array of all the start indices of p\\'s anagrams in s. You may return the answer in any order.\\nAn Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.\\n\\xc2\\xa0\\nExample 1:\\nInput: s = \"cbaebabacd\", p = \"abc\"\\nOutput: [0,6]\\nExplanation:\\nThe substring with start index = 0 is \"cba\", which is an anagram of \"abc\".\\nThe substring with start index = 6 is \"bac\", which is an anagram of \"abc\".\\n\\nExample 2:\\nInput: s = \"abab\", p = \"ab\"\\nOutput: [0,1,2]\\nExplanation:\\nThe substring with start index = 0 is \"ab\", which is an anagram of \"ab\".\\nThe substring with start index = 1 is \"ba\", which is an anagram of \"ab\".\\nThe substring with start index = 2 is \"ab\", which is an anagram of \"ab\".\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= s.length, p.length <= 3 * 104\\ns and p consist of lowercase English letters.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/ternary-expression-parser",
        "Title": "Ternary Expression Parser ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/k-th-smallest-in-lexicographical-order",
        "Title": "K-th Smallest in Lexicographical Order ",
        "Description": "b'Given two integers n and k, return the kth lexicographically smallest integer in the range [1, n].\\n\\xc2\\xa0\\nExample 1:\\nInput: n = 13, k = 2\\nOutput: 10\\nExplanation: The lexicographical order is [1, 10, 11, 12, 13, 2, 3, 4, 5, 6, 7, 8, 9], so the second smallest number is 10.\\n\\nExample 2:\\nInput: n = 1, k = 1\\nOutput: 1\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= k <= n <= 109\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/arranging-coins",
        "Title": "Arranging Coins ",
        "Description": "b'You have n coins and you want to build a staircase with these coins. The staircase consists of k rows where the ith row has exactly i coins. The last row of the staircase may be incomplete.\\nGiven the integer n, return the number of complete rows of the staircase you will build.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: n = 5\\nOutput: 2\\nExplanation: Because the 3rd row is incomplete, we return 2.\\n\\nExample 2:\\n\\nInput: n = 8\\nOutput: 3\\nExplanation: Because the 4th row is incomplete, we return 3.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= n <= 231 - 1\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/find-all-duplicates-in-an-array",
        "Title": "Find All Duplicates in an Array ",
        "Description": "b'Given an integer array nums of length n where all the integers of nums are in the range [1, n] and each integer appears once or twice, return an array of all the integers that appears twice.\\nYou must write an algorithm that runs in\\xc2\\xa0O(n)\\xc2\\xa0time and uses only constant extra space.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [4,3,2,7,8,2,3,1]\\nOutput: [2,3]\\nExample 2:\\nInput: nums = [1,1,2]\\nOutput: [1]\\nExample 3:\\nInput: nums = [1]\\nOutput: []\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nn == nums.length\\n1 <= n <= 105\\n1 <= nums[i] <= n\\nEach element in nums appears once or twice.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/string-compression",
        "Title": "String Compression ",
        "Description": "b'Given an array of characters chars, compress it using the following algorithm:\\nBegin with an empty string s. For each group of consecutive repeating characters in chars:\\n\\nIf the group\\'s length is 1, append the character to s.\\nOtherwise, append the character followed by the group\\'s length.\\n\\nThe compressed string s should not be returned separately, but instead, be stored in the input character array chars. Note that group lengths that are 10 or longer will be split into multiple characters in chars.\\nAfter you are done modifying the input array, return the new length of the array.\\nYou must write an algorithm that uses only constant extra space.\\n\\xc2\\xa0\\nExample 1:\\nInput: chars = [\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"]\\nOutput: Return 6, and the first 6 characters of the input array should be: [\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"]\\nExplanation: The groups are \"aa\", \"bb\", and \"ccc\". This compresses to \"a2b2c3\".\\n\\nExample 2:\\nInput: chars = [\"a\"]\\nOutput: Return 1, and the first character of the input array should be: [\"a\"]\\nExplanation: The only group is \"a\", which remains uncompressed since it\\'s a single character.\\n\\nExample 3:\\nInput: chars = [\"a\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\"]\\nOutput: Return 4, and the first 4 characters of the input array should be: [\"a\",\"b\",\"1\",\"2\"].\\nExplanation: The groups are \"a\" and \"bbbbbbbbbbbb\". This compresses to \"ab12\".\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= chars.length <= 2000\\nchars[i] is a lowercase English letter, uppercase English letter, digit, or symbol.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/sequence-reconstruction",
        "Title": "Sequence Reconstruction ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/add-two-numbers-ii",
        "Title": "Add Two Numbers II ",
        "Description": "b'You are given two non-empty linked lists representing two non-negative integers. The most significant digit comes first and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.\\nYou may assume the two numbers do not contain any leading zero, except the number 0 itself.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: l1 = [7,2,4,3], l2 = [5,6,4]\\nOutput: [7,8,0,7]\\n\\nExample 2:\\nInput: l1 = [2,4,3], l2 = [5,6,4]\\nOutput: [8,0,7]\\n\\nExample 3:\\nInput: l1 = [0], l2 = [0]\\nOutput: [0]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of nodes in each linked list is in the range [1, 100].\\n0 <= Node.val <= 9\\nIt is guaranteed that the list represents a number that does not have leading zeros.\\n\\n\\xc2\\xa0\\nFollow up:\\xc2\\xa0Could you solve it without reversing the input lists?\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/arithmetic-slices-ii-subsequence",
        "Title": "Arithmetic Slices II - Subsequence ",
        "Description": "b'Given an integer array nums, return the number of all the arithmetic subsequences of nums.\\nA sequence of numbers is called arithmetic if it consists of at least three elements and if the difference between any two consecutive elements is the same.\\n\\nFor example, [1, 3, 5, 7, 9], [7, 7, 7, 7], and [3, -1, -5, -9] are arithmetic sequences.\\nFor example, [1, 1, 2, 5, 7] is not an arithmetic sequence.\\n\\nA subsequence of an array is a sequence that can be formed by removing some elements (possibly none) of the array.\\n\\nFor example, [2,5,10] is a subsequence of [1,2,1,2,4,1,5,10].\\n\\nThe test cases are generated so that the answer fits in 32-bit integer.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [2,4,6,8,10]\\nOutput: 7\\nExplanation: All arithmetic subsequence slices are:\\n[2,4,6]\\n[4,6,8]\\n[6,8,10]\\n[2,4,6,8]\\n[4,6,8,10]\\n[2,4,6,8,10]\\n[2,6,10]\\n\\nExample 2:\\nInput: nums = [7,7,7,7,7]\\nOutput: 16\\nExplanation: Any subsequence of this array is arithmetic.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1\\xc2\\xa0 <= nums.length <= 1000\\n-231 <= nums[i] <= 231 - 1\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/number-of-boomerangs",
        "Title": "Number of Boomerangs ",
        "Description": "b'You are given n points in the plane that are all distinct, where points[i] = [xi, yi]. A boomerang is a tuple of points (i, j, k) such that the distance between i and j equals the distance between i and k (the order of the tuple matters).\\nReturn the number of boomerangs.\\n\\xc2\\xa0\\nExample 1:\\nInput: points = [[0,0],[1,0],[2,0]]\\nOutput: 2\\nExplanation: The two boomerangs are [[1,0],[0,0],[2,0]] and [[1,0],[2,0],[0,0]].\\n\\nExample 2:\\nInput: points = [[1,1],[2,2],[3,3]]\\nOutput: 2\\n\\nExample 3:\\nInput: points = [[1,1]]\\nOutput: 0\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nn == points.length\\n1 <= n <= 500\\npoints[i].length == 2\\n-104 <= xi, yi <= 104\\nAll the points are unique.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/find-all-numbers-disappeared-in-an-array",
        "Title": "Find All Numbers Disappeared in an Array ",
        "Description": "b'Given an array nums of n integers where nums[i] is in the range [1, n], return an array of all the integers in the range [1, n] that do not appear in nums.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [4,3,2,7,8,2,3,1]\\nOutput: [5,6]\\nExample 2:\\nInput: nums = [1,1]\\nOutput: [2]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nn == nums.length\\n1 <= n <= 105\\n1 <= nums[i] <= n\\n\\n\\xc2\\xa0\\nFollow up: Could you do it without extra space and in O(n) runtime? You may assume the returned list does not count as extra space.\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/serialize-and-deserialize-bst",
        "Title": "Serialize and Deserialize BST ",
        "Description": "b'Serialization is converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.\\nDesign an algorithm to serialize and deserialize a binary search tree. There is no restriction on how your serialization/deserialization algorithm should work. You need to ensure that a binary search tree can be serialized to a string, and this string can be deserialized to the original tree structure.\\nThe encoded string should be as compact as possible.\\n\\xc2\\xa0\\nExample 1:\\nInput: root = [2,1,3]\\nOutput: [2,1,3]\\nExample 2:\\nInput: root = []\\nOutput: []\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of nodes in the tree is in the range [0, 104].\\n0 <= Node.val <= 104\\nThe input tree is guaranteed to be a binary search tree.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/delete-node-in-a-bst",
        "Title": "Delete Node in a BST ",
        "Description": "b\"Given a root node reference of a BST and a key, delete the node with the given key in the BST. Return the root node reference (possibly updated) of the BST.\\nBasically, the deletion can be divided into two stages:\\n\\nSearch for a node to remove.\\nIf the node is found, delete the node.\\n\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: root = [5,3,6,2,4,null,7], key = 3\\nOutput: [5,4,6,2,null,null,7]\\nExplanation: Given key to delete is 3. So we find the node with value 3 and delete it.\\nOne valid answer is [5,4,6,2,null,null,7], shown in the above BST.\\nPlease notice that another valid answer is [5,2,6,null,4,null,7] and it's also accepted.\\n\\n\\nExample 2:\\nInput: root = [5,3,6,2,4,null,7], key = 0\\nOutput: [5,3,6,2,4,null,7]\\nExplanation: The tree does not contain a node with value = 0.\\n\\nExample 3:\\nInput: root = [], key = 0\\nOutput: []\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of nodes in the tree is in the range [0, 104].\\n-105 <= Node.val <= 105\\nEach node has a unique value.\\nroot is a valid binary search tree.\\n-105 <= key <= 105\\n\\n\\xc2\\xa0\\nFollow up: Could you solve it with time complexity O(height of tree)?\\n\""
    },
    {
        "URL": "https://leetcode.com/problems/sort-characters-by-frequency",
        "Title": "Sort Characters By Frequency ",
        "Description": "b'Given a string s, sort it in decreasing order based on the frequency of the characters. The frequency of a character is the number of times it appears in the string.\\nReturn the sorted string. If there are multiple answers, return any of them.\\n\\xc2\\xa0\\nExample 1:\\nInput: s = \"tree\"\\nOutput: \"eert\"\\nExplanation: \\'e\\' appears twice while \\'r\\' and \\'t\\' both appear once.\\nSo \\'e\\' must appear before both \\'r\\' and \\'t\\'. Therefore \"eetr\" is also a valid answer.\\n\\nExample 2:\\nInput: s = \"cccaaa\"\\nOutput: \"aaaccc\"\\nExplanation: Both \\'c\\' and \\'a\\' appear three times, so both \"cccaaa\" and \"aaaccc\" are valid answers.\\nNote that \"cacaca\" is incorrect, as the same characters must be together.\\n\\nExample 3:\\nInput: s = \"Aabb\"\\nOutput: \"bbAa\"\\nExplanation: \"bbaA\" is also a valid answer, but \"Aabb\" is incorrect.\\nNote that \\'A\\' and \\'a\\' are treated as two different characters.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= s.length <= 5 * 105\\ns consists of uppercase and lowercase English letters and digits.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/minimum-number-of-arrows-to-burst-balloons",
        "Title": "Minimum Number of Arrows to Burst Balloons ",
        "Description": "b'There are some spherical balloons taped onto a flat wall that represents the XY-plane. The balloons are represented as a 2D integer array points where points[i] = [xstart, xend] denotes a balloon whose horizontal diameter stretches between xstart and xend. You do not know the exact y-coordinates of the balloons.\\nArrows can be shot up directly vertically (in the positive y-direction) from different points along the x-axis. A balloon with xstart and xend is burst by an arrow shot at x if xstart <= x <= xend. There is no limit to the number of arrows that can be shot. A shot arrow keeps traveling up infinitely, bursting any balloons in its path.\\nGiven the array points, return the minimum number of arrows that must be shot to burst all balloons.\\n\\xc2\\xa0\\nExample 1:\\nInput: points = [[10,16],[2,8],[1,6],[7,12]]\\nOutput: 2\\nExplanation: The balloons can be burst by 2 arrows:\\n- Shoot an arrow at x = 6, bursting the balloons [2,8] and [1,6].\\n- Shoot an arrow at x = 11, bursting the balloons [10,16] and [7,12].\\n\\nExample 2:\\nInput: points = [[1,2],[3,4],[5,6],[7,8]]\\nOutput: 4\\nExplanation: One arrow needs to be shot for each balloon for a total of 4 arrows.\\n\\nExample 3:\\nInput: points = [[1,2],[2,3],[3,4],[4,5]]\\nOutput: 2\\nExplanation: The balloons can be burst by 2 arrows:\\n- Shoot an arrow at x = 2, bursting the balloons [1,2] and [2,3].\\n- Shoot an arrow at x = 4, bursting the balloons [3,4] and [4,5].\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= points.length <= 105\\npoints[i].length == 2\\n-231 <= xstart < xend <= 231 - 1\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/minimum-moves-to-equal-array-elements",
        "Title": "Minimum Moves to Equal Array Elements ",
        "Description": "b'Given an integer array nums of size n, return the minimum number of moves required to make all array elements equal.\\nIn one move, you can increment n - 1 elements of the array by 1.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [1,2,3]\\nOutput: 3\\nExplanation: Only three moves are needed (remember each move increments two elements):\\n[1,2,3]  =>  [2,3,3]  =>  [3,4,3]  =>  [4,4,4]\\n\\nExample 2:\\nInput: nums = [1,1,1]\\nOutput: 0\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nn == nums.length\\n1 <= nums.length <= 105\\n-109 <= nums[i] <= 109\\nThe answer is guaranteed to fit in a 32-bit integer.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/4sum-ii",
        "Title": "4Sum II ",
        "Description": "b'Given four integer arrays nums1, nums2, nums3, and nums4 all of length n, return the number of tuples (i, j, k, l) such that:\\n\\n0 <= i, j, k, l < n\\nnums1[i] + nums2[j] + nums3[k] + nums4[l] == 0\\n\\n\\xc2\\xa0\\nExample 1:\\nInput: nums1 = [1,2], nums2 = [-2,-1], nums3 = [-1,2], nums4 = [0,2]\\nOutput: 2\\nExplanation:\\nThe two tuples are:\\n1. (0, 0, 0, 1) -> nums1[0] + nums2[0] + nums3[0] + nums4[1] = 1 + (-2) + (-1) + 2 = 0\\n2. (1, 1, 0, 0) -> nums1[1] + nums2[1] + nums3[0] + nums4[0] = 2 + (-1) + (-1) + 0 = 0\\n\\nExample 2:\\nInput: nums1 = [0], nums2 = [0], nums3 = [0], nums4 = [0]\\nOutput: 1\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nn == nums1.length\\nn == nums2.length\\nn == nums3.length\\nn == nums4.length\\n1 <= n <= 200\\n-228 <= nums1[i], nums2[i], nums3[i], nums4[i] <= 228\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/assign-cookies",
        "Title": "Assign Cookies ",
        "Description": "b'Assume you are an awesome parent and want to give your children some cookies. But, you should give each child at most one cookie.\\nEach child i has a greed factor g[i], which is the minimum size of a cookie that the child will be content with; and each cookie j has a size s[j]. If s[j] >= g[i], we can assign the cookie j to the child i, and the child i will be content. Your goal is to maximize the number of your content children and output the maximum number.\\n\\xc2\\xa0\\nExample 1:\\nInput: g = [1,2,3], s = [1,1]\\nOutput: 1\\nExplanation: You have 3 children and 2 cookies. The greed factors of 3 children are 1, 2, 3. \\nAnd even though you have 2 cookies, since their size is both 1, you could only make the child whose greed factor is 1 content.\\nYou need to output 1.\\n\\nExample 2:\\nInput: g = [1,2], s = [1,2,3]\\nOutput: 2\\nExplanation: You have 2 children and 3 cookies. The greed factors of 2 children are 1, 2. \\nYou have 3 cookies and their sizes are big enough to gratify all of the children, \\nYou need to output 2.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= g.length <= 3 * 104\\n0 <= s.length <= 3 * 104\\n1 <= g[i], s[j] <= 231 - 1\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/132-pattern",
        "Title": "132 Pattern ",
        "Description": "b'Given an array of n integers nums, a 132 pattern is a subsequence of three integers nums[i], nums[j] and nums[k] such that i < j < k and nums[i] < nums[k] < nums[j].\\nReturn true if there is a 132 pattern in nums, otherwise, return false.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [1,2,3,4]\\nOutput: false\\nExplanation: There is no 132 pattern in the sequence.\\n\\nExample 2:\\nInput: nums = [3,1,4,2]\\nOutput: true\\nExplanation: There is a 132 pattern in the sequence: [1, 4, 2].\\n\\nExample 3:\\nInput: nums = [-1,3,2,0]\\nOutput: true\\nExplanation: There are three 132 patterns in the sequence: [-1, 3, 2], [-1, 3, 0] and [-1, 2, 0].\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nn == nums.length\\n1 <= n <= 2 * 105\\n-109 <= nums[i] <= 109\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/circular-array-loop",
        "Title": "Circular Array Loop ",
        "Description": "b\"You are playing a game involving a circular array of non-zero integers nums. Each nums[i] denotes the number of indices forward/backward you must move if you are located at index i:\\n\\nIf nums[i] is positive, move nums[i] steps forward, and\\nIf nums[i] is negative, move nums[i] steps backward.\\n\\nSince the array is circular, you may assume that moving forward from the last element puts you on the first element, and moving backwards from the first element puts you on the last element.\\nA cycle in the array consists of a sequence of indices seq of length k where:\\n\\nFollowing the movement rules above results in the repeating index sequence seq[0] -> seq[1] -> ... -> seq[k - 1] -> seq[0] -> ...\\nEvery nums[seq[j]] is either all positive or all negative.\\nk > 1\\n\\nReturn true if there is a cycle in nums, or false otherwise.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [2,-1,1,2,2]\\nOutput: true\\nExplanation:\\nThere is a cycle from index 0 -> 2 -> 3 -> 0 -> ...\\nThe cycle's length is 3.\\n\\nExample 2:\\nInput: nums = [-1,2]\\nOutput: false\\nExplanation:\\nThe sequence from index 1 -> 1 -> 1 -> ... is not a cycle because the sequence's length is 1.\\nBy definition the sequence's length must be strictly greater than 1 to be a cycle.\\n\\nExample 3:\\nInput: nums = [-2,1,-1,-2,-2]\\nOutput: false\\nExplanation:\\nThe sequence from index 1 -> 2 -> 1 -> ... is not a cycle because nums[1] is positive, but nums[2] is negative.\\nEvery nums[seq[j]] must be either all positive or all negative.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 5000\\n-1000 <= nums[i] <= 1000\\nnums[i] != 0\\n\\n\\xc2\\xa0\\nFollow up: Could you solve it in O(n) time complexity and O(1) extra space complexity?\\n\""
    },
    {
        "URL": "https://leetcode.com/problems/poor-pigs",
        "Title": "Poor Pigs ",
        "Description": "b'There are buckets buckets of liquid, where exactly one of the buckets is poisonous. To figure out which one is poisonous, you feed some number of (poor) pigs the liquid to see whether they will die or not. Unfortunately, you only have minutesToTest minutes to determine which bucket is poisonous.\\nYou can feed the pigs according to these steps:\\n\\nChoose some live pigs to feed.\\nFor each pig, choose which buckets to feed it. The pig will consume all the chosen buckets simultaneously and will take no time.\\nWait for minutesToDie minutes. You may not feed any other pigs during this time.\\nAfter minutesToDie minutes have passed, any pigs that have been fed the poisonous bucket will die, and all others will survive.\\nRepeat this process until you run out of time.\\n\\nGiven buckets, minutesToDie, and minutesToTest, return the minimum number of pigs needed to figure out which bucket is poisonous within the allotted time.\\n\\xc2\\xa0\\nExample 1:\\nInput: buckets = 1000, minutesToDie = 15, minutesToTest = 60\\nOutput: 5\\nExample 2:\\nInput: buckets = 4, minutesToDie = 15, minutesToTest = 15\\nOutput: 2\\nExample 3:\\nInput: buckets = 4, minutesToDie = 15, minutesToTest = 30\\nOutput: 2\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= buckets <= 1000\\n1 <=\\xc2\\xa0minutesToDie <=\\xc2\\xa0minutesToTest <= 100\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/repeated-substring-pattern",
        "Title": "Repeated Substring Pattern ",
        "Description": "b'Given a string s, check if it can be constructed by taking a substring of it and appending multiple copies of the substring together.\\n\\xc2\\xa0\\nExample 1:\\nInput: s = \"abab\"\\nOutput: true\\nExplanation: It is the substring \"ab\" twice.\\n\\nExample 2:\\nInput: s = \"aba\"\\nOutput: false\\n\\nExample 3:\\nInput: s = \"abcabcabcabc\"\\nOutput: true\\nExplanation: It is the substring \"abc\" four times or the substring \"abcabc\" twice.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= s.length <= 104\\ns consists of lowercase English letters.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/lfu-cache",
        "Title": "LFU Cache ",
        "Description": "b'Design and implement a data structure for a Least Frequently Used (LFU) cache.\\nImplement the LFUCache class:\\n\\nLFUCache(int capacity) Initializes the object with the capacity of the data structure.\\nint get(int key) Gets the value of the key if the key exists in the cache. Otherwise, returns -1.\\nvoid put(int key, int value) Update the value of the key if present, or inserts the key if not already present. When the cache reaches its capacity, it should invalidate and remove the least frequently used key before inserting a new item. For this problem, when there is a tie (i.e., two or more keys with the same frequency), the least recently used key would be invalidated.\\n\\nTo determine the least frequently used key, a use counter is maintained for each key in the cache. The key with the smallest use counter is the least frequently used key.\\nWhen a key is first inserted into the cache, its use counter is set to 1 (due to the put operation). The use counter for a key in the cache is incremented either a get or put operation is called on it.\\nThe functions\\xc2\\xa0get\\xc2\\xa0and\\xc2\\xa0put\\xc2\\xa0must each run in O(1) average time complexity.\\n\\xc2\\xa0\\nExample 1:\\nInput\\n[\"LFUCache\", \"put\", \"put\", \"get\", \"put\", \"get\", \"get\", \"put\", \"get\", \"get\", \"get\"]\\n[[2], [1, 1], [2, 2], [1], [3, 3], [2], [3], [4, 4], [1], [3], [4]]\\nOutput\\n[null, null, null, 1, null, -1, 3, null, -1, 3, 4]\\n\\nExplanation\\n// cnt(x) = the use counter for key x\\n// cache=[] will show the last used order for tiebreakers (leftmost element is  most recent)\\nLFUCache lfu = new LFUCache(2);\\nlfu.put(1, 1);   // cache=[1,_], cnt(1)=1\\nlfu.put(2, 2);   // cache=[2,1], cnt(2)=1, cnt(1)=1\\nlfu.get(1);      // return 1\\n                 // cache=[1,2], cnt(2)=1, cnt(1)=2\\nlfu.put(3, 3);   // 2 is the LFU key because cnt(2)=1 is the smallest, invalidate 2.\\n\\xc2\\xa0                // cache=[3,1], cnt(3)=1, cnt(1)=2\\nlfu.get(2);      // return -1 (not found)\\nlfu.get(3);      // return 3\\n                 // cache=[3,1], cnt(3)=2, cnt(1)=2\\nlfu.put(4, 4);   // Both 1 and 3 have the same cnt, but 1 is LRU, invalidate 1.\\n                 // cache=[4,3], cnt(4)=1, cnt(3)=2\\nlfu.get(1);      // return -1 (not found)\\nlfu.get(3);      // return 3\\n                 // cache=[3,4], cnt(4)=1, cnt(3)=3\\nlfu.get(4);      // return 4\\n                 // cache=[4,3], cnt(4)=2, cnt(3)=3\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n0 <= capacity\\xc2\\xa0<= 104\\n0 <= key <= 105\\n0 <= value <= 109\\nAt most 2 * 105\\xc2\\xa0calls will be made to get and put.\\n\\n\\xc2\\xa0\\n\\xc2\\xa0'"
    },
    {
        "URL": "https://leetcode.com/problems/hamming-distance",
        "Title": "Hamming Distance ",
        "Description": "b'The Hamming distance between two integers is the number of positions at which the corresponding bits are different.\\nGiven two integers x and y, return the Hamming distance between them.\\n\\xc2\\xa0\\nExample 1:\\nInput: x = 1, y = 4\\nOutput: 2\\nExplanation:\\n1   (0 0 0 1)\\n4   (0 1 0 0)\\n       \\xe2\\x86\\x91   \\xe2\\x86\\x91\\nThe above arrows point to positions where the corresponding bits are different.\\n\\nExample 2:\\nInput: x = 3, y = 1\\nOutput: 1\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n0 <=\\xc2\\xa0x, y <= 231 - 1\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/minimum-moves-to-equal-array-elements-ii",
        "Title": "Minimum Moves to Equal Array Elements II ",
        "Description": "b'Given an integer array nums of size n, return the minimum number of moves required to make all array elements equal.\\nIn one move, you can increment or decrement an element of the array by 1.\\nTest cases are designed so that the answer will fit in a 32-bit integer.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [1,2,3]\\nOutput: 2\\nExplanation:\\nOnly two moves are needed (remember each move increments or decrements one element):\\n[1,2,3]  =>  [2,2,3]  =>  [2,2,2]\\n\\nExample 2:\\nInput: nums = [1,10,2,9]\\nOutput: 16\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nn == nums.length\\n1 <= nums.length <= 105\\n-109 <= nums[i] <= 109\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/island-perimeter",
        "Title": "Island Perimeter ",
        "Description": "b'You are given row x col grid representing a map where grid[i][j] = 1 represents\\xc2\\xa0land and grid[i][j] = 0 represents water.\\nGrid cells are connected horizontally/vertically (not diagonally). The grid is completely surrounded by water, and there is exactly one island (i.e., one or more connected land cells).\\nThe island doesn\\'t have \"lakes\", meaning the water inside isn\\'t connected to the water around the island. One cell is a square with side length 1. The grid is rectangular, width and height don\\'t exceed 100. Determine the perimeter of the island.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: grid = [[0,1,0,0],[1,1,1,0],[0,1,0,0],[1,1,0,0]]\\nOutput: 16\\nExplanation: The perimeter is the 16 yellow stripes in the image above.\\n\\nExample 2:\\nInput: grid = [[1]]\\nOutput: 4\\n\\nExample 3:\\nInput: grid = [[1,0]]\\nOutput: 4\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nrow == grid.length\\ncol == grid[i].length\\n1 <= row, col <= 100\\ngrid[i][j] is 0 or 1.\\nThere is exactly one island in grid.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/can-i-win",
        "Title": "Can I Win ",
        "Description": "b'In the \"100 game\" two players take turns adding, to a running total, any integer from 1 to 10. The player who first causes the running total to reach or exceed 100 wins.\\nWhat if we change the game so that players cannot re-use integers?\\nFor example, two players might take turns drawing from a common pool of numbers from 1 to 15 without replacement until they reach a total >= 100.\\nGiven two integers maxChoosableInteger and desiredTotal, return true if the first player to move can force a win, otherwise, return false. Assume both players play optimally.\\n\\xc2\\xa0\\nExample 1:\\nInput: maxChoosableInteger = 10, desiredTotal = 11\\nOutput: false\\nExplanation:\\nNo matter which integer the first player choose, the first player will lose.\\nThe first player can choose an integer from 1 up to 10.\\nIf the first player choose 1, the second player can only choose integers from 2 up to 10.\\nThe second player will win by choosing 10 and get a total = 11, which is >= desiredTotal.\\nSame with other integers chosen by the first player, the second player will always win.\\n\\nExample 2:\\nInput: maxChoosableInteger = 10, desiredTotal = 0\\nOutput: true\\n\\nExample 3:\\nInput: maxChoosableInteger = 10, desiredTotal = 1\\nOutput: true\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= maxChoosableInteger <= 20\\n0 <= desiredTotal <= 300\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/optimal-account-balancing",
        "Title": "Optimal Account Balancing ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/count-the-repetitions",
        "Title": "Count The Repetitions ",
        "Description": "b'We define str = [s, n] as the string str which consists of the string s concatenated n times.\\n\\nFor example, str == [\"abc\", 3] ==\"abcabcabc\".\\n\\nWe define that string s1 can be obtained from string s2 if we can remove some characters from s2 such that it becomes s1.\\n\\nFor example, s1 = \"abc\" can be obtained from s2 = \"abdbec\" based on our definition by removing the bolded underlined characters.\\n\\nYou are given two strings s1 and s2 and two integers n1 and n2. You have the two strings str1 = [s1, n1] and str2 = [s2, n2].\\nReturn the maximum integer m such that str = [str2, m] can be obtained from str1.\\n\\xc2\\xa0\\nExample 1:\\nInput: s1 = \"acb\", n1 = 4, s2 = \"ab\", n2 = 2\\nOutput: 2\\nExample 2:\\nInput: s1 = \"acb\", n1 = 1, s2 = \"acb\", n2 = 1\\nOutput: 1\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= s1.length, s2.length <= 100\\ns1 and s2 consist of lowercase English letters.\\n1 <= n1, n2 <= 106\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/unique-substrings-in-wraparound-string",
        "Title": "Unique Substrings in Wraparound String ",
        "Description": "b'We define the string s to be the infinite wraparound string of \"abcdefghijklmnopqrstuvwxyz\", so s will look like this:\\n\\n\"...zabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcd....\".\\n\\nGiven a string p, return the number of unique non-empty substrings of p are present in s.\\n\\xc2\\xa0\\nExample 1:\\nInput: p = \"a\"\\nOutput: 1\\nExplanation: Only the substring \"a\" of p is in s.\\n\\nExample 2:\\nInput: p = \"cac\"\\nOutput: 2\\nExplanation: There are two substrings (\"a\", \"c\") of p in s.\\n\\nExample 3:\\nInput: p = \"zab\"\\nOutput: 6\\nExplanation: There are six substrings (\"z\", \"a\", \"b\", \"za\", \"ab\", and \"zab\") of p in s.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= p.length <= 105\\np consists of lowercase English letters.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/validate-ip-address",
        "Title": "Validate IP Address ",
        "Description": "b'Given a string queryIP, return \"IPv4\" if IP is a valid IPv4 address, \"IPv6\" if IP is a valid IPv6 address or \"Neither\" if IP is not a correct IP of any type.\\nA valid IPv4 address is an IP in the form \"x1.x2.x3.x4\" where 0 <= xi <= 255 and xi cannot contain leading zeros. For example, \"192.168.1.1\" and \"192.168.1.0\" are valid IPv4 addresses while \"192.168.01.1\", \"192.168.1.00\", and \"192.168@1.1\" are invalid IPv4 addresses.\\nA valid IPv6 address is an IP in the form \"x1:x2:x3:x4:x5:x6:x7:x8\" where:\\n\\n1 <= xi.length <= 4\\nxi is a hexadecimal string which may contain digits, lowercase English letter (\\'a\\' to \\'f\\') and upper-case English letters (\\'A\\' to \\'F\\').\\nLeading zeros are allowed in xi.\\n\\nFor example, \"2001:0db8:85a3:0000:0000:8a2e:0370:7334\" and \"2001:db8:85a3:0:0:8A2E:0370:7334\" are valid IPv6 addresses, while \"2001:0db8:85a3::8A2E:037j:7334\" and \"02001:0db8:85a3:0000:0000:8a2e:0370:7334\" are invalid IPv6 addresses.\\n\\xc2\\xa0\\nExample 1:\\nInput: queryIP = \"172.16.254.1\"\\nOutput: \"IPv4\"\\nExplanation: This is a valid IPv4 address, return \"IPv4\".\\n\\nExample 2:\\nInput: queryIP = \"2001:0db8:85a3:0:0:8A2E:0370:7334\"\\nOutput: \"IPv6\"\\nExplanation: This is a valid IPv6 address, return \"IPv6\".\\n\\nExample 3:\\nInput: queryIP = \"256.256.256.256\"\\nOutput: \"Neither\"\\nExplanation: This is neither a IPv4 address nor a IPv6 address.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nqueryIP consists only of English letters, digits and the characters \\'.\\' and \\':\\'.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/convex-polygon",
        "Title": "Convex Polygon ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/implement-rand10-using-rand7",
        "Title": "Implement Rand10() Using Rand7() ",
        "Description": "b\"Given the API rand7() that generates a uniform random integer in the range [1, 7], write a function rand10() that generates a uniform random integer in the range [1, 10]. You can only call the API rand7(), and you shouldn't call any other API. Please do not use a language's built-in random API.\\nEach test case will have one internal argument n, the number of times that your implemented function rand10() will be called while testing. Note that this is not an argument passed to rand10().\\n\\xc2\\xa0\\nExample 1:\\nInput: n = 1\\nOutput: [2]\\nExample 2:\\nInput: n = 2\\nOutput: [2,8]\\nExample 3:\\nInput: n = 3\\nOutput: [3,8,10]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= n <= 105\\n\\n\\xc2\\xa0\\nFollow up:\\n\\nWhat is the expected value for the number of calls to rand7() function?\\nCould you minimize the number of calls to rand7()?\\n\\n\""
    },
    {
        "URL": "https://leetcode.com/problems/encode-string-with-shortest-length",
        "Title": "Encode String with Shortest Length ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/concatenated-words",
        "Title": "Concatenated Words ",
        "Description": "b'Given an array of strings words (without duplicates), return all the concatenated words in the given list of words.\\nA concatenated word is defined as a string that is comprised entirely of at least two shorter words in the given array.\\n\\xc2\\xa0\\nExample 1:\\nInput: words = [\"cat\",\"cats\",\"catsdogcats\",\"dog\",\"dogcatsdog\",\"hippopotamuses\",\"rat\",\"ratcatdogcat\"]\\nOutput: [\"catsdogcats\",\"dogcatsdog\",\"ratcatdogcat\"]\\nExplanation: \"catsdogcats\" can be concatenated by \"cats\", \"dog\" and \"cats\"; \\n\"dogcatsdog\" can be concatenated by \"dog\", \"cats\" and \"dog\"; \\n\"ratcatdogcat\" can be concatenated by \"rat\", \"cat\", \"dog\" and \"cat\".\\nExample 2:\\nInput: words = [\"cat\",\"dog\",\"catdog\"]\\nOutput: [\"catdog\"]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= words.length <= 104\\n1 <= words[i].length <= 30\\nwords[i] consists of only lowercase English letters.\\nAll the strings of words are unique.\\n1 <= sum(words[i].length) <= 105\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/matchsticks-to-square",
        "Title": "Matchsticks to Square ",
        "Description": "b'You are given an integer array matchsticks where matchsticks[i] is the length of the ith matchstick. You want to use all the matchsticks to make one square. You should not break any stick, but you can link them up, and each matchstick must be used exactly one time.\\nReturn true if you can make this square and false otherwise.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: matchsticks = [1,1,2,2,2]\\nOutput: true\\nExplanation: You can form a square with length 2, one side of the square came two sticks with length 1.\\n\\nExample 2:\\nInput: matchsticks = [3,3,3,3,4]\\nOutput: false\\nExplanation: You cannot find a way to form a square with all the matchsticks.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= matchsticks.length <= 15\\n1 <= matchsticks[i] <= 108\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/ones-and-zeroes",
        "Title": "Ones and Zeroes ",
        "Description": "b'You are given an array of binary strings strs and two integers m and n.\\nReturn the size of the largest subset of strs such that there are at most m 0\\'s and n 1\\'s in the subset.\\nA set x is a subset of a set y if all elements of x are also elements of y.\\n\\xc2\\xa0\\nExample 1:\\nInput: strs = [\"10\",\"0001\",\"111001\",\"1\",\"0\"], m = 5, n = 3\\nOutput: 4\\nExplanation: The largest subset with at most 5 0\\'s and 3 1\\'s is {\"10\", \"0001\", \"1\", \"0\"}, so the answer is 4.\\nOther valid but smaller subsets include {\"0001\", \"1\"} and {\"10\", \"1\", \"0\"}.\\n{\"111001\"} is an invalid subset because it contains 4 1\\'s, greater than the maximum of 3.\\n\\nExample 2:\\nInput: strs = [\"10\",\"0\",\"1\"], m = 1, n = 1\\nOutput: 2\\nExplanation: The largest subset is {\"0\", \"1\"}, so the answer is 2.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= strs.length <= 600\\n1 <= strs[i].length <= 100\\nstrs[i] consists only of digits \\'0\\' and \\'1\\'.\\n1 <= m, n <= 100\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/heaters",
        "Title": "Heaters ",
        "Description": "b\"Winter is coming! During the contest, your first job is to design a standard heater with a fixed warm radius to warm all the houses.\\nEvery house can be warmed, as long as the house is within the heater's warm radius range.\\xc2\\xa0\\nGiven the positions of houses and heaters on a horizontal line, return the minimum radius standard of heaters\\xc2\\xa0so that those heaters could cover all houses.\\nNotice that\\xc2\\xa0all the heaters follow your radius standard, and the warm radius will the same.\\n\\xc2\\xa0\\nExample 1:\\nInput: houses = [1,2,3], heaters = [2]\\nOutput: 1\\nExplanation: The only heater was placed in the position 2, and if we use the radius 1 standard, then all the houses can be warmed.\\n\\nExample 2:\\nInput: houses = [1,2,3,4], heaters = [1,4]\\nOutput: 1\\nExplanation: The two heater was placed in the position 1 and 4. We need to use radius 1 standard, then all the houses can be warmed.\\n\\nExample 3:\\nInput: houses = [1,5], heaters = [2]\\nOutput: 3\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= houses.length, heaters.length <= 3 * 104\\n1 <= houses[i], heaters[i] <= 109\\n\\n\""
    },
    {
        "URL": "https://leetcode.com/problems/number-complement",
        "Title": "Number Complement ",
        "Description": "b'The complement of an integer is the integer you get when you flip all the 0\\'s to 1\\'s and all the 1\\'s to 0\\'s in its binary representation.\\n\\nFor example, The integer 5 is \"101\" in binary and its complement is \"010\" which is the integer 2.\\n\\nGiven an integer num, return its complement.\\n\\xc2\\xa0\\nExample 1:\\nInput: num = 5\\nOutput: 2\\nExplanation: The binary representation of 5 is 101 (no leading zero bits), and its complement is 010. So you need to output 2.\\n\\nExample 2:\\nInput: num = 1\\nOutput: 0\\nExplanation: The binary representation of 1 is 1 (no leading zero bits), and its complement is 0. So you need to output 0.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= num < 231\\n\\n\\xc2\\xa0\\nNote: This question is the same as 1009: https://leetcode.com/problems/complement-of-base-10-integer/\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/total-hamming-distance",
        "Title": "Total Hamming Distance ",
        "Description": "b'The Hamming distance between two integers is the number of positions at which the corresponding bits are different.\\nGiven an integer array nums, return the sum of Hamming distances between all the pairs of the integers in nums.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [4,14,2]\\nOutput: 6\\nExplanation: In binary representation, the 4 is 0100, 14 is 1110, and 2 is 0010 (just\\nshowing the four bits relevant in this case).\\nThe answer will be:\\nHammingDistance(4, 14) + HammingDistance(4, 2) + HammingDistance(14, 2) = 2 + 2 + 2 = 6.\\n\\nExample 2:\\nInput: nums = [4,14,4]\\nOutput: 4\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 104\\n0 <= nums[i] <= 109\\nThe answer for the given input will fit in a 32-bit integer.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/generate-random-point-in-a-circle",
        "Title": "Generate Random Point in a Circle ",
        "Description": "b'Given the radius and the position of the center of a circle, implement the function randPoint which generates a uniform random point inside the circle.\\nImplement the Solution class:\\n\\nSolution(double radius, double x_center, double y_center) initializes the object with the radius of the circle radius and the position of the center (x_center, y_center).\\nrandPoint() returns a random point inside the circle. A point on the circumference of the circle is considered to be in the circle. The answer is returned as an array [x, y].\\n\\n\\xc2\\xa0\\nExample 1:\\nInput\\n[\"Solution\", \"randPoint\", \"randPoint\", \"randPoint\"]\\n[[1.0, 0.0, 0.0], [], [], []]\\nOutput\\n[null, [-0.02493, -0.38077], [0.82314, 0.38945], [0.36572, 0.17248]]\\n\\nExplanation\\nSolution solution = new Solution(1.0, 0.0, 0.0);\\nsolution.randPoint(); // return [-0.02493, -0.38077]\\nsolution.randPoint(); // return [0.82314, 0.38945]\\nsolution.randPoint(); // return [0.36572, 0.17248]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n0 <\\xc2\\xa0radius <= 108\\n-107 <= x_center, y_center <= 107\\nAt most 3 * 104 calls will be made to randPoint.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/largest-palindrome-product",
        "Title": "Largest Palindrome Product ",
        "Description": "b'Given an integer n, return the largest palindromic integer that can be represented as the product of two n-digits integers. Since the answer can be very large, return it modulo 1337.\\n\\xc2\\xa0\\nExample 1:\\nInput: n = 2\\nOutput: 987\\nExplanation: 99 x 91 = 9009, 9009 % 1337 = 987\\n\\nExample 2:\\nInput: n = 1\\nOutput: 9\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= n <= 8\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/sliding-window-median",
        "Title": "Sliding Window Median ",
        "Description": "b'The median is the middle value in an ordered integer list. If the size of the list is even, there is no middle value. So the median is the mean of the two middle values.\\n\\nFor examples, if arr = [2,3,4], the median is 3.\\nFor examples, if arr = [1,2,3,4], the median is (2 + 3) / 2 = 2.5.\\n\\nYou are given an integer array nums and an integer k. There is a sliding window of size k which is moving from the very left of the array to the very right. You can only see the k numbers in the window. Each time the sliding window moves right by one position.\\nReturn the median array for each window in the original array. Answers within 10-5 of the actual value will be accepted.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [1,3,-1,-3,5,3,6,7], k = 3\\nOutput: [1.00000,-1.00000,-1.00000,3.00000,5.00000,6.00000]\\nExplanation: \\nWindow position                Median\\n---------------                -----\\n[1  3  -1] -3  5  3  6  7        1\\n 1 [3  -1  -3] 5  3  6  7       -1\\n 1  3 [-1  -3  5] 3  6  7       -1\\n 1  3  -1 [-3  5  3] 6  7        3\\n 1  3  -1  -3 [5  3  6] 7        5\\n 1  3  -1  -3  5 [3  6  7]       6\\n\\nExample 2:\\nInput: nums = [1,2,3,4,2,3,1,4,2], k = 3\\nOutput: [2.00000,3.00000,3.00000,3.00000,2.00000,3.00000,2.00000]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= k <= nums.length <= 105\\n-231 <= nums[i] <= 231 - 1\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/magical-string",
        "Title": "Magical String ",
        "Description": "b'A magical string s consists of only \\'1\\' and \\'2\\' and obeys the following rules:\\n\\nThe string s is magical because concatenating the number of contiguous occurrences of characters \\'1\\' and \\'2\\' generates the string s itself.\\n\\nThe first few elements of s is s = \"1221121221221121122\\xe2\\x80\\xa6\\xe2\\x80\\xa6\". If we group the consecutive 1\\'s and 2\\'s in s, it will be \"1 22 11 2 1 22 1 22 11 2 11 22 ......\" and the occurrences of 1\\'s or 2\\'s in each group are \"1 2 2 1 1 2 1 2 2 1 2 2 ......\". You can see that the occurrence sequence is s itself.\\nGiven an integer n, return the number of 1\\'s in the first n number in the magical string s.\\n\\xc2\\xa0\\nExample 1:\\nInput: n = 6\\nOutput: 3\\nExplanation: The first 6 elements of magical string s is \"122112\" and it contains three 1\\'s, so return 3.\\n\\nExample 2:\\nInput: n = 1\\nOutput: 1\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= n <= 105\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/license-key-formatting",
        "Title": "License Key Formatting ",
        "Description": "b'You are given a license key represented as a string s that consists of only alphanumeric characters and dashes. The string is separated into n + 1 groups by n dashes. You are also given an integer k.\\nWe want to reformat the string s such that each group contains exactly k characters, except for the first group, which could be shorter than k but still must contain at least one character. Furthermore, there must be a dash inserted between two groups, and you should convert all lowercase letters to uppercase.\\nReturn the reformatted license key.\\n\\xc2\\xa0\\nExample 1:\\nInput: s = \"5F3Z-2e-9-w\", k = 4\\nOutput: \"5F3Z-2E9W\"\\nExplanation: The string s has been split into two parts, each part has 4 characters.\\nNote that the two extra dashes are not needed and can be removed.\\n\\nExample 2:\\nInput: s = \"2-5g-3-J\", k = 2\\nOutput: \"2-5G-3J\"\\nExplanation: The string s has been split into three parts, each part has 2 characters except the first part as it could be shorter as mentioned above.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= s.length <= 105\\ns consists of English letters, digits, and dashes \\'-\\'.\\n1 <= k <= 104\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/smallest-good-base",
        "Title": "Smallest Good Base ",
        "Description": "b'Given an integer n represented as a string, return the smallest good base of n.\\nWe call k >= 2 a good base of n, if all digits of n base k are 1\\'s.\\n\\xc2\\xa0\\nExample 1:\\nInput: n = \"13\"\\nOutput: \"3\"\\nExplanation: 13 base 3 is 111.\\n\\nExample 2:\\nInput: n = \"4681\"\\nOutput: \"8\"\\nExplanation: 4681 base 8 is 11111.\\n\\nExample 3:\\nInput: n = \"1000000000000000000\"\\nOutput: \"999999999999999999\"\\nExplanation: 1000000000000000000 base 999999999999999999 is 11.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nn is an integer in the range [3, 1018].\\nn does not contain any leading zeros.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/find-permutation",
        "Title": "Find Permutation ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/max-consecutive-ones",
        "Title": "Max Consecutive Ones ",
        "Description": "b\"Given a binary array nums, return the maximum number of consecutive 1's in the array.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [1,1,0,1,1,1]\\nOutput: 3\\nExplanation: The first two digits or the last three digits are consecutive 1s. The maximum number of consecutive 1s is 3.\\n\\nExample 2:\\nInput: nums = [1,0,1,1,0,1]\\nOutput: 2\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 105\\nnums[i] is either 0 or 1.\\n\\n\""
    },
    {
        "URL": "https://leetcode.com/problems/predict-the-winner",
        "Title": "Predict the Winner ",
        "Description": "b'You are given an integer array nums. Two players are playing a game with this array: player 1 and player 2.\\nPlayer 1 and player 2 take turns, with player 1 starting first. Both players start the game with a score of 0. At each turn, the player takes one of the numbers from either end of the array (i.e., nums[0] or nums[nums.length - 1]) which reduces the size of the array by 1. The player adds the chosen number to their score. The game ends when there are no more elements in the array.\\nReturn true if Player 1 can win the game. If the scores of both players are equal, then player 1 is still the winner, and you should also return true. You may assume that both players are playing optimally.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [1,5,2]\\nOutput: false\\nExplanation: Initially, player 1 can choose between 1 and 2. \\nIf he chooses 2 (or 1), then player 2 can choose from 1 (or 2) and 5. If player 2 chooses 5, then player 1 will be left with 1 (or 2). \\nSo, final score of player 1 is 1 + 2 = 3, and player 2 is 5. \\nHence, player 1 will never be the winner and you need to return false.\\n\\nExample 2:\\nInput: nums = [1,5,233,7]\\nOutput: true\\nExplanation: Player 1 first chooses 1. Then player 2 has to choose between 5 and 7. No matter which number player 2 choose, player 1 can choose 233.\\nFinally, player 1 has more score (234) than player 2 (12), so you need to return True representing player1 can win.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 20\\n0 <= nums[i] <= 107\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/max-consecutive-ones-ii",
        "Title": "Max Consecutive Ones II ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/zuma-game",
        "Title": "Zuma Game ",
        "Description": "b'You are playing a variation of the game Zuma.\\nIn this variation of Zuma, there is a single row of colored balls on a board, where each ball can be colored red \\'R\\', yellow \\'Y\\', blue \\'B\\', green \\'G\\', or white \\'W\\'. You also have several colored balls in your hand.\\nYour goal is to clear all of the balls from the board. On each turn:\\n\\nPick any ball from your hand and insert it in between two balls in the row or on either end of the row.\\nIf there is a group of three or more consecutive balls of the same color, remove the group of balls from the board.\\n\\t\\nIf this removal causes more groups of three or more of the same color to form, then continue removing each group until there are none left.\\n\\n\\nIf there are no more balls on the board, then you win the game.\\nRepeat this process until you either win or do not have any more balls in your hand.\\n\\nGiven a string board, representing the row of balls on the board, and a string hand, representing the balls in your hand, return the minimum number of balls you have to insert to clear all the balls from the board. If you cannot clear all the balls from the board using the balls in your hand, return -1.\\n\\xc2\\xa0\\nExample 1:\\nInput: board = \"WRRBBW\", hand = \"RB\"\\nOutput: -1\\nExplanation: It is impossible to clear all the balls. The best you can do is:\\n- Insert \\'R\\' so the board becomes WRRRBBW. WRRRBBW -> WBBW.\\n- Insert \\'B\\' so the board becomes WBBBW. WBBBW -> WW.\\nThere are still balls remaining on the board, and you are out of balls to insert.\\nExample 2:\\nInput: board = \"WWRRBBWW\", hand = \"WRBRW\"\\nOutput: 2\\nExplanation: To make the board empty:\\n- Insert \\'R\\' so the board becomes WWRRRBBWW. WWRRRBBWW -> WWBBWW.\\n- Insert \\'B\\' so the board becomes WWBBBWW. WWBBBWW -> WWWW -> empty.\\n2 balls from your hand were needed to clear the board.\\n\\nExample 3:\\nInput: board = \"G\", hand = \"GGGGG\"\\nOutput: 2\\nExplanation: To make the board empty:\\n- Insert \\'G\\' so the board becomes GG.\\n- Insert \\'G\\' so the board becomes GGG. GGG -> empty.\\n2 balls from your hand were needed to clear the board.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= board.length <= 16\\n1 <= hand.length <= 5\\nboard and hand consist of the characters \\'R\\', \\'Y\\', \\'B\\', \\'G\\', and \\'W\\'.\\nThe initial row of balls on the board will not have any groups of three or more consecutive balls of the same color.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/robot-room-cleaner",
        "Title": "Robot Room Cleaner ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/the-maze",
        "Title": "The Maze ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/increasing-subsequences",
        "Title": "Increasing Subsequences ",
        "Description": "b'Given an integer array nums, return all the different possible increasing subsequences of the given array with at least two elements. You may return the answer in any order.\\nThe given array may contain duplicates, and two equal integers should also be considered a special case of increasing sequence.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [4,6,7,7]\\nOutput: [[4,6],[4,6,7],[4,6,7,7],[4,7],[4,7,7],[6,7],[6,7,7],[7,7]]\\n\\nExample 2:\\nInput: nums = [4,4,3,2,1]\\nOutput: [[4,4]]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 15\\n-100 <= nums[i] <= 100\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/construct-the-rectangle",
        "Title": "Construct the Rectangle ",
        "Description": "b\"A web developer needs to know how to design a web page's size. So, given a specific rectangular web page\\xe2\\x80\\x99s area, your job by now is to design a rectangular web page, whose length L and width W satisfy the following requirements:\\n\\nThe area of the rectangular web page you designed must equal to the given target area.\\nThe width W should not be larger than the length L, which means L >= W.\\nThe difference between length L and width W should be as small as possible.\\n\\nReturn an array [L, W] where L and W are the length and width of the\\xc2\\xa0web page you designed in sequence.\\n\\xc2\\xa0\\nExample 1:\\nInput: area = 4\\nOutput: [2,2]\\nExplanation: The target area is 4, and all the possible ways to construct it are [1,4], [2,2], [4,1]. \\nBut according to requirement 2, [1,4] is illegal; according to requirement 3,  [4,1] is not optimal compared to [2,2]. So the length L is 2, and the width W is 2.\\n\\nExample 2:\\nInput: area = 37\\nOutput: [37,1]\\n\\nExample 3:\\nInput: area = 122122\\nOutput: [427,286]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= area <= 107\\n\\n\""
    },
    {
        "URL": "https://leetcode.com/problems/reverse-pairs",
        "Title": "Reverse Pairs ",
        "Description": "b'Given an integer array nums, return the number of reverse pairs in the array.\\nA reverse pair is a pair (i, j) where 0 <= i < j < nums.length and nums[i] > 2 * nums[j].\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [1,3,2,3,1]\\nOutput: 2\\nExample 2:\\nInput: nums = [2,4,3,5,1]\\nOutput: 3\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 5 * 104\\n-231 <= nums[i] <= 231 - 1\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/target-sum",
        "Title": "Target Sum ",
        "Description": "b'You are given an integer array nums and an integer target.\\nYou want to build an expression out of nums by adding one of the symbols \\'+\\' and \\'-\\' before each integer in nums and then concatenate all the integers.\\n\\nFor example, if nums = [2, 1], you can add a \\'+\\' before 2 and a \\'-\\' before 1 and concatenate them to build the expression \"+2-1\".\\n\\nReturn the number of different expressions that you can build, which evaluates to target.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [1,1,1,1,1], target = 3\\nOutput: 5\\nExplanation: There are 5 ways to assign symbols to make the sum of nums be target 3.\\n-1 + 1 + 1 + 1 + 1 = 3\\n+1 - 1 + 1 + 1 + 1 = 3\\n+1 + 1 - 1 + 1 + 1 = 3\\n+1 + 1 + 1 - 1 + 1 = 3\\n+1 + 1 + 1 + 1 - 1 = 3\\n\\nExample 2:\\nInput: nums = [1], target = 1\\nOutput: 1\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 20\\n0 <= nums[i] <= 1000\\n0 <= sum(nums[i]) <= 1000\\n-1000 <= target <= 1000\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/teemo-attacking",
        "Title": "Teemo Attacking ",
        "Description": "b\"Our hero Teemo is attacking an enemy Ashe with poison attacks! When Teemo attacks Ashe, Ashe gets poisoned for a exactly duration seconds. More formally, an attack at second t will mean Ashe is poisoned during the inclusive time interval [t, t + duration - 1]. If Teemo attacks again before the poison effect ends, the timer for it is reset, and the poison effect will end duration seconds after the new attack.\\nYou are given a non-decreasing integer array timeSeries, where timeSeries[i] denotes that Teemo attacks Ashe at second timeSeries[i], and an integer duration.\\nReturn the total number of seconds that Ashe is poisoned.\\n\\xc2\\xa0\\nExample 1:\\nInput: timeSeries = [1,4], duration = 2\\nOutput: 4\\nExplanation: Teemo's attacks on Ashe go as follows:\\n- At second 1, Teemo attacks, and Ashe is poisoned for seconds 1 and 2.\\n- At second 4, Teemo attacks, and Ashe is poisoned for seconds 4 and 5.\\nAshe is poisoned for seconds 1, 2, 4, and 5, which is 4 seconds in total.\\n\\nExample 2:\\nInput: timeSeries = [1,2], duration = 2\\nOutput: 3\\nExplanation: Teemo's attacks on Ashe go as follows:\\n- At second 1, Teemo attacks, and Ashe is poisoned for seconds 1 and 2.\\n- At second 2 however, Teemo attacks again and resets the poison timer. Ashe is poisoned for seconds 2 and 3.\\nAshe is poisoned for seconds 1, 2, and 3, which is 3 seconds in total.\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= timeSeries.length <= 104\\n0 <= timeSeries[i], duration <= 107\\ntimeSeries is sorted in non-decreasing order.\\n\\n\""
    },
    {
        "URL": "https://leetcode.com/problems/next-greater-element-i",
        "Title": "Next Greater Element I ",
        "Description": "b'The next greater element of some element x in an array is the first greater element that is to the right of x in the same array.\\nYou are given two distinct 0-indexed integer arrays nums1 and nums2, where nums1 is a subset of nums2.\\nFor each 0 <= i < nums1.length, find the index j such that nums1[i] == nums2[j] and determine the next greater element of nums2[j] in nums2. If there is no next greater element, then the answer for this query is -1.\\nReturn an array ans of length nums1.length such that ans[i] is the next greater element as described above.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums1 = [4,1,2], nums2 = [1,3,4,2]\\nOutput: [-1,3,-1]\\nExplanation: The next greater element for each value of nums1 is as follows:\\n- 4 is underlined in nums2 = [1,3,4,2]. There is no next greater element, so the answer is -1.\\n- 1 is underlined in nums2 = [1,3,4,2]. The next greater element is 3.\\n- 2 is underlined in nums2 = [1,3,4,2]. There is no next greater element, so the answer is -1.\\n\\nExample 2:\\nInput: nums1 = [2,4], nums2 = [1,2,3,4]\\nOutput: [3,-1]\\nExplanation: The next greater element for each value of nums1 is as follows:\\n- 2 is underlined in nums2 = [1,2,3,4]. The next greater element is 3.\\n- 4 is underlined in nums2 = [1,2,3,4]. There is no next greater element, so the answer is -1.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums1.length <= nums2.length <= 1000\\n0 <= nums1[i], nums2[i] <= 104\\nAll integers in nums1 and nums2 are unique.\\nAll the integers of nums1 also appear in nums2.\\n\\n\\xc2\\xa0\\nFollow up: Could you find an O(nums1.length + nums2.length) solution?'"
    },
    {
        "URL": "https://leetcode.com/problems/random-point-in-non-overlapping-rectangles",
        "Title": "Random Point in Non-overlapping Rectangles ",
        "Description": "b'You are given an array of non-overlapping axis-aligned rectangles rects where rects[i] = [ai, bi, xi, yi] indicates that (ai, bi) is the bottom-left corner point of the ith rectangle and (xi, yi) is the top-right corner point of the ith rectangle. Design an algorithm to pick a random integer point inside the space covered by one of the given rectangles. A point on the perimeter of a rectangle is included in the space covered by the rectangle.\\nAny integer point inside the space covered by one of the given rectangles should be equally likely to be returned.\\nNote that an integer point is a point that has integer coordinates.\\nImplement the Solution class:\\n\\nSolution(int[][] rects) Initializes the object with the given rectangles rects.\\nint[] pick() Returns a random integer point [u, v] inside the space covered by one of the given rectangles.\\n\\n\\xc2\\xa0\\nExample 1:\\n\\nInput\\n[\"Solution\", \"pick\", \"pick\", \"pick\", \"pick\", \"pick\"]\\n[[[[-2, -2, 1, 1], [2, 2, 4, 6]]], [], [], [], [], []]\\nOutput\\n[null, [1, -2], [1, -1], [-1, -2], [-2, -2], [0, 0]]\\n\\nExplanation\\nSolution solution = new Solution([[-2, -2, 1, 1], [2, 2, 4, 6]]);\\nsolution.pick(); // return [1, -2]\\nsolution.pick(); // return [1, -1]\\nsolution.pick(); // return [-1, -2]\\nsolution.pick(); // return [-2, -2]\\nsolution.pick(); // return [0, 0]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= rects.length <= 100\\nrects[i].length == 4\\n-109 <= ai < xi <= 109\\n-109 <= bi < yi <= 109\\nxi - ai <= 2000\\nyi - bi <= 2000\\nAll the rectangles do not overlap.\\nAt most 104 calls will be made to pick.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/diagonal-traverse",
        "Title": "Diagonal Traverse ",
        "Description": "b'Given an m x n matrix mat, return an array of all the elements of the array in a diagonal order.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: mat = [[1,2,3],[4,5,6],[7,8,9]]\\nOutput: [1,2,4,7,5,3,6,8,9]\\n\\nExample 2:\\nInput: mat = [[1,2],[3,4]]\\nOutput: [1,2,3,4]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nm == mat.length\\nn == mat[i].length\\n1 <= m, n <= 104\\n1 <= m * n <= 104\\n-105 <= mat[i][j] <= 105\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/the-maze-iii",
        "Title": "The Maze III ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/keyboard-row",
        "Title": "Keyboard Row ",
        "Description": "b'Given an array of strings words, return the words that can be typed using letters of the alphabet on only one row of American keyboard like the image below.\\nIn the American keyboard:\\n\\nthe first row consists of the characters \"qwertyuiop\",\\nthe second row consists of the characters \"asdfghjkl\", and\\nthe third row consists of the characters \"zxcvbnm\".\\n\\n\\n\\xc2\\xa0\\nExample 1:\\nInput: words = [\"Hello\",\"Alaska\",\"Dad\",\"Peace\"]\\nOutput: [\"Alaska\",\"Dad\"]\\n\\nExample 2:\\nInput: words = [\"omk\"]\\nOutput: []\\n\\nExample 3:\\nInput: words = [\"adsdf\",\"sfd\"]\\nOutput: [\"adsdf\",\"sfd\"]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= words.length <= 20\\n1 <= words[i].length <= 100\\nwords[i] consists of English letters (both lowercase and uppercase).\\xc2\\xa0\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/find-mode-in-binary-search-tree",
        "Title": "Find Mode in Binary Search Tree ",
        "Description": "b\"Given the root of a binary search tree (BST) with duplicates, return all the mode(s) (i.e., the most frequently occurred element) in it.\\nIf the tree has more than one mode, return them in any order.\\nAssume a BST is defined as follows:\\n\\nThe left subtree of a node contains only nodes with keys less than or equal to the node's key.\\nThe right subtree of a node contains only nodes with keys greater than or equal to the node's key.\\nBoth the left and right subtrees must also be binary search trees.\\n\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: root = [1,null,2,2]\\nOutput: [2]\\n\\nExample 2:\\nInput: root = [0]\\nOutput: [0]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of nodes in the tree is in the range [1, 104].\\n-105 <= Node.val <= 105\\n\\n\\xc2\\xa0\\nFollow up: Could you do that without using any extra space? (Assume that the implicit stack space incurred due to recursion does not count).\""
    },
    {
        "URL": "https://leetcode.com/problems/ipo",
        "Title": "IPO ",
        "Description": "b'Suppose LeetCode will start its IPO soon. In order to sell a good price of its shares to Venture Capital, LeetCode would like to work on some projects to increase its capital before the IPO. Since it has limited resources, it can only finish at most k distinct projects before the IPO. Help LeetCode design the best way to maximize its total capital after finishing at most k distinct projects.\\nYou are given n projects where the ith project has a pure profit profits[i] and a minimum capital of capital[i] is needed to start it.\\nInitially, you have w capital. When you finish a project, you will obtain its pure profit and the profit will be added to your total capital.\\nPick a list of at most k distinct projects from given projects to maximize your final capital, and return the final maximized capital.\\nThe answer is guaranteed to fit in a 32-bit signed integer.\\n\\xc2\\xa0\\nExample 1:\\nInput: k = 2, w = 0, profits = [1,2,3], capital = [0,1,1]\\nOutput: 4\\nExplanation: Since your initial capital is 0, you can only start the project indexed 0.\\nAfter finishing it you will obtain profit 1 and your capital becomes 1.\\nWith capital 1, you can either start the project indexed 1 or the project indexed 2.\\nSince you can choose at most 2 projects, you need to finish the project indexed 2 to get the maximum capital.\\nTherefore, output the final maximized capital, which is 0 + 1 + 3 = 4.\\n\\nExample 2:\\nInput: k = 3, w = 0, profits = [1,2,3], capital = [0,1,2]\\nOutput: 6\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= k <= 105\\n0 <= w <= 109\\nn == profits.length\\nn == capital.length\\n1 <= n <= 105\\n0 <= profits[i] <= 104\\n0 <= capital[i] <= 109\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/next-greater-element-ii",
        "Title": "Next Greater Element II ",
        "Description": "b\"Given a circular integer array nums (i.e., the next element of nums[nums.length - 1] is nums[0]), return the next greater number for every element in nums.\\nThe next greater number of a number x is the first greater number to its traversing-order next in the array, which means you could search circularly to find its next greater number. If it doesn't exist, return -1 for this number.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [1,2,1]\\nOutput: [2,-1,2]\\nExplanation: The first 1's next greater number is 2; \\nThe number 2 can't find next greater number. \\nThe second 1's next greater number needs to search circularly, which is also 2.\\n\\nExample 2:\\nInput: nums = [1,2,3,4,3]\\nOutput: [2,3,4,-1,4]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 104\\n-109 <= nums[i] <= 109\\n\\n\""
    },
    {
        "URL": "https://leetcode.com/problems/base-7",
        "Title": "Base 7 ",
        "Description": "b'Given an integer num, return a string of its base 7 representation.\\n\\xc2\\xa0\\nExample 1:\\nInput: num = 100\\nOutput: \"202\"\\nExample 2:\\nInput: num = -7\\nOutput: \"-10\"\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n-107 <= num <= 107\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/the-maze-ii",
        "Title": "The Maze II ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/relative-ranks",
        "Title": "Relative Ranks ",
        "Description": "b'You are given an integer array score of size n, where score[i] is the score of the ith athlete in a competition. All the scores are guaranteed to be unique.\\nThe athletes are placed based on their scores, where the 1st place athlete has the highest score, the 2nd place athlete has the 2nd highest score, and so on. The placement of each athlete determines their rank:\\n\\nThe 1st place athlete\\'s rank is \"Gold Medal\".\\nThe 2nd place athlete\\'s rank is \"Silver Medal\".\\nThe 3rd place athlete\\'s rank is \"Bronze Medal\".\\nFor the 4th place to the nth place athlete, their rank is their placement number (i.e., the xth place athlete\\'s rank is \"x\").\\n\\nReturn an array answer of size n where answer[i] is the rank of the ith athlete.\\n\\xc2\\xa0\\nExample 1:\\nInput: score = [5,4,3,2,1]\\nOutput: [\"Gold Medal\",\"Silver Medal\",\"Bronze Medal\",\"4\",\"5\"]\\nExplanation: The placements are [1st, 2nd, 3rd, 4th, 5th].\\nExample 2:\\nInput: score = [10,3,8,9,4]\\nOutput: [\"Gold Medal\",\"5\",\"Bronze Medal\",\"Silver Medal\",\"4\"]\\nExplanation: The placements are [1st, 5th, 3rd, 2nd, 4th].\\n\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nn == score.length\\n1 <= n <= 104\\n0 <= score[i] <= 106\\nAll the values in score are unique.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/perfect-number",
        "Title": "Perfect Number ",
        "Description": "b'A perfect number is a positive integer that is equal to the sum of its positive divisors, excluding the number itself. A divisor of an integer x is an integer that can divide x evenly.\\nGiven an integer n, return true if n is a perfect number, otherwise return false.\\n\\xc2\\xa0\\nExample 1:\\nInput: num = 28\\nOutput: true\\nExplanation: 28 = 1 + 2 + 4 + 7 + 14\\n1, 2, 4, 7, and 14 are all divisors of 28.\\n\\nExample 2:\\nInput: num = 7\\nOutput: false\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= num <= 108\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/most-frequent-subtree-sum",
        "Title": "Most Frequent Subtree Sum ",
        "Description": "b'Given the root of a binary tree, return the most frequent subtree sum. If there is a tie, return all the values with the highest frequency in any order.\\nThe subtree sum of a node is defined as the sum of all the node values formed by the subtree rooted at that node (including the node itself).\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: root = [5,2,-3]\\nOutput: [2,-3,4]\\n\\nExample 2:\\n\\nInput: root = [5,2,-5]\\nOutput: [2]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of nodes in the tree is in the range [1, 104].\\n-105 <= Node.val <= 105\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/fibonacci-number",
        "Title": "Fibonacci Number ",
        "Description": "b'The Fibonacci numbers, commonly denoted F(n) form a sequence, called the Fibonacci sequence, such that each number is the sum of the two preceding ones, starting from 0 and 1. That is,\\nF(0) = 0, F(1) = 1\\nF(n) = F(n - 1) + F(n - 2), for n > 1.\\n\\nGiven n, calculate F(n).\\n\\xc2\\xa0\\nExample 1:\\nInput: n = 2\\nOutput: 1\\nExplanation: F(2) = F(1) + F(0) = 1 + 0 = 1.\\n\\nExample 2:\\nInput: n = 3\\nOutput: 2\\nExplanation: F(3) = F(2) + F(1) = 1 + 1 = 2.\\n\\nExample 3:\\nInput: n = 4\\nOutput: 3\\nExplanation: F(4) = F(3) + F(2) = 2 + 1 = 3.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n0 <= n <= 30\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/inorder-successor-in-bst-ii",
        "Title": "Inorder Successor in BST II ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/game-play-analysis-i",
        "Title": "Game Play Analysis I ",
        "Description": "b'SQL SchemaTable: Activity\\n+--------------+---------+\\n| Column Name  | Type    |\\n+--------------+---------+\\n| player_id    | int     |\\n| device_id    | int     |\\n| event_date   | date    |\\n| games_played | int     |\\n+--------------+---------+\\n(player_id, event_date) is the primary key of this table.\\nThis table shows the activity of players of some games.\\nEach row is a record of a player who logged in and played a number of games (possibly 0) before logging out on someday using some device.\\n\\n\\xc2\\xa0\\nWrite an SQL query to report the first login date for each player.\\nReturn the result table in any order.\\nThe query result format is in the following example.\\n\\xc2\\xa0\\nExample 1:\\nInput: \\nActivity table:\\n+-----------+-----------+------------+--------------+\\n| player_id | device_id | event_date | games_played |\\n+-----------+-----------+------------+--------------+\\n| 1         | 2         | 2016-03-01 | 5            |\\n| 1         | 2         | 2016-05-02 | 6            |\\n| 2         | 3         | 2017-06-25 | 1            |\\n| 3         | 1         | 2016-03-02 | 0            |\\n| 3         | 4         | 2018-07-03 | 5            |\\n+-----------+-----------+------------+--------------+\\nOutput: \\n+-----------+-------------+\\n| player_id | first_login |\\n+-----------+-------------+\\n| 1         | 2016-03-01  |\\n| 2         | 2017-06-25  |\\n| 3         | 2016-03-02  |\\n+-----------+-------------+\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/game-play-analysis-ii",
        "Title": "Game Play Analysis II ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/find-bottom-left-tree-value",
        "Title": "Find Bottom Left Tree Value ",
        "Description": "b'Given the root of a binary tree, return the leftmost value in the last row of the tree.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: root = [2,1,3]\\nOutput: 1\\n\\nExample 2:\\n\\nInput: root = [1,2,3,4,null,5,6,null,null,7]\\nOutput: 7\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of nodes in the tree is in the range [1, 104].\\n-231 <= Node.val <= 231 - 1\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/freedom-trail",
        "Title": "Freedom Trail ",
        "Description": "b'In the video game Fallout 4, the quest \"Road to Freedom\" requires players to reach a metal dial called the \"Freedom Trail Ring\" and use the dial to spell a specific keyword to open the door.\\nGiven a string ring that represents the code engraved on the outer ring and another string key that represents the keyword that needs to be spelled, return the minimum number of steps to spell all the characters in the keyword.\\nInitially, the first character of the ring is aligned at the \"12:00\" direction. You should spell all the characters in key one by one by rotating ring clockwise or anticlockwise to make each character of the string key aligned at the \"12:00\" direction and then by pressing the center button.\\nAt the stage of rotating the ring to spell the key character key[i]:\\n\\nYou can rotate the ring clockwise or anticlockwise by one place, which counts as one step. The final purpose of the rotation is to align one of ring\\'s characters at the \"12:00\" direction, where this character must equal key[i].\\nIf the character key[i] has been aligned at the \"12:00\" direction, press the center button to spell, which also counts as one step. After the pressing, you could begin to spell the next character in the key (next stage). Otherwise, you have finished all the spelling.\\n\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: ring = \"godding\", key = \"gd\"\\nOutput: 4\\nExplanation:\\nFor the first key character \\'g\\', since it is already in place, we just need 1 step to spell this character. \\nFor the second key character \\'d\\', we need to rotate the ring \"godding\" anticlockwise by two steps to make it become \"ddinggo\".\\nAlso, we need 1 more step for spelling.\\nSo the final output is 4.\\n\\nExample 2:\\nInput: ring = \"godding\", key = \"godding\"\\nOutput: 13\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= ring.length, key.length <= 100\\nring and key consist of only lower case English letters.\\nIt is guaranteed that key could always be spelled by rotating ring.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/find-largest-value-in-each-tree-row",
        "Title": "Find Largest Value in Each Tree Row ",
        "Description": "b'Given the root of a binary tree, return an array of the largest value in each row of the tree (0-indexed).\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: root = [1,3,2,5,3,null,9]\\nOutput: [1,3,9]\\n\\nExample 2:\\nInput: root = [1,2,3]\\nOutput: [1,3]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of nodes in the tree will be in the range [0, 104].\\n-231 <= Node.val <= 231 - 1\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/longest-palindromic-subsequence",
        "Title": "Longest Palindromic Subsequence ",
        "Description": "b'Given a string s, find the longest palindromic subsequence\\'s length in s.\\nA subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.\\n\\xc2\\xa0\\nExample 1:\\nInput: s = \"bbbab\"\\nOutput: 4\\nExplanation: One possible longest palindromic subsequence is \"bbbb\".\\n\\nExample 2:\\nInput: s = \"cbbd\"\\nOutput: 2\\nExplanation: One possible longest palindromic subsequence is \"bb\".\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= s.length <= 1000\\ns consists only of lowercase English letters.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/super-washing-machines",
        "Title": "Super Washing Machines ",
        "Description": "b\"You have n super washing machines on a line. Initially, each washing machine has some dresses or is empty.\\nFor each move, you could choose any m (1 <= m <= n) washing machines, and pass one dress of each washing machine to one of its adjacent washing machines at the same time.\\nGiven an integer array machines representing the number of dresses in each washing machine from left to right on the line, return the minimum number of moves to make all the washing machines have the same number of dresses. If it is not possible to do it, return -1.\\n\\xc2\\xa0\\nExample 1:\\nInput: machines = [1,0,5]\\nOutput: 3\\nExplanation:\\n1st move:    1     0 <-- 5    =>    1     1     4\\n2nd move:    1 <-- 1 <-- 4    =>    2     1     3\\n3rd move:    2     1 <-- 3    =>    2     2     2\\n\\nExample 2:\\nInput: machines = [0,3,0]\\nOutput: 2\\nExplanation:\\n1st move:    0 <-- 3     0    =>    1     2     0\\n2nd move:    1     2 --> 0    =>    1     1     1\\n\\nExample 3:\\nInput: machines = [0,2,0]\\nOutput: -1\\nExplanation:\\nIt's impossible to make all three washing machines have the same number of dresses.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nn == machines.length\\n1 <= n <= 104\\n0 <= machines[i] <= 105\\n\\n\""
    },
    {
        "URL": "https://leetcode.com/problems/coin-change-2",
        "Title": "Coin Change 2 ",
        "Description": "b'You are given an integer array coins representing coins of different denominations and an integer amount representing a total amount of money.\\nReturn the number of combinations that make up that amount. If that amount of money cannot be made up by any combination of the coins, return 0.\\nYou may assume that you have an infinite number of each kind of coin.\\nThe answer is guaranteed to fit into a signed 32-bit integer.\\n\\xc2\\xa0\\nExample 1:\\nInput: amount = 5, coins = [1,2,5]\\nOutput: 4\\nExplanation: there are four ways to make up the amount:\\n5=5\\n5=2+2+1\\n5=2+1+1+1\\n5=1+1+1+1+1\\n\\nExample 2:\\nInput: amount = 3, coins = [2]\\nOutput: 0\\nExplanation: the amount of 3 cannot be made up just with coins of 2.\\n\\nExample 3:\\nInput: amount = 10, coins = [10]\\nOutput: 1\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= coins.length <= 300\\n1 <= coins[i] <= 5000\\nAll the values of coins are unique.\\n0 <= amount <= 5000\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/random-flip-matrix",
        "Title": "Random Flip Matrix ",
        "Description": "b'There is an m x n binary grid matrix with all the values set 0 initially. Design an algorithm to randomly pick an index (i, j) where matrix[i][j] == 0 and flips it to 1. All the indices (i, j) where matrix[i][j] == 0 should be equally likely to be returned.\\nOptimize your algorithm to minimize the number of calls made to the built-in random function of your language and optimize the time and space complexity.\\nImplement the Solution class:\\n\\nSolution(int m, int n) Initializes the object with the size of the binary matrix m and n.\\nint[] flip() Returns a random index [i, j] of the matrix where matrix[i][j] == 0 and flips it to 1.\\nvoid reset() Resets all the values of the matrix to be 0.\\n\\n\\xc2\\xa0\\nExample 1:\\nInput\\n[\"Solution\", \"flip\", \"flip\", \"flip\", \"reset\", \"flip\"]\\n[[3, 1], [], [], [], [], []]\\nOutput\\n[null, [1, 0], [2, 0], [0, 0], null, [2, 0]]\\n\\nExplanation\\nSolution solution = new Solution(3, 1);\\nsolution.flip();  // return [1, 0], [0,0], [1,0], and [2,0] should be equally likely to be returned.\\nsolution.flip();  // return [2, 0], Since [1,0] was returned, [2,0] and [0,0]\\nsolution.flip();  // return [0, 0], Based on the previously returned indices, only [0,0] can be returned.\\nsolution.reset(); // All the values are reset to 0 and can be returned.\\nsolution.flip();  // return [2, 0], [0,0], [1,0], and [2,0] should be equally likely to be returned.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= m, n <= 104\\nThere will be at least one free cell for each call to flip.\\nAt most 1000 calls will be made to flip and reset.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/detect-capital",
        "Title": "Detect Capital ",
        "Description": "b'We define the usage of capitals in a word to be right when one of the following cases holds:\\n\\nAll letters in this word are capitals, like \"USA\".\\nAll letters in this word are not capitals, like \"leetcode\".\\nOnly the first letter in this word is capital, like \"Google\".\\n\\nGiven a string word, return true if the usage of capitals in it is right.\\n\\xc2\\xa0\\nExample 1:\\nInput: word = \"USA\"\\nOutput: true\\nExample 2:\\nInput: word = \"FlaG\"\\nOutput: false\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= word.length <= 100\\nword consists of lowercase and uppercase English letters.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/longest-uncommon-subsequence-i",
        "Title": "Longest Uncommon Subsequence I ",
        "Description": "b'Given two strings a and b, return the length of the longest uncommon subsequence between a and b. If the longest uncommon subsequence does not exist, return -1.\\nAn uncommon subsequence between two strings is a string that is a subsequence of one but not the other.\\nA subsequence of a string s is a string that can be obtained after deleting any number of characters from s.\\n\\nFor example, \"abc\" is a subsequence of \"aebdc\" because you can delete the underlined characters in \"aebdc\" to get \"abc\". Other subsequences of \"aebdc\" include \"aebdc\", \"aeb\", and \"\" (empty string).\\n\\n\\xc2\\xa0\\nExample 1:\\nInput: a = \"aba\", b = \"cdc\"\\nOutput: 3\\nExplanation: One longest uncommon subsequence is \"aba\" because \"aba\" is a subsequence of \"aba\" but not \"cdc\".\\nNote that \"cdc\" is also a longest uncommon subsequence.\\n\\nExample 2:\\nInput: a = \"aaa\", b = \"bbb\"\\nOutput: 3\\nExplanation:\\xc2\\xa0The longest uncommon subsequences are \"aaa\" and \"bbb\".\\n\\nExample 3:\\nInput: a = \"aaa\", b = \"aaa\"\\nOutput: -1\\nExplanation:\\xc2\\xa0Every subsequence of string a is also a subsequence of string b. Similarly, every subsequence of string b is also a subsequence of string a.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= a.length, b.length <= 100\\na and b consist of lower-case English letters.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/longest-uncommon-subsequence-ii",
        "Title": "Longest Uncommon Subsequence II ",
        "Description": "b'Given an array of strings strs, return the length of the longest uncommon subsequence between them. If the longest uncommon subsequence does not exist, return -1.\\nAn uncommon subsequence between an array of strings is a string that is a subsequence of one string but not the others.\\nA subsequence of a string s is a string that can be obtained after deleting any number of characters from s.\\n\\nFor example, \"abc\" is a subsequence of \"aebdc\" because you can delete the underlined characters in \"aebdc\" to get \"abc\". Other subsequences of \"aebdc\" include \"aebdc\", \"aeb\", and \"\" (empty string).\\n\\n\\xc2\\xa0\\nExample 1:\\nInput: strs = [\"aba\",\"cdc\",\"eae\"]\\nOutput: 3\\nExample 2:\\nInput: strs = [\"aaa\",\"aaa\",\"aa\"]\\nOutput: -1\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n2 <= strs.length <= 50\\n1 <= strs[i].length <= 10\\nstrs[i] consists of lowercase English letters.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/continuous-subarray-sum",
        "Title": "Continuous Subarray Sum ",
        "Description": "b'Given an integer array nums and an integer k, return true if nums has a continuous subarray of size at least two whose elements sum up to a multiple of k, or false otherwise.\\nAn integer x is a multiple of k if there exists an integer n such that x = n * k. 0 is always a multiple of k.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [23,2,4,6,7], k = 6\\nOutput: true\\nExplanation: [2, 4] is a continuous subarray of size 2 whose elements sum up to 6.\\n\\nExample 2:\\nInput: nums = [23,2,6,4,7], k = 6\\nOutput: true\\nExplanation: [23, 2, 6, 4, 7] is an continuous subarray of size 5 whose elements sum up to 42.\\n42 is a multiple of 6 because 42 = 7 * 6 and 7 is an integer.\\n\\nExample 3:\\nInput: nums = [23,2,6,4,7], k = 13\\nOutput: false\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 105\\n0 <= nums[i] <= 109\\n0 <= sum(nums[i]) <= 231 - 1\\n1 <= k <= 231 - 1\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/longest-word-in-dictionary-through-deleting",
        "Title": "Longest Word in Dictionary through Deleting ",
        "Description": "b'Given a string s and a string array dictionary, return the longest string in the dictionary that can be formed by deleting some of the given string characters. If there is more than one possible result, return the longest word with the smallest lexicographical order. If there is no possible result, return the empty string.\\n\\xc2\\xa0\\nExample 1:\\nInput: s = \"abpcplea\", dictionary = [\"ale\",\"apple\",\"monkey\",\"plea\"]\\nOutput: \"apple\"\\n\\nExample 2:\\nInput: s = \"abpcplea\", dictionary = [\"a\",\"b\",\"c\"]\\nOutput: \"a\"\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= s.length <= 1000\\n1 <= dictionary.length <= 1000\\n1 <= dictionary[i].length <= 1000\\ns and dictionary[i] consist of lowercase English letters.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/contiguous-array",
        "Title": "Contiguous Array ",
        "Description": "b'Given a binary array nums, return the maximum length of a contiguous subarray with an equal number of 0 and 1.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [0,1]\\nOutput: 2\\nExplanation: [0, 1] is the longest contiguous subarray with an equal number of 0 and 1.\\n\\nExample 2:\\nInput: nums = [0,1,0]\\nOutput: 2\\nExplanation: [0, 1] (or [1, 0]) is a longest contiguous subarray with equal number of 0 and 1.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 105\\nnums[i] is either 0 or 1.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/beautiful-arrangement",
        "Title": "Beautiful Arrangement ",
        "Description": "b'Suppose you have n integers labeled 1 through n. A permutation of those n integers perm (1-indexed) is considered a beautiful arrangement if for every i (1 <= i <= n), either of the following is true:\\n\\nperm[i] is divisible by i.\\ni is divisible by perm[i].\\n\\nGiven an integer n, return the number of the beautiful arrangements that you can construct.\\n\\xc2\\xa0\\nExample 1:\\nInput: n = 2\\nOutput: 2\\nExplanation: \\nThe first beautiful arrangement is [1,2]:\\n    - perm[1] = 1 is divisible by i = 1\\n    - perm[2] = 2 is divisible by i = 2\\nThe second beautiful arrangement is [2,1]:\\n    - perm[1] = 2 is divisible by i = 1\\n    - i = 2 is divisible by perm[2] = 1\\n\\nExample 2:\\nInput: n = 1\\nOutput: 1\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= n <= 15\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/word-abbreviation",
        "Title": "Word Abbreviation ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/random-pick-with-weight",
        "Title": "Random Pick with Weight ",
        "Description": "b'You are given a 0-indexed array of positive integers w where w[i] describes the weight of the ith index.\\nYou need to implement the function pickIndex(), which randomly picks an index in the range [0, w.length - 1] (inclusive) and returns it. The probability of picking an index i is w[i] / sum(w).\\n\\nFor example, if w = [1, 3], the probability of picking index 0 is 1 / (1 + 3) = 0.25 (i.e., 25%), and the probability of picking index 1 is 3 / (1 + 3) = 0.75 (i.e., 75%).\\n\\n\\xc2\\xa0\\nExample 1:\\nInput\\n[\"Solution\",\"pickIndex\"]\\n[[[1]],[]]\\nOutput\\n[null,0]\\n\\nExplanation\\nSolution solution = new Solution([1]);\\nsolution.pickIndex(); // return 0. The only option is to return 0 since there is only one element in w.\\n\\nExample 2:\\nInput\\n[\"Solution\",\"pickIndex\",\"pickIndex\",\"pickIndex\",\"pickIndex\",\"pickIndex\"]\\n[[[1,3]],[],[],[],[],[]]\\nOutput\\n[null,1,1,1,1,0]\\n\\nExplanation\\nSolution solution = new Solution([1, 3]);\\nsolution.pickIndex(); // return 1. It is returning the second element (index = 1) that has a probability of 3/4.\\nsolution.pickIndex(); // return 1\\nsolution.pickIndex(); // return 1\\nsolution.pickIndex(); // return 1\\nsolution.pickIndex(); // return 0. It is returning the first element (index = 0) that has a probability of 1/4.\\n\\nSince this is a randomization problem, multiple answers are allowed.\\nAll of the following outputs can be considered correct:\\n[null,1,1,1,1,0]\\n[null,1,1,1,1,1]\\n[null,1,1,1,0,0]\\n[null,1,1,1,0,1]\\n[null,1,0,1,0,0]\\n......\\nand so on.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= w.length <= 104\\n1 <= w[i] <= 105\\npickIndex will be called at most 104 times.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/minesweeper",
        "Title": "Minesweeper ",
        "Description": "b'Let\\'s play the minesweeper game (Wikipedia, online game)!\\nYou are given an m x n char matrix board representing the game board where:\\n\\n\\'M\\' represents an unrevealed mine,\\n\\'E\\' represents an unrevealed empty square,\\n\\'B\\' represents a revealed blank square that has no adjacent mines (i.e., above, below, left, right, and all 4 diagonals),\\ndigit (\\'1\\' to \\'8\\') represents how many mines are adjacent to this revealed square, and\\n\\'X\\' represents a revealed mine.\\n\\nYou are also given an integer array click where click = [clickr, clickc] represents the next click position among all the unrevealed squares (\\'M\\' or \\'E\\').\\nReturn the board after revealing this position according to the following rules:\\n\\nIf a mine \\'M\\' is revealed, then the game is over. You should change it to \\'X\\'.\\nIf an empty square \\'E\\' with no adjacent mines is revealed, then change it to a revealed blank \\'B\\' and all of its adjacent unrevealed squares should be revealed recursively.\\nIf an empty square \\'E\\' with at least one adjacent mine is revealed, then change it to a digit (\\'1\\' to \\'8\\') representing the number of adjacent mines.\\nReturn the board when no more squares will be revealed.\\n\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: board = [[\"E\",\"E\",\"E\",\"E\",\"E\"],[\"E\",\"E\",\"M\",\"E\",\"E\"],[\"E\",\"E\",\"E\",\"E\",\"E\"],[\"E\",\"E\",\"E\",\"E\",\"E\"]], click = [3,0]\\nOutput: [[\"B\",\"1\",\"E\",\"1\",\"B\"],[\"B\",\"1\",\"M\",\"1\",\"B\"],[\"B\",\"1\",\"1\",\"1\",\"B\"],[\"B\",\"B\",\"B\",\"B\",\"B\"]]\\n\\nExample 2:\\n\\nInput: board = [[\"B\",\"1\",\"E\",\"1\",\"B\"],[\"B\",\"1\",\"M\",\"1\",\"B\"],[\"B\",\"1\",\"1\",\"1\",\"B\"],[\"B\",\"B\",\"B\",\"B\",\"B\"]], click = [1,2]\\nOutput: [[\"B\",\"1\",\"E\",\"1\",\"B\"],[\"B\",\"1\",\"X\",\"1\",\"B\"],[\"B\",\"1\",\"1\",\"1\",\"B\"],[\"B\",\"B\",\"B\",\"B\",\"B\"]]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nm == board.length\\nn == board[i].length\\n1 <= m, n <= 50\\nboard[i][j] is either \\'M\\', \\'E\\', \\'B\\', or a digit from \\'1\\' to \\'8\\'.\\nclick.length == 2\\n0 <= clickr < m\\n0 <= clickc < n\\nboard[clickr][clickc] is either \\'M\\' or \\'E\\'.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/minimum-absolute-difference-in-bst",
        "Title": "Minimum Absolute Difference in BST ",
        "Description": "b'Given the root of a Binary Search Tree (BST), return the minimum absolute difference between the values of any two different nodes in the tree.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: root = [4,2,6,1,3]\\nOutput: 1\\n\\nExample 2:\\n\\nInput: root = [1,0,48,null,null,12,49]\\nOutput: 1\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of nodes in the tree is in the range [2, 104].\\n0 <= Node.val <= 105\\n\\n\\xc2\\xa0\\nNote: This question is the same as 783: https://leetcode.com/problems/minimum-distance-between-bst-nodes/\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/lonely-pixel-i",
        "Title": "Lonely Pixel I ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/k-diff-pairs-in-an-array",
        "Title": "K-diff Pairs in an Array ",
        "Description": "b'Given an array of integers nums and an integer k, return the number of unique k-diff pairs in the array.\\nA k-diff pair is an integer pair (nums[i], nums[j]), where the following are true:\\n\\n0 <= i, j < nums.length\\ni != j\\nnums[i] - nums[j] == k\\n\\nNotice that |val| denotes the absolute value of val.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [3,1,4,1,5], k = 2\\nOutput: 2\\nExplanation: There are two 2-diff pairs in the array, (1, 3) and (3, 5).\\nAlthough we have two 1s in the input, we should only return the number of unique pairs.\\n\\nExample 2:\\nInput: nums = [1,2,3,4,5], k = 1\\nOutput: 4\\nExplanation: There are four 1-diff pairs in the array, (1, 2), (2, 3), (3, 4) and (4, 5).\\n\\nExample 3:\\nInput: nums = [1,3,1,5,4], k = 0\\nOutput: 1\\nExplanation: There is one 0-diff pair in the array, (1, 1).\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 104\\n-107 <= nums[i] <= 107\\n0 <= k <= 107\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/lonely-pixel-ii",
        "Title": "Lonely Pixel II ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/game-play-analysis-iii",
        "Title": "Game Play Analysis III ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/encode-and-decode-tinyurl",
        "Title": "Encode and Decode TinyURL ",
        "Description": "b'Note: This is a companion problem to the System Design problem: Design TinyURL.\\nTinyURL is a URL shortening service where you enter a URL such as https://leetcode.com/problems/design-tinyurl and it returns a short URL such as http://tinyurl.com/4e9iAk. Design a class to encode a URL and decode a tiny URL.\\nThere is no restriction on how your encode/decode algorithm should work. You just need to ensure that a URL can be encoded to a tiny URL and the tiny URL can be decoded to the original URL.\\nImplement the Solution class:\\n\\nSolution() Initializes the object of the system.\\nString encode(String longUrl) Returns a tiny URL for the given longUrl.\\nString decode(String shortUrl) Returns the original long URL for the given shortUrl. It is guaranteed that the given shortUrl was encoded by the same object.\\n\\n\\xc2\\xa0\\nExample 1:\\nInput: url = \"https://leetcode.com/problems/design-tinyurl\"\\nOutput: \"https://leetcode.com/problems/design-tinyurl\"\\n\\nExplanation:\\nSolution obj = new Solution();\\nstring tiny = obj.encode(url); // returns the encoded tiny url.\\nstring ans = obj.decode(tiny); // returns the original url after deconding it.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= url.length <= 104\\nurl is guranteed to be a valid URL.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/construct-binary-tree-from-string",
        "Title": "Construct Binary Tree from String ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/complex-number-multiplication",
        "Title": "Complex Number Multiplication ",
        "Description": "b'A complex number can be represented as a string on the form \"real+imaginaryi\" where:\\n\\nreal is the real part and is an integer in the range [-100, 100].\\nimaginary is the imaginary part and is an integer in the range [-100, 100].\\ni2 == -1.\\n\\nGiven two complex numbers num1 and num2 as strings, return a string of the complex number that represents their multiplications.\\n\\xc2\\xa0\\nExample 1:\\nInput: num1 = \"1+1i\", num2 = \"1+1i\"\\nOutput: \"0+2i\"\\nExplanation: (1 + i) * (1 + i) = 1 + i2 + 2 * i = 2i, and you need convert it to the form of 0+2i.\\n\\nExample 2:\\nInput: num1 = \"1+-1i\", num2 = \"1+-1i\"\\nOutput: \"0+-2i\"\\nExplanation: (1 - i) * (1 - i) = 1 + i2 - 2 * i = -2i, and you need convert it to the form of 0+-2i.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nnum1 and num2 are valid complex numbers.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/convert-bst-to-greater-tree",
        "Title": "Convert BST to Greater Tree ",
        "Description": "b\"Given the root of a Binary Search Tree (BST), convert it to a Greater Tree such that every key of the original BST is changed to the original key plus the sum of all keys greater than the original key in BST.\\nAs a reminder, a binary search tree is a tree that satisfies these constraints:\\n\\nThe left subtree of a node contains only nodes with keys less than the node's key.\\nThe right subtree of a node contains only nodes with keys greater than the node's key.\\nBoth the left and right subtrees must also be binary search trees.\\n\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: root = [4,1,6,0,2,5,7,null,null,null,3,null,null,null,8]\\nOutput: [30,36,21,36,35,26,15,null,null,null,33,null,null,null,8]\\n\\nExample 2:\\nInput: root = [0,null,1]\\nOutput: [1,null,1]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of nodes in the tree is in the range [0, 104].\\n-104 <= Node.val <= 104\\nAll the values in the tree are unique.\\nroot is guaranteed to be a valid binary search tree.\\n\\n\\xc2\\xa0\\nNote: This question is the same as 1038: https://leetcode.com/problems/binary-search-tree-to-greater-sum-tree/\\n\""
    },
    {
        "URL": "https://leetcode.com/problems/minimum-time-difference",
        "Title": "Minimum Time Difference ",
        "Description": "b'Given a list of 24-hour clock time points in \"HH:MM\" format, return the minimum minutes difference between any two time-points in the list.\\n\\xc2\\xa0\\nExample 1:\\nInput: timePoints = [\"23:59\",\"00:00\"]\\nOutput: 1\\nExample 2:\\nInput: timePoints = [\"00:00\",\"23:59\",\"00:00\"]\\nOutput: 0\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n2 <= timePoints.length <= 2 * 104\\ntimePoints[i] is in the format \"HH:MM\".\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/single-element-in-a-sorted-array",
        "Title": "Single Element in a Sorted Array ",
        "Description": "b'You are given a sorted array consisting of only integers where every element appears exactly twice, except for one element which appears exactly once.\\nReturn the single element that appears only once.\\nYour solution must run in O(log n) time and O(1) space.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [1,1,2,3,3,4,4,8,8]\\nOutput: 2\\nExample 2:\\nInput: nums = [3,3,7,7,10,11,11]\\nOutput: 10\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 105\\n0 <= nums[i] <= 105\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/reverse-string-ii",
        "Title": "Reverse String II ",
        "Description": "b'Given a string s and an integer k, reverse the first k characters for every 2k characters counting from the start of the string.\\nIf there are fewer than k characters left, reverse all of them. If there are less than 2k but greater than or equal to k characters, then reverse the first k characters and leave the other as original.\\n\\xc2\\xa0\\nExample 1:\\nInput: s = \"abcdefg\", k = 2\\nOutput: \"bacdfeg\"\\nExample 2:\\nInput: s = \"abcd\", k = 2\\nOutput: \"bacd\"\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= s.length <= 104\\ns consists of only lowercase English letters.\\n1 <= k <= 104\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/01-matrix",
        "Title": "01 Matrix ",
        "Description": "b'Given an m x n binary matrix mat, return the distance of the nearest 0 for each cell.\\nThe distance between two adjacent cells is 1.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: mat = [[0,0,0],[0,1,0],[0,0,0]]\\nOutput: [[0,0,0],[0,1,0],[0,0,0]]\\n\\nExample 2:\\n\\nInput: mat = [[0,0,0],[0,1,0],[1,1,1]]\\nOutput: [[0,0,0],[0,1,0],[1,2,1]]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nm == mat.length\\nn == mat[i].length\\n1 <= m, n <= 104\\n1 <= m * n <= 104\\nmat[i][j] is either 0 or 1.\\nThere is at least one 0 in mat.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/diameter-of-binary-tree",
        "Title": "Diameter of Binary Tree ",
        "Description": "b'Given the root of a binary tree, return the length of the diameter of the tree.\\nThe diameter of a binary tree is the length of the longest path between any two nodes in a tree. This path may or may not pass through the root.\\nThe length of a path between two nodes is represented by the number of edges between them.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: root = [1,2,3,4,5]\\nOutput: 3\\nExplanation: 3 is the length of the path [4,2,1,3] or [5,2,1,3].\\n\\nExample 2:\\nInput: root = [1,2]\\nOutput: 1\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of nodes in the tree is in the range [1, 104].\\n-100 <= Node.val <= 100\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/output-contest-matches",
        "Title": "Output Contest Matches ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/boundary-of-binary-tree",
        "Title": "Boundary of Binary Tree ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/remove-boxes",
        "Title": "Remove Boxes ",
        "Description": "b'You are given several boxes with different colors represented by different positive numbers.\\nYou may experience several rounds to remove boxes until there is no box left. Each time you can choose some continuous boxes with the same color (i.e., composed of k boxes, k >= 1), remove them and get k * k points.\\nReturn the maximum points you can get.\\n\\xc2\\xa0\\nExample 1:\\nInput: boxes = [1,3,2,2,2,3,4,3,1]\\nOutput: 23\\nExplanation:\\n[1, 3, 2, 2, 2, 3, 4, 3, 1] \\n----> [1, 3, 3, 4, 3, 1] (3*3=9 points) \\n----> [1, 3, 3, 3, 1] (1*1=1 points) \\n----> [1, 1] (3*3=9 points) \\n----> [] (2*2=4 points)\\n\\nExample 2:\\nInput: boxes = [1,1,1]\\nOutput: 9\\n\\nExample 3:\\nInput: boxes = [1]\\nOutput: 1\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= boxes.length <= 100\\n1 <= boxes[i]\\xc2\\xa0<= 100\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/number-of-provinces",
        "Title": "Number of Provinces ",
        "Description": "b'There are n cities. Some of them are connected, while some are not. If city a is connected directly with city b, and city b is connected directly with city c, then city a is connected indirectly with city c.\\nA province is a group of directly or indirectly connected cities and no other cities outside of the group.\\nYou are given an n x n matrix isConnected where isConnected[i][j] = 1 if the ith city and the jth city are directly connected, and isConnected[i][j] = 0 otherwise.\\nReturn the total number of provinces.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: isConnected = [[1,1,0],[1,1,0],[0,0,1]]\\nOutput: 2\\n\\nExample 2:\\n\\nInput: isConnected = [[1,0,0],[0,1,0],[0,0,1]]\\nOutput: 3\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= n <= 200\\nn == isConnected.length\\nn == isConnected[i].length\\nisConnected[i][j] is 1 or 0.\\nisConnected[i][i] == 1\\nisConnected[i][j] == isConnected[j][i]\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/split-array-with-equal-sum",
        "Title": "Split Array with Equal Sum ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/binary-tree-longest-consecutive-sequence-ii",
        "Title": "Binary Tree Longest Consecutive Sequence II ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/game-play-analysis-iv",
        "Title": "Game Play Analysis IV ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/student-attendance-record-i",
        "Title": "Student Attendance Record I ",
        "Description": "b'You are given a string s representing an attendance record for a student where each character signifies whether the student was absent, late, or present on that day. The record only contains the following three characters:\\n\\n\\'A\\': Absent.\\n\\'L\\': Late.\\n\\'P\\': Present.\\n\\nThe student is eligible for an attendance award if they meet both of the following criteria:\\n\\nThe student was absent (\\'A\\') for strictly fewer than 2 days total.\\nThe student was never late (\\'L\\') for 3 or more consecutive days.\\n\\nReturn true if the student is eligible for an attendance award, or false otherwise.\\n\\xc2\\xa0\\nExample 1:\\nInput: s = \"PPALLP\"\\nOutput: true\\nExplanation: The student has fewer than 2 absences and was never late 3 or more consecutive days.\\n\\nExample 2:\\nInput: s = \"PPALLL\"\\nOutput: false\\nExplanation: The student was late 3 consecutive days in the last 3 days, so is not eligible for the award.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= s.length <= 1000\\ns[i] is either \\'A\\', \\'L\\', or \\'P\\'.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/student-attendance-record-ii",
        "Title": "Student Attendance Record II ",
        "Description": "b'An attendance record for a student can be represented as a string where each character signifies whether the student was absent, late, or present on that day. The record only contains the following three characters:\\n\\n\\'A\\': Absent.\\n\\'L\\': Late.\\n\\'P\\': Present.\\n\\nAny student is eligible for an attendance award if they meet both of the following criteria:\\n\\nThe student was absent (\\'A\\') for strictly fewer than 2 days total.\\nThe student was never late (\\'L\\') for 3 or more consecutive days.\\n\\nGiven an integer n, return the number of possible attendance records of length n that make a student eligible for an attendance award. The answer may be very large, so return it modulo 109 + 7.\\n\\xc2\\xa0\\nExample 1:\\nInput: n = 2\\nOutput: 8\\nExplanation: There are 8 records with length 2 that are eligible for an award:\\n\"PP\", \"AP\", \"PA\", \"LP\", \"PL\", \"AL\", \"LA\", \"LL\"\\nOnly \"AA\" is not eligible because there are 2 absences (there need to be fewer than 2).\\n\\nExample 2:\\nInput: n = 1\\nOutput: 3\\n\\nExample 3:\\nInput: n = 10101\\nOutput: 183236316\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= n <= 105\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/optimal-division",
        "Title": "Optimal Division ",
        "Description": "b'You are given an integer array nums. The adjacent integers in nums will perform the float division.\\n\\nFor example, for nums = [2,3,4], we will evaluate the expression \"2/3/4\".\\n\\nHowever, you can add any number of parenthesis at any position to change the priority of operations. You want to add these parentheses such the value of the expression after the evaluation is maximum.\\nReturn the corresponding expression that has the maximum value in string format.\\nNote: your expression should not contain redundant parenthesis.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [1000,100,10,2]\\nOutput: \"1000/(100/10/2)\"\\nExplanation:\\n1000/(100/10/2) = 1000/((100/10)/2) = 200\\nHowever, the bold parenthesis in \"1000/((100/10)/2)\" are redundant, since they don\\'t influence the operation priority. So you should return \"1000/(100/10/2)\".\\nOther cases:\\n1000/(100/10)/2 = 50\\n1000/(100/(10/2)) = 50\\n1000/100/10/2 = 0.5\\n1000/100/(10/2) = 2\\n\\nExample 2:\\nInput: nums = [2,3,4]\\nOutput: \"2/(3/4)\"\\n\\nExample 3:\\nInput: nums = [2]\\nOutput: \"2\"\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 10\\n2 <= nums[i] <= 1000\\nThere is only one optimal division for the given iput.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/brick-wall",
        "Title": "Brick Wall ",
        "Description": "b'There is a rectangular brick wall in front of you with n rows of bricks. The ith row has some number of bricks each of the same height (i.e., one unit) but they can be of different widths. The total width of each row is the same.\\nDraw a vertical line from the top to the bottom and cross the least bricks. If your line goes through the edge of a brick, then the brick is not considered as crossed. You cannot draw a line just along one of the two vertical edges of the wall, in which case the line will obviously cross no bricks.\\nGiven the 2D array wall that contains the information about the wall, return the minimum number of crossed bricks after drawing such a vertical line.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: wall = [[1,2,2,1],[3,1,2],[1,3,2],[2,4],[3,1,2],[1,3,1,1]]\\nOutput: 2\\n\\nExample 2:\\nInput: wall = [[1],[1],[1]]\\nOutput: 3\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nn == wall.length\\n1 <= n <= 104\\n1 <= wall[i].length <= 104\\n1 <= sum(wall[i].length) <= 2 * 104\\nsum(wall[i]) is the same for each row i.\\n1 <= wall[i][j] <= 231 - 1\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/split-concatenated-strings",
        "Title": "Split Concatenated Strings ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/next-greater-element-iii",
        "Title": "Next Greater Element III ",
        "Description": "b'Given a positive integer n, find the smallest integer which has exactly the same digits existing in the integer n and is greater in value than n. If no such positive integer exists, return -1.\\nNote that the returned integer should fit in 32-bit integer, if there is a valid answer but it does not fit in 32-bit integer, return -1.\\n\\xc2\\xa0\\nExample 1:\\nInput: n = 12\\nOutput: 21\\nExample 2:\\nInput: n = 21\\nOutput: -1\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= n <= 231 - 1\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/reverse-words-in-a-string-iii",
        "Title": "Reverse Words in a String III ",
        "Description": "b'Given a string s, reverse the order of characters in each word within a sentence while still preserving whitespace and initial word order.\\n\\xc2\\xa0\\nExample 1:\\nInput: s = \"Let\\'s take LeetCode contest\"\\nOutput: \"s\\'teL ekat edoCteeL tsetnoc\"\\nExample 2:\\nInput: s = \"God Ding\"\\nOutput: \"doG gniD\"\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= s.length <= 5 * 104\\ns contains printable ASCII characters.\\ns does not contain any leading or trailing spaces.\\nThere is at least one word in s.\\nAll the words in s are separated by a single space.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/logical-or-of-two-binary-grids-represented-as-quad-trees",
        "Title": "Logical OR of Two Binary Grids Represented as Quad-Trees ",
        "Description": "b\"A Binary Matrix is a matrix in which all the elements are either 0 or 1.\\nGiven quadTree1 and quadTree2. quadTree1 represents a n * n binary matrix and quadTree2 represents another n * n binary matrix.\\nReturn a Quad-Tree representing the n * n binary matrix which is the result of logical bitwise OR of the two binary matrixes represented by quadTree1 and quadTree2.\\nNotice that you can assign the value of a node to True or False when isLeaf is False, and both are accepted in the answer.\\nA Quad-Tree is a tree data structure in which each internal node has exactly four children. Besides, each node has two attributes:\\n\\nval: True if the node represents a grid of 1's or False if the node represents a grid of 0's.\\nisLeaf: True if the node is leaf node on the tree or False if the node has the four children.\\n\\nclass Node {\\n    public boolean val;\\n    public boolean isLeaf;\\n    public Node topLeft;\\n    public Node topRight;\\n    public Node bottomLeft;\\n    public Node bottomRight;\\n}\\nWe can construct a Quad-Tree from a two-dimensional area using the following steps:\\n\\nIf the current grid has the same value (i.e all 1's or all 0's) set isLeaf True and set val to the value of the grid and set the four children to Null and stop.\\nIf the current grid has different values, set isLeaf to False and set val to any value and divide the current grid into four sub-grids as shown in the photo.\\nRecurse for each of the children with the proper sub-grid.\\n\\n\\nIf you want to know more about the Quad-Tree, you can refer to the wiki.\\nQuad-Tree format:\\nThe input/output represents the serialized format of a Quad-Tree using level order traversal, where null signifies a path terminator where no node exists below.\\nIt is very similar to the serialization of the binary tree. The only difference is that the node is represented as a list [isLeaf, val].\\nIf the value of isLeaf or val is True we represent it as 1 in the list [isLeaf, val] and if the value of isLeaf or val is False we represent it as 0.\\n\\xc2\\xa0\\nExample 1:\\n \\nInput: quadTree1 = [[0,1],[1,1],[1,1],[1,0],[1,0]]\\n, quadTree2 = [[0,1],[1,1],[0,1],[1,1],[1,0],null,null,null,null,[1,0],[1,0],[1,1],[1,1]]\\nOutput: [[0,0],[1,1],[1,1],[1,1],[1,0]]\\nExplanation: quadTree1 and quadTree2 are shown above. You can see the binary matrix which is represented by each Quad-Tree.\\nIf we apply logical bitwise OR on the two binary matrices we get the binary matrix below which is represented by the result Quad-Tree.\\nNotice that the binary matrices shown are only for illustration, you don't have to construct the binary matrix to get the result tree.\\n\\n\\nExample 2:\\nInput: quadTree1 = [[1,0]], quadTree2 = [[1,0]]\\nOutput: [[1,0]]\\nExplanation: Each tree represents a binary matrix of size 1*1. Each matrix contains only zero.\\nThe resulting matrix is of size 1*1 with also zero.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nquadTree1 and quadTree2 are both valid Quad-Trees each representing a n * n grid.\\nn == 2x where 0 <= x <= 9.\\n\\n\""
    },
    {
        "URL": "https://leetcode.com/problems/maximum-depth-of-n-ary-tree",
        "Title": "Maximum Depth of N-ary Tree ",
        "Description": "b'Given a n-ary tree, find its maximum depth.\\nThe maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.\\nNary-Tree input serialization is represented in their level order traversal, each group of children is separated by the null value (See examples).\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: root = [1,null,3,2,4,null,5,6]\\nOutput: 3\\n\\nExample 2:\\n\\nInput: root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]\\nOutput: 5\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe total number of nodes is in the range [0, 104].\\nThe depth of the n-ary tree is less than or equal to 1000.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/subarray-sum-equals-k",
        "Title": "Subarray Sum Equals K ",
        "Description": "b'Given an array of integers nums and an integer k, return the total number of subarrays whose sum equals to k.\\nA subarray is a contiguous non-empty sequence of elements within an array.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [1,1,1], k = 2\\nOutput: 2\\nExample 2:\\nInput: nums = [1,2,3], k = 3\\nOutput: 2\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 2 * 104\\n-1000 <= nums[i] <= 1000\\n-107 <= k <= 107\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/array-partition-i",
        "Title": "Array Partition I ",
        "Description": "b'Given an integer array nums of 2n integers, group these integers into n pairs (a1, b1), (a2, b2), ..., (an, bn) such that the sum of min(ai, bi) for all i is maximized. Return the maximized sum.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [1,4,3,2]\\nOutput: 4\\nExplanation: All possible pairings (ignoring the ordering of elements) are:\\n1. (1, 4), (2, 3) -> min(1, 4) + min(2, 3) = 1 + 2 = 3\\n2. (1, 3), (2, 4) -> min(1, 3) + min(2, 4) = 1 + 2 = 3\\n3. (1, 2), (3, 4) -> min(1, 2) + min(3, 4) = 1 + 3 = 4\\nSo the maximum possible sum is 4.\\nExample 2:\\nInput: nums = [6,2,6,5,1,2]\\nOutput: 9\\nExplanation: The optimal pairing is (2, 1), (2, 5), (6, 6). min(2, 1) + min(2, 5) + min(6, 6) = 1 + 2 + 6 = 9.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= n <= 104\\nnums.length == 2 * n\\n-104 <= nums[i] <= 104\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/longest-line-of-consecutive-one-in-matrix",
        "Title": "Longest Line of Consecutive One in Matrix ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/binary-tree-tilt",
        "Title": "Binary Tree Tilt ",
        "Description": "b\"Given the root of a binary tree, return the sum of every tree node's tilt.\\nThe tilt of a tree node is the absolute difference between the sum of all left subtree node values and all right subtree node values. If a node does not have a left child, then the sum of the left subtree node values is treated as 0. The rule is similar if the node does not have a right child.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: root = [1,2,3]\\nOutput: 1\\nExplanation: \\nTilt of node 2 : |0-0| = 0 (no children)\\nTilt of node 3 : |0-0| = 0 (no children)\\nTilt of node 1 : |2-3| = 1 (left subtree is just left child, so sum is 2; right subtree is just right child, so sum is 3)\\nSum of every tilt : 0 + 0 + 1 = 1\\n\\nExample 2:\\n\\nInput: root = [4,2,9,3,5,null,7]\\nOutput: 15\\nExplanation: \\nTilt of node 3 : |0-0| = 0 (no children)\\nTilt of node 5 : |0-0| = 0 (no children)\\nTilt of node 7 : |0-0| = 0 (no children)\\nTilt of node 2 : |3-5| = 2 (left subtree is just left child, so sum is 3; right subtree is just right child, so sum is 5)\\nTilt of node 9 : |0-7| = 7 (no left child, so sum is 0; right subtree is just right child, so sum is 7)\\nTilt of node 4 : |(3+5+2)-(9+7)| = |10-16| = 6 (left subtree values are 3, 5, and 2, which sums to 10; right subtree values are 9 and 7, which sums to 16)\\nSum of every tilt : 0 + 0 + 0 + 2 + 7 + 6 = 15\\n\\nExample 3:\\n\\nInput: root = [21,7,14,1,1,2,2,3,3]\\nOutput: 9\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of nodes in the tree is in the range [0, 104].\\n-1000 <= Node.val <= 1000\\n\\n\""
    },
    {
        "URL": "https://leetcode.com/problems/find-the-closest-palindrome",
        "Title": "Find the Closest Palindrome ",
        "Description": "b'Given a string n representing an integer, return the closest integer (not including itself), which is a palindrome. If there is a tie, return the smaller one.\\nThe closest is defined as the absolute difference minimized between two integers.\\n\\xc2\\xa0\\nExample 1:\\nInput: n = \"123\"\\nOutput: \"121\"\\n\\nExample 2:\\nInput: n = \"1\"\\nOutput: \"0\"\\nExplanation: 0 and 2 are the closest palindromes but we return the smallest which is 0.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= n.length <= 18\\nn consists of only digits.\\nn does not have leading zeros.\\nn is representing an integer in the range [1, 1018 - 1].\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/array-nesting",
        "Title": "Array Nesting ",
        "Description": "b'You are given an integer array nums of length n where nums is a permutation of the numbers in the range [0, n - 1].\\nYou should build a set s[k] = {nums[k], nums[nums[k]], nums[nums[nums[k]]], ... } subjected to the following rule:\\n\\nThe first element in s[k] starts with the selection of the element nums[k] of index = k.\\nThe next element in s[k] should be nums[nums[k]], and then nums[nums[nums[k]]], and so on.\\nWe stop adding right before a duplicate element occurs in s[k].\\n\\nReturn the longest length of a set s[k].\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [5,4,0,3,1,6,2]\\nOutput: 4\\nExplanation: \\nnums[0] = 5, nums[1] = 4, nums[2] = 0, nums[3] = 3, nums[4] = 1, nums[5] = 6, nums[6] = 2.\\nOne of the longest sets s[k]:\\ns[0] = {nums[0], nums[5], nums[6], nums[2]} = {5, 6, 2, 0}\\n\\nExample 2:\\nInput: nums = [0,1,2]\\nOutput: 1\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 105\\n0 <= nums[i] < nums.length\\nAll the values of nums are unique.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/reshape-the-matrix",
        "Title": "Reshape the Matrix ",
        "Description": "b'In MATLAB, there is a handy function called reshape which can reshape an m x n matrix into a new one with a different size r x c keeping its original data.\\nYou are given an m x n matrix mat and two integers r and c representing the number of rows and the number of columns of the wanted reshaped matrix.\\nThe reshaped matrix should be filled with all the elements of the original matrix in the same row-traversing order as they were.\\nIf the reshape operation with given parameters is possible and legal, output the new reshaped matrix; Otherwise, output the original matrix.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: mat = [[1,2],[3,4]], r = 1, c = 4\\nOutput: [[1,2,3,4]]\\n\\nExample 2:\\n\\nInput: mat = [[1,2],[3,4]], r = 2, c = 4\\nOutput: [[1,2],[3,4]]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nm == mat.length\\nn == mat[i].length\\n1 <= m, n <= 100\\n-1000 <= mat[i][j] <= 1000\\n1 <= r, c <= 300\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/permutation-in-string",
        "Title": "Permutation in String ",
        "Description": "b'Given two strings s1 and s2, return true if s2 contains a permutation of s1, or false otherwise.\\nIn other words, return true if one of s1\\'s permutations is the substring of s2.\\n\\xc2\\xa0\\nExample 1:\\nInput: s1 = \"ab\", s2 = \"eidbaooo\"\\nOutput: true\\nExplanation: s2 contains one permutation of s1 (\"ba\").\\n\\nExample 2:\\nInput: s1 = \"ab\", s2 = \"eidboaoo\"\\nOutput: false\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= s1.length, s2.length <= 104\\ns1 and s2 consist of lowercase English letters.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/maximum-vacation-days",
        "Title": "Maximum Vacation Days ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/median-employee-salary",
        "Title": "Median Employee Salary ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/managers-with-at-least-5-direct-reports",
        "Title": "Managers with at Least 5 Direct Reports ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/find-median-given-frequency-of-numbers",
        "Title": "Find Median Given Frequency of Numbers ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/subtree-of-another-tree",
        "Title": "Subtree of Another Tree ",
        "Description": "b\"Given the roots of two binary trees root and subRoot, return true if there is a subtree of root with the same structure and node values of subRoot and false otherwise.\\nA subtree of a binary tree tree is a tree that consists of a node in tree and all of this node's descendants. The tree tree could also be considered as a subtree of itself.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: root = [3,4,5,1,2], subRoot = [4,1,2]\\nOutput: true\\n\\nExample 2:\\n\\nInput: root = [3,4,5,1,2,null,null,null,null,0], subRoot = [4,1,2]\\nOutput: false\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of nodes in the root tree is in the range [1, 2000].\\nThe number of nodes in the subRoot tree is in the range [1, 1000].\\n-104 <= root.val <= 104\\n-104 <= subRoot.val <= 104\\n\\n\""
    },
    {
        "URL": "https://leetcode.com/problems/squirrel-simulation",
        "Title": "Squirrel Simulation ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/winning-candidate",
        "Title": "Winning Candidate ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/distribute-candies",
        "Title": "Distribute Candies ",
        "Description": "b\"Alice has n candies, where the ith candy is of type candyType[i]. Alice noticed that she started to gain weight, so she visited a doctor.\\nThe doctor advised Alice to only eat n / 2 of the candies she has (n is always even). Alice likes her candies very much, and she wants to eat the maximum number of different types of candies while still following the doctor's advice.\\nGiven the integer array candyType of length n, return the maximum number of different types of candies she can eat if she only eats n / 2 of them.\\n\\xc2\\xa0\\nExample 1:\\nInput: candyType = [1,1,2,2,3,3]\\nOutput: 3\\nExplanation: Alice can only eat 6 / 2 = 3 candies. Since there are only 3 types, she can eat one of each type.\\n\\nExample 2:\\nInput: candyType = [1,1,2,3]\\nOutput: 2\\nExplanation: Alice can only eat 4 / 2 = 2 candies. Whether she eats types [1,2], [1,3], or [2,3], she still can only eat 2 different types.\\n\\nExample 3:\\nInput: candyType = [6,6,6,6]\\nOutput: 1\\nExplanation: Alice can only eat 4 / 2 = 2 candies. Even though she can eat 2 candies, she only has 1 type.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nn == candyType.length\\n2 <= n <= 104\\nn\\xc2\\xa0is even.\\n-105 <= candyType[i] <= 105\\n\\n\""
    },
    {
        "URL": "https://leetcode.com/problems/out-of-boundary-paths",
        "Title": "Out of Boundary Paths ",
        "Description": "b'There is an m x n grid with a ball. The ball is initially at the position [startRow, startColumn]. You are allowed to move the ball to one of the four adjacent cells in the grid (possibly out of the grid crossing the grid boundary). You can apply at most maxMove moves to the ball.\\nGiven the five integers m, n, maxMove, startRow, startColumn, return the number of paths to move the ball out of the grid boundary. Since the answer can be very large, return it modulo 109 + 7.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: m = 2, n = 2, maxMove = 2, startRow = 0, startColumn = 0\\nOutput: 6\\n\\nExample 2:\\n\\nInput: m = 1, n = 3, maxMove = 3, startRow = 0, startColumn = 1\\nOutput: 12\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= m, n <= 50\\n0 <= maxMove <= 50\\n0 <= startRow < m\\n0 <= startColumn < n\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/employee-bonus",
        "Title": "Employee Bonus ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/get-highest-answer-rate-question",
        "Title": "Get Highest Answer Rate Question ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/find-cumulative-salary-of-an-employee",
        "Title": "Find Cumulative Salary of an Employee ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/count-student-number-in-departments",
        "Title": "Count Student Number in Departments ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/shortest-unsorted-continuous-subarray",
        "Title": "Shortest Unsorted Continuous Subarray ",
        "Description": "b'Given an integer array nums, you need to find one continuous subarray that if you only sort this subarray in ascending order, then the whole array will be sorted in ascending order.\\nReturn the shortest such subarray and output its length.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [2,6,4,8,10,9,15]\\nOutput: 5\\nExplanation: You need to sort [6, 4, 8, 10, 9] in ascending order to make the whole array sorted in ascending order.\\n\\nExample 2:\\nInput: nums = [1,2,3,4]\\nOutput: 0\\n\\nExample 3:\\nInput: nums = [1]\\nOutput: 0\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 104\\n-105 <= nums[i] <= 105\\n\\n\\xc2\\xa0\\nFollow up: Can you solve it in O(n) time complexity?'"
    },
    {
        "URL": "https://leetcode.com/problems/kill-process",
        "Title": "Kill Process ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/delete-operation-for-two-strings",
        "Title": "Delete Operation for Two Strings ",
        "Description": "b'Given two strings word1 and word2, return the minimum number of steps required to make word1 and word2 the same.\\nIn one step, you can delete exactly one character in either string.\\n\\xc2\\xa0\\nExample 1:\\nInput: word1 = \"sea\", word2 = \"eat\"\\nOutput: 2\\nExplanation: You need one step to make \"sea\" to \"ea\" and another step to make \"eat\" to \"ea\".\\n\\nExample 2:\\nInput: word1 = \"leetcode\", word2 = \"etco\"\\nOutput: 4\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= word1.length, word2.length <= 500\\nword1 and word2 consist of only lowercase English letters.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/find-customer-referee",
        "Title": "Find Customer Referee ",
        "Description": "b'SQL SchemaTable: Customer\\n+-------------+---------+\\n| Column Name | Type    |\\n+-------------+---------+\\n| id          | int     |\\n| name        | varchar |\\n| referee_id  | int     |\\n+-------------+---------+\\nid is the primary key column for this table.\\nEach row of this table indicates the id of a customer, their name, and the id of the customer who referred them.\\n\\n\\xc2\\xa0\\nWrite an SQL query to report the names of the customer that are not referred by the customer with id = 2.\\nReturn the result table in any order.\\nThe query result format is in the following example.\\n\\xc2\\xa0\\nExample 1:\\nInput: \\nCustomer table:\\n+----+------+------------+\\n| id | name | referee_id |\\n+----+------+------------+\\n| 1  | Will | null       |\\n| 2  | Jane | null       |\\n| 3  | Alex | 2          |\\n| 4  | Bill | null       |\\n| 5  | Zack | 1          |\\n| 6  | Mark | 2          |\\n+----+------+------------+\\nOutput: \\n+------+\\n| name |\\n+------+\\n| Will |\\n| Jane |\\n| Bill |\\n| Zack |\\n+------+\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/investments-in-2016",
        "Title": "Investments in 2016 ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/customer-placing-the-largest-number-of-orders",
        "Title": "Customer Placing the Largest Number of Orders ",
        "Description": "b'SQL SchemaTable: Orders\\n+-----------------+----------+\\n| Column Name     | Type     |\\n+-----------------+----------+\\n| order_number    | int      |\\n| customer_number | int      |\\n+-----------------+----------+\\norder_number is the primary key for this table.\\nThis table contains information about the order ID and the customer ID.\\n\\n\\xc2\\xa0\\nWrite an SQL query to find the customer_number for the customer who has placed the largest number of orders.\\nThe test cases are generated so that exactly one customer will have placed more orders than any other customer.\\nThe query result format is in the following example.\\n\\xc2\\xa0\\nExample 1:\\nInput: \\nOrders table:\\n+--------------+-----------------+\\n| order_number | customer_number |\\n+--------------+-----------------+\\n| 1            | 1               |\\n| 2            | 2               |\\n| 3            | 3               |\\n| 4            | 3               |\\n+--------------+-----------------+\\nOutput: \\n+-----------------+\\n| customer_number |\\n+-----------------+\\n| 3               |\\n+-----------------+\\nExplanation: \\nThe customer with number 3 has two orders, which is greater than either customer 1 or 2 because each of them only has one order. \\nSo the result is customer_number 3.\\n\\n\\xc2\\xa0\\nFollow up: What if more than one customer has the largest number of orders, can you find all the customer_number in this case?\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/erect-the-fence",
        "Title": "Erect the Fence ",
        "Description": "b'You are given an array trees where trees[i] = [xi, yi] represents the location of a tree in the garden.\\nYou are asked to fence the entire garden using the minimum length of rope as it is expensive. The garden is well fenced only if all the trees are enclosed.\\nReturn the coordinates of trees that are exactly located on the fence perimeter.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: points = [[1,1],[2,2],[2,0],[2,4],[3,3],[4,2]]\\nOutput: [[1,1],[2,0],[3,3],[2,4],[4,2]]\\n\\nExample 2:\\n\\nInput: points = [[1,2],[2,2],[4,2]]\\nOutput: [[4,2],[2,2],[1,2]]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= points.length <= 3000\\npoints[i].length == 2\\n0 <= xi, yi <= 100\\nAll the given points are unique.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/design-in-memory-file-system",
        "Title": "Design In-Memory File System ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/n-ary-tree-preorder-traversal",
        "Title": "N-ary Tree Preorder Traversal ",
        "Description": "b\"Given the root of an n-ary tree, return the preorder traversal of its nodes' values.\\nNary-Tree input serialization is represented in their level order traversal. Each group of children is separated by the null value (See examples)\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: root = [1,null,3,2,4,null,5,6]\\nOutput: [1,3,5,6,2,4]\\n\\nExample 2:\\n\\nInput: root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]\\nOutput: [1,2,3,6,7,11,14,4,8,12,5,9,13,10]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of nodes in the tree is in the range [0, 104].\\n0 <= Node.val <= 104\\nThe height of the n-ary tree is less than or equal to 1000.\\n\\n\\xc2\\xa0\\nFollow up: Recursive solution is trivial, could you do it iteratively?\\n\""
    },
    {
        "URL": "https://leetcode.com/problems/n-ary-tree-postorder-traversal",
        "Title": "N-ary Tree Postorder Traversal ",
        "Description": "b\"Given the root of an n-ary tree, return the postorder traversal of its nodes' values.\\nNary-Tree input serialization is represented in their level order traversal. Each group of children is separated by the null value (See examples)\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: root = [1,null,3,2,4,null,5,6]\\nOutput: [5,6,3,2,4,1]\\n\\nExample 2:\\n\\nInput: root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]\\nOutput: [2,6,14,11,7,3,12,8,4,13,9,10,5,1]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of nodes in the tree is in the range [0, 104].\\n0 <= Node.val <= 104\\nThe height of the n-ary tree is less than or equal to 1000.\\n\\n\\xc2\\xa0\\nFollow up: Recursive solution is trivial, could you do it iteratively?\\n\""
    },
    {
        "URL": "https://leetcode.com/problems/tag-validator",
        "Title": "Tag Validator ",
        "Description": "b'Given a string representing a code snippet, implement a tag validator to parse the code and return whether it is valid.\\nA code snippet is valid if all the following rules hold:\\n\\nThe code must be wrapped in a valid closed tag. Otherwise, the code is invalid.\\nA closed tag (not necessarily valid) has exactly the following format : <TAG_NAME>TAG_CONTENT</TAG_NAME>. Among them, <TAG_NAME> is the start tag, and </TAG_NAME> is the end tag. The TAG_NAME in start and end tags should be the same. A closed tag is valid if and only if the TAG_NAME and TAG_CONTENT are valid.\\nA valid TAG_NAME only contain upper-case letters, and has length in range [1,9]. Otherwise, the TAG_NAME is invalid.\\nA valid TAG_CONTENT may contain other valid closed tags, cdata and any characters (see note1) EXCEPT unmatched <, unmatched start and end tag, and unmatched or closed tags with invalid TAG_NAME. Otherwise, the TAG_CONTENT is invalid.\\nA start tag is unmatched if no end tag exists with the same TAG_NAME, and vice versa. However, you also need to consider the issue of unbalanced when tags are nested.\\nA < is unmatched if you cannot find a subsequent >. And when you find a < or </, all the subsequent characters until the next > should be parsed as TAG_NAME (not necessarily valid).\\nThe cdata has the following format : <![CDATA[CDATA_CONTENT]]>. The range of CDATA_CONTENT is defined as the characters between <![CDATA[ and the first subsequent ]]>.\\nCDATA_CONTENT may contain any characters. The function of cdata is to forbid the validator to parse CDATA_CONTENT, so even it has some characters that can be parsed as tag (no matter valid or invalid), you should treat it as regular characters.\\n\\n\\xc2\\xa0\\nExample 1:\\nInput: code = \"<DIV>This is the first line <![CDATA[<div>]]></DIV>\"\\nOutput: true\\nExplanation: \\nThe code is wrapped in a closed tag : <DIV> and </DIV>. \\nThe TAG_NAME is valid, the TAG_CONTENT consists of some characters and cdata. \\nAlthough CDATA_CONTENT has an unmatched start tag with invalid TAG_NAME, it should be considered as plain text, not parsed as a tag.\\nSo TAG_CONTENT is valid, and then the code is valid. Thus return true.\\n\\nExample 2:\\nInput: code = \"<DIV>>>  ![cdata[]] <![CDATA[<div>]>]]>]]>>]</DIV>\"\\nOutput: true\\nExplanation:\\nWe first separate the code into : start_tag|tag_content|end_tag.\\nstart_tag -> \"<DIV>\"\\nend_tag -> \"</DIV>\"\\ntag_content could also be separated into : text1|cdata|text2.\\ntext1 -> \">>  ![cdata[]] \"\\ncdata -> \"<![CDATA[<div>]>]]>\", where the CDATA_CONTENT is \"<div>]>\"\\ntext2 -> \"]]>>]\"\\nThe reason why start_tag is NOT \"<DIV>>>\" is because of the rule 6.\\nThe reason why cdata is NOT \"<![CDATA[<div>]>]]>]]>\" is because of the rule 7.\\n\\nExample 3:\\nInput: code = \"<A>  <B> </A>   </B>\"\\nOutput: false\\nExplanation: Unbalanced. If \"<A>\" is closed, then \"<B>\" must be unmatched, and vice versa.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= code.length <= 500\\ncode consists of English letters, digits, \\'<\\', \\'>\\', \\'/\\', \\'!\\', \\'[\\', \\']\\', \\'.\\', and \\' \\'.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/fraction-addition-and-subtraction",
        "Title": "Fraction Addition and Subtraction ",
        "Description": "b'Given a string expression representing an expression of fraction addition and subtraction, return the calculation result in string format.\\nThe final result should be an irreducible fraction. If your final result is an integer, change it to the format of a fraction that has a denominator 1. So in this case, 2 should be converted to 2/1.\\n\\xc2\\xa0\\nExample 1:\\nInput: expression = \"-1/2+1/2\"\\nOutput: \"0/1\"\\n\\nExample 2:\\nInput: expression = \"-1/2+1/2+1/3\"\\nOutput: \"1/3\"\\n\\nExample 3:\\nInput: expression = \"1/3-1/2\"\\nOutput: \"-1/6\"\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe input string only contains \\'0\\' to \\'9\\', \\'/\\', \\'+\\' and \\'-\\'. So does the output.\\nEach fraction (input and output) has the format \\xc2\\xb1numerator/denominator. If the first input fraction or the output is positive, then \\'+\\' will be omitted.\\nThe input only contains valid irreducible fractions, where the numerator and denominator of each fraction will always be in the range [1, 10]. If the denominator is 1, it means this fraction is actually an integer in a fraction format defined above.\\nThe number of given fractions will be in the range [1, 10].\\nThe numerator and denominator of the final result are guaranteed to be valid and in the range of 32-bit int.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/valid-square",
        "Title": "Valid Square ",
        "Description": "b'Given the coordinates of four points in 2D space p1, p2, p3 and p4, return true if the four points construct a square.\\nThe coordinate of a point pi is represented as [xi, yi]. The input is not given in any order.\\nA valid square has four equal sides with positive length and four equal angles (90-degree angles).\\n\\xc2\\xa0\\nExample 1:\\nInput: p1 = [0,0], p2 = [1,1], p3 = [1,0], p4 = [0,1]\\nOutput: true\\n\\nExample 2:\\nInput: p1 = [0,0], p2 = [1,1], p3 = [1,0], p4 = [0,12]\\nOutput: false\\n\\nExample 3:\\nInput: p1 = [1,0], p2 = [-1,0], p3 = [0,1], p4 = [0,-1]\\nOutput: true\\n\\n\\xc2\\xa0\\nConstraints:\\n\\np1.length == p2.length == p3.length == p4.length == 2\\n-104 <= xi, yi <= 104\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/longest-harmonious-subsequence",
        "Title": "Longest Harmonious Subsequence ",
        "Description": "b'We define a harmonious array as an array where the difference between its maximum value and its minimum value is exactly 1.\\nGiven an integer array nums, return the length of its longest harmonious subsequence among all its possible subsequences.\\nA subsequence of array is a sequence that can be derived from the array by deleting some or no elements without changing the order of the remaining elements.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [1,3,2,2,5,2,3,7]\\nOutput: 5\\nExplanation: The longest harmonious subsequence is [3,2,2,2,3].\\n\\nExample 2:\\nInput: nums = [1,2,3,4]\\nOutput: 2\\n\\nExample 3:\\nInput: nums = [1,1,1,1]\\nOutput: 0\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 2 * 104\\n-109 <= nums[i] <= 109\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/big-countries",
        "Title": "Big Countries ",
        "Description": "b'SQL SchemaTable: World\\n+-------------+---------+\\n| Column Name | Type    |\\n+-------------+---------+\\n| name        | varchar |\\n| continent   | varchar |\\n| area        | int     |\\n| population  | int     |\\n| gdp         | int     |\\n+-------------+---------+\\nname is the primary key column for this table.\\nEach row of this table gives information about the name of a country, the continent to which it belongs, its area, the population, and its GDP value.\\n\\n\\xc2\\xa0\\nA country is big if:\\n\\nit has an area of at least\\xc2\\xa0three million (i.e., 3000000 km2), or\\nit has a population of at least\\xc2\\xa0twenty-five million (i.e., 25000000).\\n\\nWrite an SQL query to report the name, population, and area of the big countries.\\nReturn the result table in any order.\\nThe query result format is in the following example.\\n\\xc2\\xa0\\nExample 1:\\nInput: \\nWorld table:\\n+-------------+-----------+---------+------------+--------------+\\n| name        | continent | area    | population | gdp          |\\n+-------------+-----------+---------+------------+--------------+\\n| Afghanistan | Asia      | 652230  | 25500100   | 20343000000  |\\n| Albania     | Europe    | 28748   | 2831741    | 12960000000  |\\n| Algeria     | Africa    | 2381741 | 37100000   | 188681000000 |\\n| Andorra     | Europe    | 468     | 78115      | 3712000000   |\\n| Angola      | Africa    | 1246700 | 20609294   | 100990000000 |\\n+-------------+-----------+---------+------------+--------------+\\nOutput: \\n+-------------+------------+---------+\\n| name        | population | area    |\\n+-------------+------------+---------+\\n| Afghanistan | 25500100   | 652230  |\\n| Algeria     | 37100000   | 2381741 |\\n+-------------+------------+---------+\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/classes-more-than-5-students",
        "Title": "Classes More Than 5 Students ",
        "Description": "b'SQL SchemaTable: Courses\\n+-------------+---------+\\n| Column Name | Type    |\\n+-------------+---------+\\n| student     | varchar |\\n| class       | varchar |\\n+-------------+---------+\\n(student, class) is the primary key column for this table.\\nEach row of this table indicates the name of a student and the class in which they are enrolled.\\n\\n\\xc2\\xa0\\nWrite an SQL query to report all the classes that have at least five students.\\nReturn the result table in any order.\\nThe query result format is in the following example.\\n\\xc2\\xa0\\nExample 1:\\nInput: \\nCourses table:\\n+---------+----------+\\n| student | class    |\\n+---------+----------+\\n| A       | Math     |\\n| B       | English  |\\n| C       | Math     |\\n| D       | Biology  |\\n| E       | Math     |\\n| F       | Computer |\\n| G       | Math     |\\n| H       | Math     |\\n| I       | Math     |\\n+---------+----------+\\nOutput: \\n+---------+\\n| class   |\\n+---------+\\n| Math    |\\n+---------+\\nExplanation: \\n- Math has 6 students, so we include it.\\n- English has 1 student, so we do not include it.\\n- Biology has 1 student, so we do not include it.\\n- Computer has 1 student, so we do not include it.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/friend-requests-i-overall-acceptance-rate",
        "Title": "Friend Requests I: Overall Acceptance Rate ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/range-addition-ii",
        "Title": "Range Addition II ",
        "Description": "b\"You are given an m x n matrix M initialized with all 0's and an array of operations ops, where ops[i] = [ai, bi] means M[x][y] should be incremented by one for all 0 <= x < ai and 0 <= y < bi.\\nCount and return the number of maximum integers in the matrix after performing all the operations.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: m = 3, n = 3, ops = [[2,2],[3,3]]\\nOutput: 4\\nExplanation: The maximum integer in M is 2, and there are four of it in M. So return 4.\\n\\nExample 2:\\nInput: m = 3, n = 3, ops = [[2,2],[3,3],[3,3],[3,3],[2,2],[3,3],[3,3],[3,3],[2,2],[3,3],[3,3],[3,3]]\\nOutput: 4\\n\\nExample 3:\\nInput: m = 3, n = 3, ops = []\\nOutput: 9\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= m, n <= 4 * 104\\n0 <= ops.length <= 104\\nops[i].length == 2\\n1 <= ai <= m\\n1 <= bi <= n\\n\\n\""
    },
    {
        "URL": "https://leetcode.com/problems/minimum-index-sum-of-two-lists",
        "Title": "Minimum Index Sum of Two Lists ",
        "Description": "b'Suppose Andy and Doris want to choose a restaurant for dinner, and they both have a list of favorite restaurants represented by strings.\\nYou need to help them find out their common interest with the least list index sum. If there is a choice tie between answers, output all of them with no order requirement. You could assume there always exists an answer.\\n\\xc2\\xa0\\nExample 1:\\nInput: list1 = [\"Shogun\",\"Tapioca Express\",\"Burger King\",\"KFC\"], list2 = [\"Piatti\",\"The Grill at Torrey Pines\",\"Hungry Hunter Steakhouse\",\"Shogun\"]\\nOutput: [\"Shogun\"]\\nExplanation: The only restaurant they both like is \"Shogun\".\\n\\nExample 2:\\nInput: list1 = [\"Shogun\",\"Tapioca Express\",\"Burger King\",\"KFC\"], list2 = [\"KFC\",\"Shogun\",\"Burger King\"]\\nOutput: [\"Shogun\"]\\nExplanation: The restaurant they both like and have the least index sum is \"Shogun\" with index sum 1 (0+1).\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= list1.length, list2.length <= 1000\\n1 <= list1[i].length, list2[i].length <= 30\\nlist1[i] and list2[i] consist of spaces \\' \\' and English letters.\\nAll the stings of list1 are unique.\\nAll the stings of list2\\xc2\\xa0are unique.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/non-negative-integers-without-consecutive-ones",
        "Title": "Non-negative Integers without Consecutive Ones ",
        "Description": "b'Given a positive integer n, return the number of the integers in the range [0, n] whose binary representations do not contain consecutive ones.\\n\\xc2\\xa0\\nExample 1:\\nInput: n = 5\\nOutput: 5\\nExplanation:\\nHere are the non-negative integers <= 5 with their corresponding binary representations:\\n0 : 0\\n1 : 1\\n2 : 10\\n3 : 11\\n4 : 100\\n5 : 101\\nAmong them, only integer 3 disobeys the rule (two consecutive ones) and the other 5 satisfy the rule. \\n\\nExample 2:\\nInput: n = 1\\nOutput: 2\\n\\nExample 3:\\nInput: n = 2\\nOutput: 3\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= n <= 109\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/human-traffic-of-stadium",
        "Title": "Human Traffic of Stadium ",
        "Description": "b\"SQL SchemaTable: Stadium\\n+---------------+---------+\\n| Column Name   | Type    |\\n+---------------+---------+\\n| id            | int     |\\n| visit_date    | date    |\\n| people        | int     |\\n+---------------+---------+\\nvisit_date is the primary key for this table.\\nEach row of this table contains the visit date and visit id to the stadium with the number of people during the visit.\\nNo two rows will have the same visit_date, and as the id increases, the dates increase as well.\\n\\n\\xc2\\xa0\\nWrite an SQL query to display the records with three or more rows with consecutive id's, and the number of people is greater than or equal to 100 for each.\\nReturn the result table ordered by visit_date in ascending order.\\nThe query result format is in the following example.\\n\\xc2\\xa0\\nExample 1:\\nInput: \\nStadium table:\\n+------+------------+-----------+\\n| id   | visit_date | people    |\\n+------+------------+-----------+\\n| 1    | 2017-01-01 | 10        |\\n| 2    | 2017-01-02 | 109       |\\n| 3    | 2017-01-03 | 150       |\\n| 4    | 2017-01-04 | 99        |\\n| 5    | 2017-01-05 | 145       |\\n| 6    | 2017-01-06 | 1455      |\\n| 7    | 2017-01-07 | 199       |\\n| 8    | 2017-01-09 | 188       |\\n+------+------------+-----------+\\nOutput: \\n+------+------------+-----------+\\n| id   | visit_date | people    |\\n+------+------------+-----------+\\n| 5    | 2017-01-05 | 145       |\\n| 6    | 2017-01-06 | 1455      |\\n| 7    | 2017-01-07 | 199       |\\n| 8    | 2017-01-09 | 188       |\\n+------+------------+-----------+\\nExplanation: \\nThe four rows with ids 5, 6, 7, and 8 have consecutive ids and each of them has >= 100 people attended. Note that row 8 was included even though the visit_date was not the next day after row 7.\\nThe rows with ids 2 and 3 are not included because we need at least three consecutive ids.\\n\\n\""
    },
    {
        "URL": "https://leetcode.com/problems/friend-requests-ii-who-has-the-most-friends",
        "Title": "Friend Requests II: Who Has the Most Friends ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/consecutive-available-seats",
        "Title": "Consecutive Available Seats ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/design-compressed-string-iterator",
        "Title": "Design Compressed String Iterator ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/can-place-flowers",
        "Title": "Can Place Flowers ",
        "Description": "b\"You have a long flowerbed in which some of the plots are planted, and some are not. However, flowers cannot be planted in adjacent plots.\\nGiven an integer array flowerbed containing 0's and 1's, where 0 means empty and 1 means not empty, and an integer n, return if n new flowers can be planted in the flowerbed without violating the no-adjacent-flowers rule.\\n\\xc2\\xa0\\nExample 1:\\nInput: flowerbed = [1,0,0,0,1], n = 1\\nOutput: true\\nExample 2:\\nInput: flowerbed = [1,0,0,0,1], n = 2\\nOutput: false\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= flowerbed.length <= 2 * 104\\nflowerbed[i] is 0 or 1.\\nThere are no two adjacent flowers in flowerbed.\\n0 <= n <= flowerbed.length\\n\\n\""
    },
    {
        "URL": "https://leetcode.com/problems/construct-string-from-binary-tree",
        "Title": "Construct String from Binary Tree ",
        "Description": "b'Given the root of a binary tree, construct a string consisting of parenthesis and integers from a binary tree with the preorder traversal way, and return it.\\nOmit all the empty parenthesis pairs that do not affect the one-to-one mapping relationship between the string and the original binary tree.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: root = [1,2,3,4]\\nOutput: \"1(2(4))(3)\"\\nExplanation: Originally, it needs to be \"1(2(4)())(3()())\", but you need to omit all the unnecessary empty parenthesis pairs. And it will be \"1(2(4))(3)\"\\n\\nExample 2:\\n\\nInput: root = [1,2,3,null,4]\\nOutput: \"1(2()(4))(3)\"\\nExplanation: Almost the same as the first example, except we cannot omit the first parenthesis pair to break the one-to-one mapping relationship between the input and the output.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of nodes in the tree is in the range [1, 104].\\n-1000 <= Node.val <= 1000\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/sales-person",
        "Title": "Sales Person ",
        "Description": "b'SQL SchemaTable: SalesPerson\\n+-----------------+---------+\\n| Column Name     | Type    |\\n+-----------------+---------+\\n| sales_id        | int     |\\n| name            | varchar |\\n| salary          | int     |\\n| commission_rate | int     |\\n| hire_date       | date    |\\n+-----------------+---------+\\nsales_id is the primary key column for this table.\\nEach row of this table indicates the name and the ID of a salesperson alongside their salary, commission rate, and hire date.\\n\\n\\xc2\\xa0\\nTable: Company\\n+-------------+---------+\\n| Column Name | Type    |\\n+-------------+---------+\\n| com_id      | int     |\\n| name        | varchar |\\n| city        | varchar |\\n+-------------+---------+\\ncom_id is the primary key column for this table.\\nEach row of this table indicates the name and the ID of a company and the city in which the company is located.\\n\\n\\xc2\\xa0\\nTable: Orders\\n+-------------+------+\\n| Column Name | Type |\\n+-------------+------+\\n| order_id    | int  |\\n| order_date  | date |\\n| com_id      | int  |\\n| sales_id    | int  |\\n| amount      | int  |\\n+-------------+------+\\norder_id is the primary key column for this table.\\ncom_id is a foreign key to com_id from the Company table.\\nsales_id is a foreign key to sales_id from the SalesPerson table.\\nEach row of this table contains information about one order. This includes the ID of the company, the ID of the salesperson, the date of the order, and the amount paid.\\n\\n\\xc2\\xa0\\nWrite an SQL query to report the names of all the salespersons who did not have any orders related to the company with the name \"RED\".\\nReturn the result table in any order.\\nThe query result format is in the following example.\\n\\xc2\\xa0\\nExample 1:\\nInput: \\nSalesPerson table:\\n+----------+------+--------+-----------------+------------+\\n| sales_id | name | salary | commission_rate | hire_date  |\\n+----------+------+--------+-----------------+------------+\\n| 1        | John | 100000 | 6               | 4/1/2006   |\\n| 2        | Amy  | 12000  | 5               | 5/1/2010   |\\n| 3        | Mark | 65000  | 12              | 12/25/2008 |\\n| 4        | Pam  | 25000  | 25              | 1/1/2005   |\\n| 5        | Alex | 5000   | 10              | 2/3/2007   |\\n+----------+------+--------+-----------------+------------+\\nCompany table:\\n+--------+--------+----------+\\n| com_id | name   | city     |\\n+--------+--------+----------+\\n| 1      | RED    | Boston   |\\n| 2      | ORANGE | New York |\\n| 3      | YELLOW | Boston   |\\n| 4      | GREEN  | Austin   |\\n+--------+--------+----------+\\nOrders table:\\n+----------+------------+--------+----------+--------+\\n| order_id | order_date | com_id | sales_id | amount |\\n+----------+------------+--------+----------+--------+\\n| 1        | 1/1/2014   | 3      | 4        | 10000  |\\n| 2        | 2/1/2014   | 4      | 5        | 5000   |\\n| 3        | 3/1/2014   | 1      | 1        | 50000  |\\n| 4        | 4/1/2014   | 1      | 4        | 25000  |\\n+----------+------------+--------+----------+--------+\\nOutput: \\n+------+\\n| name |\\n+------+\\n| Amy  |\\n| Mark |\\n| Alex |\\n+------+\\nExplanation: \\nAccording to orders 3 and 4 in the Orders table, it is easy to tell that only salesperson John and Pam have sales to company RED, so we report all the other names in the table salesperson.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/tree-node",
        "Title": "Tree Node ",
        "Description": "b'SQL SchemaTable: Tree\\n+-------------+------+\\n| Column Name | Type |\\n+-------------+------+\\n| id          | int  |\\n| p_id        | int  |\\n+-------------+------+\\nid is the primary key column for this table.\\nEach row of this table contains information about the id of a node and the id of its parent node in a tree.\\nThe given structure is always a valid tree.\\n\\n\\xc2\\xa0\\nEach node in the tree can be one of three types:\\n\\n\"Leaf\": if the node is a leaf node.\\n\"Root\": if the node is the root of the tree.\\n\"Inner\": If the node is neither a leaf node nor a root node.\\n\\nWrite an SQL query to report the type of each node in the tree.\\nReturn the result table ordered by id in ascending order.\\nThe query result format is in the following example.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: \\nTree table:\\n+----+------+\\n| id | p_id |\\n+----+------+\\n| 1  | null |\\n| 2  | 1    |\\n| 3  | 1    |\\n| 4  | 2    |\\n| 5  | 2    |\\n+----+------+\\nOutput: \\n+----+-------+\\n| id | type  |\\n+----+-------+\\n| 1  | Root  |\\n| 2  | Inner |\\n| 3  | Leaf  |\\n| 4  | Leaf  |\\n| 5  | Leaf  |\\n+----+-------+\\nExplanation: \\nNode 1 is the root node because its parent node is null and it has child nodes 2 and 3.\\nNode 2 is an inner node because it has parent node 1 and child node 4 and 5.\\nNodes 3, 4, and 5 are leaf nodes because they have parent nodes and they do not have child nodes.\\n\\nExample 2:\\n\\nInput: \\nTree table:\\n+----+------+\\n| id | p_id |\\n+----+------+\\n| 1  | null |\\n+----+------+\\nOutput: \\n+----+-------+\\n| id | type  |\\n+----+-------+\\n| 1  | Root  |\\n+----+-------+\\nExplanation: If there is only one node on the tree, you only need to output its root attributes.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/find-duplicate-file-in-system",
        "Title": "Find Duplicate File in System ",
        "Description": "b'Given a list paths of directory info, including the directory path, and all the files with contents in this directory, return all the duplicate files in the file system in terms of their paths. You may return the answer in any order.\\nA group of duplicate files consists of at least two files that have the same content.\\nA single directory info string in the input list has the following format:\\n\\n\"root/d1/d2/.../dm f1.txt(f1_content) f2.txt(f2_content) ... fn.txt(fn_content)\"\\n\\nIt means there are n files (f1.txt, f2.txt ... fn.txt) with content (f1_content, f2_content ... fn_content) respectively in the directory \"root/d1/d2/.../dm\". Note that n >= 1 and m >= 0. If m = 0, it means the directory is just the root directory.\\nThe output is a list of groups of duplicate file paths. For each group, it contains all the file paths of the files that have the same content. A file path is a string that has the following format:\\n\\n\"directory_path/file_name.txt\"\\n\\n\\xc2\\xa0\\nExample 1:\\nInput: paths = [\"root/a 1.txt(abcd) 2.txt(efgh)\",\"root/c 3.txt(abcd)\",\"root/c/d 4.txt(efgh)\",\"root 4.txt(efgh)\"]\\nOutput: [[\"root/a/2.txt\",\"root/c/d/4.txt\",\"root/4.txt\"],[\"root/a/1.txt\",\"root/c/3.txt\"]]\\nExample 2:\\nInput: paths = [\"root/a 1.txt(abcd) 2.txt(efgh)\",\"root/c 3.txt(abcd)\",\"root/c/d 4.txt(efgh)\"]\\nOutput: [[\"root/a/2.txt\",\"root/c/d/4.txt\"],[\"root/a/1.txt\",\"root/c/3.txt\"]]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= paths.length <= 2 * 104\\n1 <= paths[i].length <= 3000\\n1 <= sum(paths[i].length) <= 5 * 105\\npaths[i] consist of English letters, digits, \\'/\\', \\'.\\', \\'(\\', \\')\\', and \\' \\'.\\nYou may assume no files or directories share the same name in the same directory.\\nYou may assume each given directory info represents a unique directory. A single blank space separates the directory path and file info.\\n\\n\\xc2\\xa0\\nFollow up:\\n\\nImagine you are given a real file system, how will you search files? DFS or BFS?\\nIf the file content is very large (GB level), how will you modify your solution?\\nIf you can only read the file by 1kb each time, how will you modify your solution?\\nWhat is the time complexity of your modified solution? What is the most time-consuming part and memory-consuming part of it? How to optimize?\\nHow to make sure the duplicated files you find are not false positive?\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/triangle-judgement",
        "Title": "Triangle Judgement ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/valid-triangle-number",
        "Title": "Valid Triangle Number ",
        "Description": "b'Given an integer array nums, return the number of triplets chosen from the array that can make triangles if we take them as side lengths of a triangle.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [2,2,3,4]\\nOutput: 3\\nExplanation: Valid combinations are: \\n2,3,4 (using the first 2)\\n2,3,4 (using the second 2)\\n2,2,3\\n\\nExample 2:\\nInput: nums = [4,2,3,4]\\nOutput: 4\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 1000\\n0 <= nums[i] <= 1000\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/shortest-distance-in-a-plane",
        "Title": "Shortest Distance in a Plane ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/shortest-distance-in-a-line",
        "Title": "Shortest Distance in a Line ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/second-degree-follower",
        "Title": "Second Degree Follower ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/average-salary-departments-vs-company",
        "Title": "Average Salary: Departments VS Company ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/add-bold-tag-in-string",
        "Title": "Add Bold Tag in String ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/merge-two-binary-trees",
        "Title": "Merge Two Binary Trees ",
        "Description": "b'You are given two binary trees root1 and root2.\\nImagine that when you put one of them to cover the other, some nodes of the two trees are overlapped while the others are not. You need to merge the two trees into a new binary tree. The merge rule is that if two nodes overlap, then sum node values up as the new value of the merged node. Otherwise, the NOT null node will be used as the node of the new tree.\\nReturn the merged tree.\\nNote: The merging process must start from the root nodes of both trees.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: root1 = [1,3,2,5], root2 = [2,1,3,null,4,null,7]\\nOutput: [3,4,5,5,4,null,7]\\n\\nExample 2:\\nInput: root1 = [1], root2 = [1,2]\\nOutput: [2,2]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of nodes in both trees is in the range [0, 2000].\\n-104 <= Node.val <= 104\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/students-report-by-geography",
        "Title": "Students Report By Geography ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/biggest-single-number",
        "Title": "Biggest Single Number ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/not-boring-movies",
        "Title": "Not Boring Movies ",
        "Description": "b'SQL SchemaTable: Cinema\\n+----------------+----------+\\n| Column Name    | Type     |\\n+----------------+----------+\\n| id             | int      |\\n| movie          | varchar  |\\n| description    | varchar  |\\n| rating         | float    |\\n+----------------+----------+\\nid is the primary key for this table.\\nEach row contains information about the name of a movie, its genre, and its rating.\\nrating is a 2 decimal places float in the range [0, 10]\\n\\n\\xc2\\xa0\\nWrite an SQL query to report the movies with an odd-numbered ID and a description that is not \"boring\".\\nReturn the result table ordered by rating in descending order.\\nThe query result format is in the following example.\\n\\xc2\\xa0\\nExample 1:\\nInput: \\nCinema table:\\n+----+------------+-------------+--------+\\n| id | movie      | description | rating |\\n+----+------------+-------------+--------+\\n| 1  | War        | great 3D    | 8.9    |\\n| 2  | Science    | fiction     | 8.5    |\\n| 3  | irish      | boring      | 6.2    |\\n| 4  | Ice song   | Fantacy     | 8.6    |\\n| 5  | House card | Interesting | 9.1    |\\n+----+------------+-------------+--------+\\nOutput: \\n+----+------------+-------------+--------+\\n| id | movie      | description | rating |\\n+----+------------+-------------+--------+\\n| 5  | House card | Interesting | 9.1    |\\n| 1  | War        | great 3D    | 8.9    |\\n+----+------------+-------------+--------+\\nExplanation: \\nWe have three movies with odd-numbered IDs: 1, 3, and 5. The movie with ID = 3 is boring so we do not include it in the answer.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/task-scheduler",
        "Title": "Task Scheduler ",
        "Description": "b'Given a characters array tasks, representing the tasks a CPU needs to do, where each letter represents a different task. Tasks could be done in any order. Each task is done in one unit of time. For each unit of time, the CPU could complete either one task or just be idle.\\nHowever, there is a non-negative integer\\xc2\\xa0n that represents the cooldown period between\\xc2\\xa0two same tasks\\xc2\\xa0(the same letter in the array), that is that there must be at least n units of time between any two same tasks.\\nReturn the least number of units of times that the CPU will take to finish all the given tasks.\\n\\xc2\\xa0\\nExample 1:\\nInput: tasks = [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"], n = 2\\nOutput: 8\\nExplanation: \\nA -> B -> idle -> A -> B -> idle -> A -> B\\nThere is at least 2 units of time between any two same tasks.\\n\\nExample 2:\\nInput: tasks = [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"], n = 0\\nOutput: 6\\nExplanation: On this case any permutation of size 6 would work since n = 0.\\n[\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"]\\n[\"A\",\"B\",\"A\",\"B\",\"A\",\"B\"]\\n[\"B\",\"B\",\"B\",\"A\",\"A\",\"A\"]\\n...\\nAnd so on.\\n\\nExample 3:\\nInput: tasks = [\"A\",\"A\",\"A\",\"A\",\"A\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\"], n = 2\\nOutput: 16\\nExplanation: \\nOne possible solution is\\nA -> B -> C -> A -> D -> E -> A -> F -> G -> A -> idle -> idle -> A -> idle -> idle -> A\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= task.length <= 104\\ntasks[i] is upper-case English letter.\\nThe integer n is in the range [0, 100].\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/design-circular-queue",
        "Title": "Design Circular Queue ",
        "Description": "b'Design your implementation of the circular queue. The circular queue is a linear data structure in which the operations are performed based on FIFO (First In First Out) principle and the last position is connected back to the first position to make a circle. It is also called \"Ring Buffer\".\\nOne of the benefits of the circular queue is that we can make use of the spaces in front of the queue. In a normal queue, once the queue becomes full, we cannot insert the next element even if there is a space in front of the queue. But using the circular queue, we can use the space to store new values.\\nImplementation the MyCircularQueue class:\\n\\nMyCircularQueue(k) Initializes the object with the size of the queue to be k.\\nint Front() Gets the front item from the queue. If the queue is empty, return -1.\\nint Rear() Gets the last item from the queue. If the queue is empty, return -1.\\nboolean enQueue(int value) Inserts an element into the circular queue. Return true if the operation is successful.\\nboolean deQueue() Deletes an element from the circular queue. Return true if the operation is successful.\\nboolean isEmpty() Checks whether the circular queue is empty or not.\\nboolean isFull() Checks whether the circular queue is full or not.\\n\\nYou must solve the problem without using the built-in queue data structure in your programming language.\\xc2\\xa0\\n\\xc2\\xa0\\nExample 1:\\nInput\\n[\"MyCircularQueue\", \"enQueue\", \"enQueue\", \"enQueue\", \"enQueue\", \"Rear\", \"isFull\", \"deQueue\", \"enQueue\", \"Rear\"]\\n[[3], [1], [2], [3], [4], [], [], [], [4], []]\\nOutput\\n[null, true, true, true, false, 3, true, true, true, 4]\\n\\nExplanation\\nMyCircularQueue myCircularQueue = new MyCircularQueue(3);\\nmyCircularQueue.enQueue(1); // return True\\nmyCircularQueue.enQueue(2); // return True\\nmyCircularQueue.enQueue(3); // return True\\nmyCircularQueue.enQueue(4); // return False\\nmyCircularQueue.Rear();     // return 3\\nmyCircularQueue.isFull();   // return True\\nmyCircularQueue.deQueue();  // return True\\nmyCircularQueue.enQueue(4); // return True\\nmyCircularQueue.Rear();     // return 4\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= k <= 1000\\n0 <= value <= 1000\\nAt most 3000 calls will be made to\\xc2\\xa0enQueue, deQueue,\\xc2\\xa0Front,\\xc2\\xa0Rear,\\xc2\\xa0isEmpty, and\\xc2\\xa0isFull.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/add-one-row-to-tree",
        "Title": "Add One Row to Tree ",
        "Description": "b\"Given the root of a binary tree and two integers val and depth, add a row of nodes with value val at the given depth depth.\\nNote that the root node is at depth 1.\\nThe adding rule is:\\n\\nGiven the integer depth, for each not null tree node cur at the depth depth - 1, create two tree nodes with value val as cur's left subtree root and right subtree root.\\ncur's original left subtree should be the left subtree of the new left subtree root.\\ncur's original right subtree should be the right subtree of the new right subtree root.\\nIf depth == 1 that means there is no depth depth - 1 at all, then create a tree node with value val as the new root of the whole original tree, and the original tree is the new root's left subtree.\\n\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: root = [4,2,6,3,1,5], val = 1, depth = 2\\nOutput: [4,1,1,2,null,null,6,3,1,5]\\n\\nExample 2:\\n\\nInput: root = [4,2,null,3,1], val = 1, depth = 3\\nOutput: [4,2,null,1,1,3,null,null,1]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of nodes in the tree is in the range [1, 104].\\nThe depth of the tree is in the range [1, 104].\\n-100 <= Node.val <= 100\\n-105 <= val <= 105\\n1 <= depth <= the depth of tree + 1\\n\\n\""
    },
    {
        "URL": "https://leetcode.com/problems/maximum-distance-in-arrays",
        "Title": "Maximum Distance in Arrays ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/minimum-factorization",
        "Title": "Minimum Factorization ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/exchange-seats",
        "Title": "Exchange Seats ",
        "Description": "b\"SQL SchemaTable: Seat\\n+-------------+---------+\\n| Column Name | Type    |\\n+-------------+---------+\\n| id          | int     |\\n| name        | varchar |\\n+-------------+---------+\\nid is the primary key column for this table.\\nEach row of this table indicates the name and the ID of a student.\\nid is a continuous increment.\\n\\n\\xc2\\xa0\\nWrite an SQL query to swap the seat id of every two consecutive students. If the number of students is odd, the id of the last student is not swapped.\\nReturn the result table ordered by id in ascending order.\\nThe query result format is in the following example.\\n\\xc2\\xa0\\nExample 1:\\nInput: \\nSeat table:\\n+----+---------+\\n| id | student |\\n+----+---------+\\n| 1  | Abbot   |\\n| 2  | Doris   |\\n| 3  | Emerson |\\n| 4  | Green   |\\n| 5  | Jeames  |\\n+----+---------+\\nOutput: \\n+----+---------+\\n| id | student |\\n+----+---------+\\n| 1  | Doris   |\\n| 2  | Abbot   |\\n| 3  | Green   |\\n| 4  | Emerson |\\n| 5  | Jeames  |\\n+----+---------+\\nExplanation: \\nNote that if the number of students is odd, there is no need to change the last one's seat.\\n\\n\""
    },
    {
        "URL": "https://leetcode.com/problems/swap-salary",
        "Title": "Swap Salary ",
        "Description": "b\"SQL SchemaTable: Salary\\n+-------------+----------+\\n| Column Name | Type     |\\n+-------------+----------+\\n| id          | int      |\\n| name        | varchar  |\\n| sex         | ENUM     |\\n| salary      | int      |\\n+-------------+----------+\\nid is the primary key for this table.\\nThe sex column is ENUM value of type ('m', 'f').\\nThe table contains information about an employee.\\n\\n\\xc2\\xa0\\nWrite an SQL query to swap all 'f' and 'm' values (i.e., change all 'f' values to 'm' and vice versa) with a single update statement and no intermediate temporary tables.\\nNote that you must write a single update statement, do not write any select statement for this problem.\\nThe query result format is in the following example.\\n\\xc2\\xa0\\nExample 1:\\nInput: \\nSalary table:\\n+----+------+-----+--------+\\n| id | name | sex | salary |\\n+----+------+-----+--------+\\n| 1  | A    | m   | 2500   |\\n| 2  | B    | f   | 1500   |\\n| 3  | C    | m   | 5500   |\\n| 4  | D    | f   | 500    |\\n+----+------+-----+--------+\\nOutput: \\n+----+------+-----+--------+\\n| id | name | sex | salary |\\n+----+------+-----+--------+\\n| 1  | A    | f   | 2500   |\\n| 2  | B    | m   | 1500   |\\n| 3  | C    | f   | 5500   |\\n| 4  | D    | m   | 500    |\\n+----+------+-----+--------+\\nExplanation: \\n(1, A) and (3, C) were changed from 'm' to 'f'.\\n(2, B) and (4, D) were changed from 'f' to 'm'.\\n\\n\""
    },
    {
        "URL": "https://leetcode.com/problems/maximum-product-of-three-numbers",
        "Title": "Maximum Product of Three Numbers ",
        "Description": "b'Given an integer array nums, find three numbers whose product is maximum and return the maximum product.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [1,2,3]\\nOutput: 6\\nExample 2:\\nInput: nums = [1,2,3,4]\\nOutput: 24\\nExample 3:\\nInput: nums = [-1,-2,-3]\\nOutput: -6\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n3 <= nums.length <=\\xc2\\xa0104\\n-1000 <= nums[i] <= 1000\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/k-inverse-pairs-array",
        "Title": "K Inverse Pairs Array ",
        "Description": "b'For an integer array nums, an inverse pair is a pair of integers [i, j] where 0 <= i < j < nums.length and nums[i] > nums[j].\\nGiven two integers n and k, return the number of different arrays consist of numbers from 1 to n such that there are exactly k inverse pairs. Since the answer can be huge, return it modulo 109 + 7.\\n\\xc2\\xa0\\nExample 1:\\nInput: n = 3, k = 0\\nOutput: 1\\nExplanation: Only the array [1,2,3] which consists of numbers from 1 to 3 has exactly 0 inverse pairs.\\n\\nExample 2:\\nInput: n = 3, k = 1\\nOutput: 2\\nExplanation: The array [1,3,2] and [2,1,3] have exactly 1 inverse pair.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= n <= 1000\\n0 <= k <= 1000\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/course-schedule-iii",
        "Title": "Course Schedule III ",
        "Description": "b'There are n different online courses numbered from 1 to n. You are given an array courses where courses[i] = [durationi, lastDayi] indicate that the ith course should be taken continuously for durationi days and must be finished before or on lastDayi.\\nYou will start on the 1st day and you cannot take two or more courses simultaneously.\\nReturn the maximum number of courses that you can take.\\n\\xc2\\xa0\\nExample 1:\\nInput: courses = [[100,200],[200,1300],[1000,1250],[2000,3200]]\\nOutput: 3\\nExplanation: \\nThere are totally 4 courses, but you can take 3 courses at most:\\nFirst, take the 1st course, it costs 100 days so you will finish it on the 100th day, and ready to take the next course on the 101st day.\\nSecond, take the 3rd course, it costs 1000 days so you will finish it on the 1100th day, and ready to take the next course on the 1101st day. \\nThird, take the 2nd course, it costs 200 days so you will finish it on the 1300th day. \\nThe 4th course cannot be taken now, since you will finish it on the 3300th day, which exceeds the closed date.\\n\\nExample 2:\\nInput: courses = [[1,2]]\\nOutput: 1\\n\\nExample 3:\\nInput: courses = [[3,2],[4,3]]\\nOutput: 0\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= courses.length <= 104\\n1 <= durationi, lastDayi <= 104\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/design-excel-sum-formula",
        "Title": "Design Excel Sum Formula ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/smallest-range-covering-elements-from-k-lists",
        "Title": "Smallest Range Covering Elements from K Lists ",
        "Description": "b'You have k lists of sorted integers in non-decreasing\\xc2\\xa0order. Find the smallest range that includes at least one number from each of the k lists.\\nWe define the range [a, b] is smaller than range [c, d] if b - a < d - c or a < c if b - a == d - c.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [[4,10,15,24,26],[0,9,12,20],[5,18,22,30]]\\nOutput: [20,24]\\nExplanation: \\nList 1: [4, 10, 15, 24,26], 24 is in range [20,24].\\nList 2: [0, 9, 12, 20], 20 is in range [20,24].\\nList 3: [5, 18, 22, 30], 22 is in range [20,24].\\n\\nExample 2:\\nInput: nums = [[1,2,3],[1,2,3],[1,2,3]]\\nOutput: [1,1]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nnums.length == k\\n1 <= k <= 3500\\n1 <= nums[i].length <= 50\\n-105 <= nums[i][j] <= 105\\nnums[i]\\xc2\\xa0is sorted in non-decreasing order.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/sum-of-square-numbers",
        "Title": "Sum of Square Numbers ",
        "Description": "b\"Given a non-negative integer c, decide whether there're two integers a and b such that a2 + b2 = c.\\n\\xc2\\xa0\\nExample 1:\\nInput: c = 5\\nOutput: true\\nExplanation: 1 * 1 + 2 * 2 = 5\\n\\nExample 2:\\nInput: c = 3\\nOutput: false\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n0 <= c <= 231 - 1\\n\\n\""
    },
    {
        "URL": "https://leetcode.com/problems/find-the-derangement-of-an-array",
        "Title": "Find the Derangement of An Array ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/design-log-storage-system",
        "Title": "Design Log Storage System ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/exclusive-time-of-functions",
        "Title": "Exclusive Time of Functions ",
        "Description": "b'On a single-threaded CPU, we execute a program containing n functions. Each function has a unique ID between 0 and n-1.\\nFunction calls are stored in a call stack: when a function call starts, its ID is pushed onto the stack, and when a function call ends, its ID is popped off the stack. The function whose ID is at the top of the stack is the current function being executed. Each time a function starts or ends, we write a log with the ID, whether it started or ended, and the timestamp.\\nYou are given a list logs, where logs[i] represents the ith log message formatted as a string \"{function_id}:{\"start\" | \"end\"}:{timestamp}\". For example, \"0:start:3\" means a function call with function ID 0 started at the beginning of timestamp 3, and \"1:end:2\" means a function call with function ID 1 ended at the end of timestamp 2. Note that a function can be called multiple times, possibly recursively.\\nA function\\'s exclusive time is the sum of execution times for all function calls in the program. For example, if a function is called twice, one call executing for 2 time units and another call executing for 1 time unit, the exclusive time is 2 + 1 = 3.\\nReturn the exclusive time of each function in an array, where the value at the ith index represents the exclusive time for the function with ID i.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: n = 2, logs = [\"0:start:0\",\"1:start:2\",\"1:end:5\",\"0:end:6\"]\\nOutput: [3,4]\\nExplanation:\\nFunction 0 starts at the beginning of time 0, then it executes 2 for units of time and reaches the end of time 1.\\nFunction 1 starts at the beginning of time 2, executes for 4 units of time, and ends at the end of time 5.\\nFunction 0 resumes execution at the beginning of time 6 and executes for 1 unit of time.\\nSo function 0 spends 2 + 1 = 3 units of total time executing, and function 1 spends 4 units of total time executing.\\n\\nExample 2:\\nInput: n = 1, logs = [\"0:start:0\",\"0:start:2\",\"0:end:5\",\"0:start:6\",\"0:end:6\",\"0:end:7\"]\\nOutput: [8]\\nExplanation:\\nFunction 0 starts at the beginning of time 0, executes for 2 units of time, and recursively calls itself.\\nFunction 0 (recursive call) starts at the beginning of time 2 and executes for 4 units of time.\\nFunction 0 (initial call) resumes execution then immediately calls itself again.\\nFunction 0 (2nd recursive call) starts at the beginning of time 6 and executes for 1 unit of time.\\nFunction 0 (initial call) resumes execution at the beginning of time 7 and executes for 1 unit of time.\\nSo function 0 spends 2 + 4 + 1 + 1 = 8 units of total time executing.\\n\\nExample 3:\\nInput: n = 2, logs = [\"0:start:0\",\"0:start:2\",\"0:end:5\",\"1:start:6\",\"1:end:6\",\"0:end:7\"]\\nOutput: [7,1]\\nExplanation:\\nFunction 0 starts at the beginning of time 0, executes for 2 units of time, and recursively calls itself.\\nFunction 0 (recursive call) starts at the beginning of time 2 and executes for 4 units of time.\\nFunction 0 (initial call) resumes execution then immediately calls function 1.\\nFunction 1 starts at the beginning of time 6, executes 1 unit of time, and ends at the end of time 6.\\nFunction 0 resumes execution at the beginning of time 6 and executes for 2 units of time.\\nSo function 0 spends 2 + 4 + 1 = 7 units of total time executing, and function 1 spends 1 unit of total time executing.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= n <= 100\\n1 <= logs.length <= 500\\n0 <= function_id < n\\n0 <= timestamp <= 109\\nNo two start events will happen at the same timestamp.\\nNo two end events will happen at the same timestamp.\\nEach function has an \"end\" log for each \"start\" log.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/average-of-levels-in-binary-tree",
        "Title": "Average of Levels in Binary Tree ",
        "Description": "b'Given the root of a binary tree, return the average value of the nodes on each level in the form of an array. Answers within 10-5 of the actual answer will be accepted.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: root = [3,9,20,null,null,15,7]\\nOutput: [3.00000,14.50000,11.00000]\\nExplanation: The average value of nodes on level 0 is 3, on level 1 is 14.5, and on level 2 is 11.\\nHence return [3, 14.5, 11].\\n\\nExample 2:\\n\\nInput: root = [3,9,20,15,7]\\nOutput: [3.00000,14.50000,11.00000]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of nodes in the tree is in the range [1, 104].\\n-231 <= Node.val <= 231 - 1\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/shopping-offers",
        "Title": "Shopping Offers ",
        "Description": "b'In LeetCode Store, there are n items to sell. Each item has a price. However, there are some special offers, and a special offer consists of one or more different kinds of items with a sale price.\\nYou are given an integer array price where price[i] is the price of the ith item, and an integer array needs where needs[i] is the number of pieces of the ith item you want to buy.\\nYou are also given an array special where special[i] is of size n + 1 where special[i][j] is the number of pieces of the jth item in the ith offer and special[i][n] (i.e., the last integer in the array) is the price of the ith offer.\\nReturn the lowest price you have to pay for exactly certain items as given, where you could make optimal use of the special offers. You are not allowed to buy more items than you want, even if that would lower the overall price. You could use any of the special offers as many times as you want.\\n\\xc2\\xa0\\nExample 1:\\nInput: price = [2,5], special = [[3,0,5],[1,2,10]], needs = [3,2]\\nOutput: 14\\nExplanation: There are two kinds of items, A and B. Their prices are $2 and $5 respectively. \\nIn special offer 1, you can pay $5 for 3A and 0B\\nIn special offer 2, you can pay $10 for 1A and 2B. \\nYou need to buy 3A and 2B, so you may pay $10 for 1A and 2B (special offer #2), and $4 for 2A.\\n\\nExample 2:\\nInput: price = [2,3,4], special = [[1,1,0,4],[2,2,1,9]], needs = [1,2,1]\\nOutput: 11\\nExplanation: The price of A is $2, and $3 for B, $4 for C. \\nYou may pay $4 for 1A and 1B, and $9 for 2A ,2B and 1C. \\nYou need to buy 1A ,2B and 1C, so you may pay $4 for 1A and 1B (special offer #1), and $3 for 1B, $4 for 1C. \\nYou cannot add more items, though only $9 for 2A ,2B and 1C.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nn == price.length\\nn == needs.length\\n1 <= n <= 6\\n0 <= price[i] <= 10\\n0 <= needs[i] <= 10\\n1 <= special.length <= 100\\nspecial[i].length == n + 1\\n0 <= special[i][j] <= 50\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/decode-ways-ii",
        "Title": "Decode Ways II ",
        "Description": "b'A message containing letters from A-Z can be encoded into numbers using the following mapping:\\n\\'A\\' -> \"1\"\\n\\'B\\' -> \"2\"\\n...\\n\\'Z\\' -> \"26\"\\n\\nTo decode an encoded message, all the digits must be grouped then mapped back into letters using the reverse of the mapping above (there may be multiple ways). For example, \"11106\" can be mapped into:\\n\\n\"AAJF\" with the grouping (1 1 10 6)\\n\"KJF\" with the grouping (11 10 6)\\n\\nNote that the grouping (1 11 06) is invalid because \"06\" cannot be mapped into \\'F\\' since \"6\" is different from \"06\".\\nIn addition to the mapping above, an encoded message may contain the \\'*\\' character, which can represent any digit from \\'1\\' to \\'9\\' (\\'0\\' is excluded). For example, the encoded message \"1*\" may represent any of the encoded messages \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", or \"19\". Decoding \"1*\" is equivalent to decoding any of the encoded messages it can represent.\\nGiven a string s consisting of digits and \\'*\\' characters, return the number of ways to decode it.\\nSince the answer may be very large, return it modulo 109 + 7.\\n\\xc2\\xa0\\nExample 1:\\nInput: s = \"*\"\\nOutput: 9\\nExplanation: The encoded message can represent any of the encoded messages \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", or \"9\".\\nEach of these can be decoded to the strings \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", and \"I\" respectively.\\nHence, there are a total of 9 ways to decode \"*\".\\n\\nExample 2:\\nInput: s = \"1*\"\\nOutput: 18\\nExplanation: The encoded message can represent any of the encoded messages \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", or \"19\".\\nEach of these encoded messages have 2 ways to be decoded (e.g. \"11\" can be decoded to \"AA\" or \"K\").\\nHence, there are a total of 9 * 2 = 18 ways to decode \"1*\".\\n\\nExample 3:\\nInput: s = \"2*\"\\nOutput: 15\\nExplanation: The encoded message can represent any of the encoded messages \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", or \"29\".\\n\"21\", \"22\", \"23\", \"24\", \"25\", and \"26\" have 2 ways of being decoded, but \"27\", \"28\", and \"29\" only have 1 way.\\nHence, there are a total of (6 * 2) + (3 * 1) = 12 + 3 = 15 ways to decode \"2*\".\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= s.length <= 105\\ns[i] is a digit or \\'*\\'.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/solve-the-equation",
        "Title": "Solve the Equation ",
        "Description": "b'Solve a given equation and return the value of \\'x\\' in the form of a string \"x=#value\". The equation contains only \\'+\\', \\'-\\' operation, the variable \\'x\\' and its coefficient. You should return \"No solution\" if there is no solution for the equation, or \"Infinite solutions\" if there are infinite solutions for the equation.\\nIf there is exactly one solution for the equation, we ensure that the value of \\'x\\' is an integer.\\n\\xc2\\xa0\\nExample 1:\\nInput: equation = \"x+5-3+x=6+x-2\"\\nOutput: \"x=2\"\\n\\nExample 2:\\nInput: equation = \"x=x\"\\nOutput: \"Infinite solutions\"\\n\\nExample 3:\\nInput: equation = \"2x=x\"\\nOutput: \"x=0\"\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n3 <= equation.length <= 1000\\nequation has exactly one \\'=\\'.\\nequation consists of integers with an absolute value in the range [0, 100] without any leading zeros, and the variable \\'x\\'.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/design-circular-deque",
        "Title": "Design Circular Deque ",
        "Description": "b'Design your implementation of the circular double-ended queue (deque).\\nImplement the MyCircularDeque class:\\n\\nMyCircularDeque(int k) Initializes the deque with a maximum size of k.\\nboolean insertFront() Adds an item at the front of Deque. Returns true if the operation is successful, or false otherwise.\\nboolean insertLast() Adds an item at the rear of Deque. Returns true if the operation is successful, or false otherwise.\\nboolean deleteFront() Deletes an item from the front of Deque. Returns true if the operation is successful, or false otherwise.\\nboolean deleteLast() Deletes an item from the rear of Deque. Returns true if the operation is successful, or false otherwise.\\nint getFront() Returns the front item from the Deque. Returns -1 if the deque is empty.\\nint getRear() Returns the last item from Deque. Returns -1 if the deque is empty.\\nboolean isEmpty() Returns true if the deque is empty, or false otherwise.\\nboolean isFull() Returns true if the deque is full, or false otherwise.\\n\\n\\xc2\\xa0\\nExample 1:\\nInput\\n[\"MyCircularDeque\", \"insertLast\", \"insertLast\", \"insertFront\", \"insertFront\", \"getRear\", \"isFull\", \"deleteLast\", \"insertFront\", \"getFront\"]\\n[[3], [1], [2], [3], [4], [], [], [], [4], []]\\nOutput\\n[null, true, true, true, false, 2, true, true, true, 4]\\n\\nExplanation\\nMyCircularDeque myCircularDeque = new MyCircularDeque(3);\\nmyCircularDeque.insertLast(1);  // return True\\nmyCircularDeque.insertLast(2);  // return True\\nmyCircularDeque.insertFront(3); // return True\\nmyCircularDeque.insertFront(4); // return False, the queue is full.\\nmyCircularDeque.getRear();      // return 2\\nmyCircularDeque.isFull();       // return True\\nmyCircularDeque.deleteLast();   // return True\\nmyCircularDeque.insertFront(4); // return True\\nmyCircularDeque.getFront();     // return 4\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= k <= 1000\\n0 <= value <= 1000\\nAt most 2000 calls will be made to insertFront, insertLast, deleteFront, deleteLast, getFront, getRear, isEmpty, isFull.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/design-search-autocomplete-system",
        "Title": "Design Search Autocomplete System ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/maximum-average-subarray-i",
        "Title": "Maximum Average Subarray I ",
        "Description": "b'You are given an integer array nums consisting of n elements, and an integer k.\\nFind a contiguous subarray whose length is equal to k that has the maximum average value and return this value. Any answer with a calculation error less than 10-5 will be accepted.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [1,12,-5,-6,50,3], k = 4\\nOutput: 12.75000\\nExplanation: Maximum average is (12 - 5 - 6 + 50) / 4 = 51 / 4 = 12.75\\n\\nExample 2:\\nInput: nums = [5], k = 1\\nOutput: 5.00000\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nn == nums.length\\n1 <= k <= n <= 105\\n-104 <= nums[i] <= 104\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/maximum-average-subarray-ii",
        "Title": "Maximum Average Subarray II ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/set-mismatch",
        "Title": "Set Mismatch ",
        "Description": "b'You have a set of integers s, which originally contains all the numbers from 1 to n. Unfortunately, due to some error, one of the numbers in s got duplicated to another number in the set, which results in repetition of one number and loss of another number.\\nYou are given an integer array nums representing the data status of this set after the error.\\nFind the number that occurs twice and the number that is missing and return them in the form of an array.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [1,2,2,4]\\nOutput: [2,3]\\nExample 2:\\nInput: nums = [1,1]\\nOutput: [1,2]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n2 <= nums.length <= 104\\n1 <= nums[i] <= 104\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/maximum-length-of-pair-chain",
        "Title": "Maximum Length of Pair Chain ",
        "Description": "b'You are given an array of n pairs pairs where pairs[i] = [lefti, righti] and lefti < righti.\\nA pair p2 = [c, d] follows a pair p1 = [a, b] if b < c. A chain of pairs can be formed in this fashion.\\nReturn the length longest chain which can be formed.\\nYou do not need to use up all the given intervals. You can select pairs in any order.\\n\\xc2\\xa0\\nExample 1:\\nInput: pairs = [[1,2],[2,3],[3,4]]\\nOutput: 2\\nExplanation: The longest chain is [1,2] -> [3,4].\\n\\nExample 2:\\nInput: pairs = [[1,2],[7,8],[4,5]]\\nOutput: 3\\nExplanation: The longest chain is [1,2] -> [4,5] -> [7,8].\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nn == pairs.length\\n1 <= n <= 1000\\n-1000 <= lefti < righti <= 1000\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/palindromic-substrings",
        "Title": "Palindromic Substrings ",
        "Description": "b'Given a string s, return the number of palindromic substrings in it.\\nA string is a palindrome when it reads the same backward as forward.\\nA substring is a contiguous sequence of characters within the string.\\n\\xc2\\xa0\\nExample 1:\\nInput: s = \"abc\"\\nOutput: 3\\nExplanation: Three palindromic strings: \"a\", \"b\", \"c\".\\n\\nExample 2:\\nInput: s = \"aaa\"\\nOutput: 6\\nExplanation: Six palindromic strings: \"a\", \"a\", \"a\", \"aa\", \"aa\", \"aaa\".\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= s.length <= 1000\\ns consists of lowercase English letters.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/replace-words",
        "Title": "Replace Words ",
        "Description": "b'In English, we have a concept called root, which can be followed by some other word to form another longer word - let\\'s call this word successor. For example, when the root \"an\" is followed by the successor word \"other\", we can form a new word \"another\".\\nGiven a dictionary consisting of many roots and a sentence consisting of words separated by spaces, replace all the successors in the sentence with the root forming it. If a successor can be replaced by more than one root, replace it with the root that has the shortest length.\\nReturn the sentence after the replacement.\\n\\xc2\\xa0\\nExample 1:\\nInput: dictionary = [\"cat\",\"bat\",\"rat\"], sentence = \"the cattle was rattled by the battery\"\\nOutput: \"the cat was rat by the bat\"\\n\\nExample 2:\\nInput: dictionary = [\"a\",\"b\",\"c\"], sentence = \"aadsfasf absbs bbab cadsfafs\"\\nOutput: \"a a b c\"\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= dictionary.length <= 1000\\n1 <= dictionary[i].length <= 100\\ndictionary[i] consists of only lower-case letters.\\n1 <= sentence.length <= 106\\nsentence consists of only lower-case letters and spaces.\\nThe number of words in sentence is in the range [1, 1000]\\nThe length of each word in sentence is in the range [1, 1000]\\nEvery two consecutive words in sentence will be separated by exactly one space.\\nsentence does not have leading or trailing spaces.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/dota2-senate",
        "Title": "Dota2 Senate ",
        "Description": "b'In the world of Dota2, there are two parties: the Radiant and the Dire.\\nThe Dota2 senate consists of senators coming from two parties. Now the Senate wants to decide on a change in the Dota2 game. The voting for this change is a round-based procedure. In each round, each senator can exercise one of the two rights:\\n\\nBan one senator\\'s right: A senator can make another senator lose all his rights in this and all the following rounds.\\nAnnounce the victory: If this senator found the senators who still have rights to vote are all from the same party, he can announce the victory and decide on the change in the game.\\n\\nGiven a string senate representing each senator\\'s party belonging. The character \\'R\\' and \\'D\\' represent the Radiant party and the Dire party. Then if there are n senators, the size of the given string will be n.\\nThe round-based procedure starts from the first senator to the last senator in the given order. This procedure will last until the end of voting. All the senators who have lost their rights will be skipped during the procedure.\\nSuppose every senator is smart enough and will play the best strategy for his own party. Predict which party will finally announce the victory and change the Dota2 game. The output should be \"Radiant\" or \"Dire\".\\n\\xc2\\xa0\\nExample 1:\\nInput: senate = \"RD\"\\nOutput: \"Radiant\"\\nExplanation: \\nThe first senator comes from Radiant and he can just ban the next senator\\'s right in round 1. \\nAnd the second senator can\\'t exercise any rights anymore since his right has been banned. \\nAnd in round 2, the first senator can just announce the victory since he is the only guy in the senate who can vote.\\n\\nExample 2:\\nInput: senate = \"RDD\"\\nOutput: \"Dire\"\\nExplanation: \\nThe first senator comes from Radiant and he can just ban the next senator\\'s right in round 1. \\nAnd the second senator can\\'t exercise any rights anymore since his right has been banned. \\nAnd the third senator comes from Dire and he can ban the first senator\\'s right in round 1. \\nAnd in round 2, the third senator can just announce the victory since he is the only guy in the senate who can vote.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nn == senate.length\\n1 <= n <= 104\\nsenate[i] is either \\'R\\' or \\'D\\'.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/2-keys-keyboard",
        "Title": "2 Keys Keyboard ",
        "Description": "b\"There is only one character 'A' on the screen of a notepad. You can perform one of two operations on this notepad for each step:\\n\\nCopy All: You can copy all the characters present on the screen (a partial copy is not allowed).\\nPaste: You can paste the characters which are copied last time.\\n\\nGiven an integer n, return the minimum number of operations to get the character 'A' exactly n times on the screen.\\n\\xc2\\xa0\\nExample 1:\\nInput: n = 3\\nOutput: 3\\nExplanation: Initially, we have one character 'A'.\\nIn step 1, we use Copy All operation.\\nIn step 2, we use Paste operation to get 'AA'.\\nIn step 3, we use Paste operation to get 'AAA'.\\n\\nExample 2:\\nInput: n = 1\\nOutput: 0\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= n <= 1000\\n\\n\""
    },
    {
        "URL": "https://leetcode.com/problems/4-keys-keyboard",
        "Title": "4 Keys Keyboard ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/find-duplicate-subtrees",
        "Title": "Find Duplicate Subtrees ",
        "Description": "b'Given the root\\xc2\\xa0of a binary tree, return all duplicate subtrees.\\nFor each kind of duplicate subtrees, you only need to return the root node of any one of them.\\nTwo trees are duplicate if they have the same structure with the same node values.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: root = [1,2,3,4,null,2,4,null,null,4]\\nOutput: [[2,4],[4]]\\n\\nExample 2:\\n\\nInput: root = [2,1,1]\\nOutput: [[1]]\\n\\nExample 3:\\n\\nInput: root = [2,2,2,3,null,3,null]\\nOutput: [[2,3],[3]]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of the nodes in the tree will be in the range [1, 10^4]\\n-200 <= Node.val <= 200\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/two-sum-iv-input-is-a-bst",
        "Title": "Two Sum IV - Input is a BST ",
        "Description": "b'Given the root of a Binary Search Tree and a target number k, return true if there exist two elements in the BST such that their sum is equal to the given target.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: root = [5,3,6,2,4,null,7], k = 9\\nOutput: true\\n\\nExample 2:\\n\\nInput: root = [5,3,6,2,4,null,7], k = 28\\nOutput: false\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of nodes in the tree is in the range [1, 104].\\n-104\\xc2\\xa0<= Node.val <= 104\\nroot is guaranteed to be a valid binary search tree.\\n-105\\xc2\\xa0<= k <= 105\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/maximum-binary-tree",
        "Title": "Maximum Binary Tree ",
        "Description": "b'You are given an integer array nums with no duplicates. A maximum binary tree can be built recursively from nums using the following algorithm:\\n\\nCreate a root node whose value is the maximum value in nums.\\nRecursively build the left subtree on the subarray prefix to the left of the maximum value.\\nRecursively build the right subtree on the subarray suffix to the right of the maximum value.\\n\\nReturn the maximum binary tree built from nums.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: nums = [3,2,1,6,0,5]\\nOutput: [6,3,5,null,2,0,null,null,1]\\nExplanation: The recursive calls are as follow:\\n- The largest value in [3,2,1,6,0,5] is 6. Left prefix is [3,2,1] and right suffix is [0,5].\\n    - The largest value in [3,2,1] is 3. Left prefix is [] and right suffix is [2,1].\\n        - Empty array, so no child.\\n        - The largest value in [2,1] is 2. Left prefix is [] and right suffix is [1].\\n            - Empty array, so no child.\\n            - Only one element, so child is a node with value 1.\\n    - The largest value in [0,5] is 5. Left prefix is [0] and right suffix is [].\\n        - Only one element, so child is a node with value 0.\\n        - Empty array, so no child.\\n\\nExample 2:\\n\\nInput: nums = [3,2,1]\\nOutput: [3,null,2,null,1]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 1000\\n0 <= nums[i] <= 1000\\nAll integers in nums are unique.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/print-binary-tree",
        "Title": "Print Binary Tree ",
        "Description": "b'Given the root of a binary tree, construct a 0-indexed m x n string matrix res that represents a formatted layout of the tree. The formatted layout matrix should be constructed using the following rules:\\n\\nThe height of the tree is height\\xc2\\xa0and the number of rows m should be equal to height + 1.\\nThe number of columns n should be equal to 2height+1 - 1.\\nPlace the root node in the middle of the top row (more formally, at location res[0][(n-1)/2]).\\nFor each node that has been placed in the matrix at position res[r][c], place its left child at res[r+1][c-2height-r-1] and its right child at res[r+1][c+2height-r-1].\\nContinue this process until all the nodes in the tree have been placed.\\nAny empty cells should contain the empty string \"\".\\n\\nReturn the constructed matrix res.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: root = [1,2]\\nOutput: \\n[[\"\",\"1\",\"\"],\\n\\xc2\\xa0[\"2\",\"\",\"\"]]\\n\\nExample 2:\\n\\nInput: root = [1,2,3,null,4]\\nOutput: \\n[[\"\",\"\",\"\",\"1\",\"\",\"\",\"\"],\\n\\xc2\\xa0[\"\",\"2\",\"\",\"\",\"\",\"3\",\"\"],\\n\\xc2\\xa0[\"\",\"\",\"4\",\"\",\"\",\"\",\"\"]]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of nodes in the tree is in the range [1, 210].\\n-99 <= Node.val <= 99\\nThe depth of the tree will be in the range [1, 10].\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/coin-path",
        "Title": "Coin Path ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/robot-return-to-origin",
        "Title": "Robot Return to Origin ",
        "Description": "b'There is a robot starting at the position (0, 0), the origin, on a 2D plane. Given a sequence of its moves, judge if this robot ends up at (0, 0) after it completes its moves.\\nYou are given a string moves that represents the move sequence of the robot where moves[i] represents its ith move. Valid moves are \\'R\\' (right), \\'L\\' (left), \\'U\\' (up), and \\'D\\' (down).\\nReturn true if the robot returns to the origin after it finishes all of its moves, or false otherwise.\\nNote: The way that the robot is \"facing\" is irrelevant. \\'R\\' will always make the robot move to the right once, \\'L\\' will always make it move left, etc. Also, assume that the magnitude of the robot\\'s movement is the same for each move.\\n\\xc2\\xa0\\nExample 1:\\nInput: moves = \"UD\"\\nOutput: true\\nExplanation: The robot moves up once, and then down once. All moves have the same magnitude, so it ended up at the origin where it started. Therefore, we return true.\\n\\nExample 2:\\nInput: moves = \"LL\"\\nOutput: false\\nExplanation: The robot moves left twice. It ends up two \"moves\" to the left of the origin. We return false because it is not at the origin at the end of its moves.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= moves.length <= 2 * 104\\nmoves only contains the characters \\'U\\', \\'D\\', \\'L\\' and \\'R\\'.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/find-k-closest-elements",
        "Title": "Find K Closest Elements ",
        "Description": "b'Given a sorted integer array arr, two integers k and x, return the k closest integers to x in the array. The result should also be sorted in ascending order.\\nAn integer a is closer to x than an integer b if:\\n\\n|a - x| < |b - x|, or\\n|a - x| == |b - x| and a < b\\n\\n\\xc2\\xa0\\nExample 1:\\nInput: arr = [1,2,3,4,5], k = 4, x = 3\\nOutput: [1,2,3,4]\\nExample 2:\\nInput: arr = [1,2,3,4,5], k = 4, x = -1\\nOutput: [1,2,3,4]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= k <= arr.length\\n1 <= arr.length <= 104\\narr is sorted in ascending order.\\n-104 <= arr[i], x <= 104\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/split-array-into-consecutive-subsequences",
        "Title": "Split Array into Consecutive Subsequences ",
        "Description": "b'You are given an integer array nums that is sorted in non-decreasing order.\\nDetermine if it is possible to split nums into one or more subsequences such that both of the following conditions are true:\\n\\nEach subsequence is a consecutive increasing sequence (i.e. each integer is exactly one more than the previous integer).\\nAll subsequences have a length of 3 or more.\\n\\nReturn true if you can split nums according to the above conditions, or false otherwise.\\nA subsequence of an array is a new array that is formed from the original array by deleting some (can be none) of the elements without disturbing the relative positions of the remaining elements. (i.e., [1,3,5] is a subsequence of [1,2,3,4,5] while [1,3,2] is not).\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [1,2,3,3,4,5]\\nOutput: true\\nExplanation: nums can be split into the following subsequences:\\n[1,2,3,3,4,5] --> 1, 2, 3\\n[1,2,3,3,4,5] --> 3, 4, 5\\n\\nExample 2:\\nInput: nums = [1,2,3,3,4,4,5,5]\\nOutput: true\\nExplanation: nums can be split into the following subsequences:\\n[1,2,3,3,4,4,5,5] --> 1, 2, 3, 4, 5\\n[1,2,3,3,4,4,5,5] --> 3, 4, 5\\n\\nExample 3:\\nInput: nums = [1,2,3,4,4,5]\\nOutput: false\\nExplanation: It is impossible to split nums into consecutive increasing subsequences of length 3 or more.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 104\\n-1000 <= nums[i] <= 1000\\nnums is sorted in non-decreasing order.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/remove-9",
        "Title": "Remove 9 ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/image-smoother",
        "Title": "Image Smoother ",
        "Description": "b'An image smoother is a filter of the size 3 x 3 that can be applied to each cell of an image by rounding down the average of the cell and the eight surrounding cells (i.e., the average of the nine cells in the blue smoother). If one or more of the surrounding cells of a cell is not present, we do not consider it in the average (i.e., the average of the four cells in the red smoother).\\n\\nGiven an m x n integer matrix img representing the grayscale of an image, return the image after applying the smoother on each cell of it.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: img = [[1,1,1],[1,0,1],[1,1,1]]\\nOutput: [[0,0,0],[0,0,0],[0,0,0]]\\nExplanation:\\nFor the points (0,0), (0,2), (2,0), (2,2): floor(3/4) = floor(0.75) = 0\\nFor the points (0,1), (1,0), (1,2), (2,1): floor(5/6) = floor(0.83333333) = 0\\nFor the point (1,1): floor(8/9) = floor(0.88888889) = 0\\n\\nExample 2:\\n\\nInput: img = [[100,200,100],[200,50,200],[100,200,100]]\\nOutput: [[137,141,137],[141,138,141],[137,141,137]]\\nExplanation:\\nFor the points (0,0), (0,2), (2,0), (2,2): floor((100+200+200+50)/4) = floor(137.5) = 137\\nFor the points (0,1), (1,0), (1,2), (2,1): floor((200+200+50+200+100+100)/6) = floor(141.666667) = 141\\nFor the point (1,1): floor((50+200+200+200+200+100+100+100+100)/9) = floor(138.888889) = 138\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nm == img.length\\nn == img[i].length\\n1 <= m, n <= 200\\n0 <= img[i][j] <= 255\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/maximum-width-of-binary-tree",
        "Title": "Maximum Width of Binary Tree ",
        "Description": "b'Given the root of a binary tree, return the maximum width of the given tree.\\nThe maximum width of a tree is the maximum width among all levels.\\nThe width of one level is defined as the length between the end-nodes (the leftmost and rightmost non-null nodes), where the null nodes between the end-nodes that would be present in a complete binary tree extending down to that level are also counted into the length calculation.\\nIt is guaranteed that the answer will in the range of a 32-bit signed integer.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: root = [1,3,2,5,3,null,9]\\nOutput: 4\\nExplanation: The maximum width exists in the third level with length 4 (5,3,null,9).\\n\\nExample 2:\\n\\nInput: root = [1,3,2,5,null,null,9,6,null,7]\\nOutput: 7\\nExplanation: The maximum width exists in the fourth level with length 7 (6,null,null,null,null,null,7).\\n\\nExample 3:\\n\\nInput: root = [1,3,2,5]\\nOutput: 2\\nExplanation: The maximum width exists in the second level with length 2 (3,2).\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of nodes in the tree is in the range [1, 3000].\\n-100 <= Node.val <= 100\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/equal-tree-partition",
        "Title": "Equal Tree Partition ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/strange-printer",
        "Title": "Strange Printer ",
        "Description": "b'There is a strange printer with the following two special properties:\\n\\nThe printer can only print a sequence of the same character each time.\\nAt each turn, the printer can print new characters starting from and ending at any place and will cover the original existing characters.\\n\\nGiven a string s, return the minimum number of turns the printer needed to print it.\\n\\xc2\\xa0\\nExample 1:\\nInput: s = \"aaabbb\"\\nOutput: 2\\nExplanation: Print \"aaa\" first and then print \"bbb\".\\n\\nExample 2:\\nInput: s = \"aba\"\\nOutput: 2\\nExplanation: Print \"aaa\" first and then print \"b\" from the second place of the string, which will cover the existing character \\'a\\'.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= s.length <= 100\\ns consists of lowercase English letters.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/non-decreasing-array",
        "Title": "Non-decreasing Array ",
        "Description": "b\"Given an array nums with n integers, your task is to check if it could become non-decreasing by modifying at most one element.\\nWe define an array is non-decreasing if nums[i] <= nums[i + 1] holds for every i (0-based) such that (0 <= i <= n - 2).\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [4,2,3]\\nOutput: true\\nExplanation: You could modify the first 4 to 1 to get a non-decreasing array.\\n\\nExample 2:\\nInput: nums = [4,2,1]\\nOutput: false\\nExplanation: You can't get a non-decreasing array by modify at most one element.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nn == nums.length\\n1 <= n <= 104\\n-105 <= nums[i] <= 105\\n\\n\""
    },
    {
        "URL": "https://leetcode.com/problems/path-sum-iv",
        "Title": "Path Sum IV ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/beautiful-arrangement-ii",
        "Title": "Beautiful Arrangement II ",
        "Description": "b'Given two integers n and k, construct a list answer that contains n different positive integers ranging from 1 to n and obeys the following requirement:\\n\\nSuppose this list is answer =\\xc2\\xa0[a1, a2, a3, ... , an], then the list [|a1 - a2|, |a2 - a3|, |a3 - a4|, ... , |an-1 - an|] has exactly k distinct integers.\\n\\nReturn the list answer. If there multiple valid answers, return any of them.\\n\\xc2\\xa0\\nExample 1:\\nInput: n = 3, k = 1\\nOutput: [1,2,3]\\nExplanation: The [1,2,3] has three different positive integers ranging from 1 to 3, and the [1,1] has exactly 1 distinct integer: 1\\n\\nExample 2:\\nInput: n = 3, k = 2\\nOutput: [1,3,2]\\nExplanation: The [1,3,2] has three different positive integers ranging from 1 to 3, and the [2,1] has exactly 2 distinct integers: 1 and 2.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= k < n <= 104\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/kth-smallest-number-in-multiplication-table",
        "Title": "Kth Smallest Number in Multiplication Table ",
        "Description": "b'Nearly everyone has used the Multiplication Table. The multiplication table of size m x n is an integer matrix mat where mat[i][j] == i * j (1-indexed).\\nGiven three integers m, n, and k, return the kth smallest element in the m x n multiplication table.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: m = 3, n = 3, k = 5\\nOutput: 3\\nExplanation: The 5th smallest number is 3.\\n\\nExample 2:\\n\\nInput: m = 2, n = 3, k = 6\\nOutput: 6\\nExplanation: The 6th smallest number is 6.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= m, n <= 3 * 104\\n1 <= k <= m * n\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/trim-a-binary-search-tree",
        "Title": "Trim a Binary Search Tree ",
        "Description": "b\"Given the root of a binary search tree and the lowest and highest boundaries as low and high, trim the tree so that all its elements lies in [low, high]. Trimming the tree should not change the relative structure of the elements that will remain in the tree (i.e., any node's descendant should remain a descendant). It can be proven that there is a unique answer.\\nReturn the root of the trimmed binary search tree. Note that the root may change depending on the given bounds.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: root = [1,0,2], low = 1, high = 2\\nOutput: [1,null,2]\\n\\nExample 2:\\n\\nInput: root = [3,0,4,null,2,null,null,1], low = 1, high = 3\\nOutput: [3,2,null,1]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of nodes in the tree is in the range [1, 104].\\n0 <= Node.val <= 104\\nThe value of each node in the tree is unique.\\nroot is guaranteed to be a valid binary search tree.\\n0 <= low <= high <= 104\\n\\n\""
    },
    {
        "URL": "https://leetcode.com/problems/maximum-swap",
        "Title": "Maximum Swap ",
        "Description": "b'You are given an integer num. You can swap two digits at most once to get the maximum valued number.\\nReturn the maximum valued number you can get.\\n\\xc2\\xa0\\nExample 1:\\nInput: num = 2736\\nOutput: 7236\\nExplanation: Swap the number 2 and the number 7.\\n\\nExample 2:\\nInput: num = 9973\\nOutput: 9973\\nExplanation: No swap.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n0 <= num <= 108\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/second-minimum-node-in-a-binary-tree",
        "Title": "Second Minimum Node In a Binary Tree ",
        "Description": "b\"Given a non-empty special binary tree consisting of nodes with the non-negative value, where each node in this tree has exactly two or zero sub-node. If the node has two sub-nodes, then this node's value is the smaller value among its two sub-nodes. More formally, the property\\xc2\\xa0root.val = min(root.left.val, root.right.val)\\xc2\\xa0always holds.\\nGiven such a binary tree, you need to output the second minimum value in the set made of all the nodes' value in the whole tree.\\nIf no such second minimum value exists, output -1 instead.\\n\\xc2\\xa0\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: root = [2,2,5,null,null,5,7]\\nOutput: 5\\nExplanation: The smallest value is 2, the second smallest value is 5.\\n\\nExample 2:\\n\\nInput: root = [2,2,2]\\nOutput: -1\\nExplanation: The smallest value is 2, but there isn't any second smallest value.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of nodes in the tree is in the range [1, 25].\\n1 <= Node.val <= 231 - 1\\nroot.val == min(root.left.val, root.right.val)\\xc2\\xa0for each internal node of the tree.\\n\\n\""
    },
    {
        "URL": "https://leetcode.com/problems/bulb-switcher-ii",
        "Title": "Bulb Switcher II ",
        "Description": "b'There is a room with n bulbs labeled from 1 to n that all are turned on initially, and four buttons on the wall. Each of the four buttons has a different functionality where:\\n\\nButton 1: Flips the status of all the bulbs.\\nButton 2: Flips the status of all the bulbs with even labels (i.e., 2, 4, ...).\\nButton 3: Flips the status of all the bulbs with odd labels (i.e., 1, 3, ...).\\nButton 4: Flips the status of all the bulbs with a label j = 3k + 1 where k = 0, 1, 2, ... (i.e., 1, 4, 7, 10, ...).\\n\\nYou must make exactly presses button presses in total. For each press, you may pick any of the four buttons to press.\\nGiven the two integers n and presses, return the number of different possible statuses after performing all presses button presses.\\n\\xc2\\xa0\\nExample 1:\\nInput: n = 1, presses = 1\\nOutput: 2\\nExplanation: Status can be:\\n- [off] by pressing button 1\\n- [on] by pressing button 2\\n\\nExample 2:\\nInput: n = 2, presses = 1\\nOutput: 3\\nExplanation: Status can be:\\n- [off, off] by pressing button 1\\n- [on, off] by pressing button 2\\n- [off, on] by pressing button 3\\n\\nExample 3:\\nInput: n = 3, presses = 1\\nOutput: 4\\nExplanation: Status can be:\\n- [off, off, off] by pressing button 1\\n- [off, on, off] by pressing button 2\\n- [on, off, on] by pressing button 3\\n- [off, on, on] by pressing button 4\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= n <= 1000\\n0 <= presses <= 1000\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/number-of-longest-increasing-subsequence",
        "Title": "Number of Longest Increasing Subsequence ",
        "Description": "b'Given an integer array\\xc2\\xa0nums, return the number of longest increasing subsequences.\\nNotice that the sequence has to be strictly increasing.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [1,3,5,4,7]\\nOutput: 2\\nExplanation: The two longest increasing subsequences are [1, 3, 4, 7] and [1, 3, 5, 7].\\n\\nExample 2:\\nInput: nums = [2,2,2,2,2]\\nOutput: 5\\nExplanation: The length of the longest increasing subsequence is 1, and there are 5 increasing subsequences of length 1, so output 5.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 2000\\n-106 <= nums[i] <= 106\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/longest-continuous-increasing-subsequence",
        "Title": "Longest Continuous Increasing Subsequence ",
        "Description": "b'Given an unsorted array of integers nums, return the length of the longest continuous increasing subsequence (i.e. subarray). The subsequence must be strictly increasing.\\nA continuous increasing subsequence is defined by two indices l and r (l < r) such that it is [nums[l], nums[l + 1], ..., nums[r - 1], nums[r]] and for each l <= i < r, nums[i] < nums[i + 1].\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [1,3,5,4,7]\\nOutput: 3\\nExplanation: The longest continuous increasing subsequence is [1,3,5] with length 3.\\nEven though [1,3,5,7] is an increasing subsequence, it is not continuous as elements 5 and 7 are separated by element\\n4.\\n\\nExample 2:\\nInput: nums = [2,2,2,2,2]\\nOutput: 1\\nExplanation: The longest continuous increasing subsequence is [2] with length 1. Note that it must be strictly\\nincreasing.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 104\\n-109 <= nums[i] <= 109\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/cut-off-trees-for-golf-event",
        "Title": "Cut Off Trees for Golf Event ",
        "Description": "b\"You are asked to cut off all the trees in a forest for a golf event. The forest is represented as an m x n matrix. In this matrix:\\n\\n0 means the cell cannot be walked through.\\n1 represents an empty cell that can be walked through.\\nA number greater than 1 represents a tree in a cell that can be walked through, and this number is the tree's height.\\n\\nIn one step, you can walk in any of the four directions: north, east, south, and west. If you are standing in a cell with a tree, you can choose whether to cut it off.\\nYou must cut off the trees in order from shortest to tallest. When you cut off a tree, the value at its cell becomes 1 (an empty cell).\\nStarting from the point (0, 0), return the minimum steps you need to walk to cut off all the trees. If you cannot cut off all the trees, return -1.\\nNote: The input is generated such that no two trees have the same height, and there is at least one tree needs to be cut off.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: forest = [[1,2,3],[0,0,4],[7,6,5]]\\nOutput: 6\\nExplanation: Following the path above allows you to cut off the trees from shortest to tallest in 6 steps.\\n\\nExample 2:\\n\\nInput: forest = [[1,2,3],[0,0,0],[7,6,5]]\\nOutput: -1\\nExplanation: The trees in the bottom row cannot be accessed as the middle row is blocked.\\n\\nExample 3:\\nInput: forest = [[2,3,4],[0,0,5],[8,7,6]]\\nOutput: 6\\nExplanation: You can follow the same path as Example 1 to cut off all the trees.\\nNote that you can cut off the first tree at (0, 0) before making any steps.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nm == forest.length\\nn == forest[i].length\\n1 <= m, n <= 50\\n0 <= forest[i][j] <= 109\\nHeights of all trees are distinct.\\n\\n\""
    },
    {
        "URL": "https://leetcode.com/problems/implement-magic-dictionary",
        "Title": "Implement Magic Dictionary ",
        "Description": "b'Design a data structure that is initialized with a list of different words. Provided a string, you should determine if you can change exactly one character in this string to match any word in the data structure.\\nImplement the\\xc2\\xa0MagicDictionary\\xc2\\xa0class:\\n\\nMagicDictionary()\\xc2\\xa0Initializes the object.\\nvoid buildDict(String[]\\xc2\\xa0dictionary)\\xc2\\xa0Sets the data structure\\xc2\\xa0with an array of distinct strings dictionary.\\nbool search(String searchWord) Returns true if you can change exactly one character in searchWord to match any string in the data structure, otherwise returns false.\\n\\n\\xc2\\xa0\\nExample 1:\\nInput\\n[\"MagicDictionary\", \"buildDict\", \"search\", \"search\", \"search\", \"search\"]\\n[[], [[\"hello\", \"leetcode\"]], [\"hello\"], [\"hhllo\"], [\"hell\"], [\"leetcoded\"]]\\nOutput\\n[null, null, false, true, false, false]\\n\\nExplanation\\nMagicDictionary magicDictionary = new MagicDictionary();\\nmagicDictionary.buildDict([\"hello\", \"leetcode\"]);\\nmagicDictionary.search(\"hello\"); // return False\\nmagicDictionary.search(\"hhllo\"); // We can change the second \\'h\\' to \\'e\\' to match \"hello\" so we return True\\nmagicDictionary.search(\"hell\"); // return False\\nmagicDictionary.search(\"leetcoded\"); // return False\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <=\\xc2\\xa0dictionary.length <= 100\\n1 <=\\xc2\\xa0dictionary[i].length <= 100\\ndictionary[i] consists of only lower-case English letters.\\nAll the strings in\\xc2\\xa0dictionary\\xc2\\xa0are distinct.\\n1 <=\\xc2\\xa0searchWord.length <= 100\\nsearchWord\\xc2\\xa0consists of only lower-case English letters.\\nbuildDict\\xc2\\xa0will be called only once before search.\\nAt most 100 calls will be made to search.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/map-sum-pairs",
        "Title": "Map Sum Pairs ",
        "Description": "b'Design a map that allows you to do the following:\\n\\nMaps a string key to a given value.\\nReturns the sum of the values that have a key with a prefix equal to a given string.\\n\\nImplement the MapSum class:\\n\\nMapSum() Initializes the MapSum object.\\nvoid insert(String key, int val) Inserts the key-val pair into the map. If the key already existed, the original key-value pair will be overridden to the new one.\\nint sum(string prefix) Returns the sum of all the pairs\\' value whose key starts with the prefix.\\n\\n\\xc2\\xa0\\nExample 1:\\nInput\\n[\"MapSum\", \"insert\", \"sum\", \"insert\", \"sum\"]\\n[[], [\"apple\", 3], [\"ap\"], [\"app\", 2], [\"ap\"]]\\nOutput\\n[null, null, 3, null, 5]\\n\\nExplanation\\nMapSum mapSum = new MapSum();\\nmapSum.insert(\"apple\", 3);  \\nmapSum.sum(\"ap\");           // return 3 (apple = 3)\\nmapSum.insert(\"app\", 2);    \\nmapSum.sum(\"ap\");           // return 5 (apple + app = 3 + 2 = 5)\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= key.length, prefix.length <= 50\\nkey and prefix consist of only lowercase English letters.\\n1 <= val <= 1000\\nAt most 50 calls will be made to insert and sum.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/valid-parenthesis-string",
        "Title": "Valid Parenthesis String ",
        "Description": "b'Given a string s containing only three types of characters: \\'(\\', \\')\\' and \\'*\\', return true if s is valid.\\nThe following rules define a valid string:\\n\\nAny left parenthesis \\'(\\' must have a corresponding right parenthesis \\')\\'.\\nAny right parenthesis \\')\\' must have a corresponding left parenthesis \\'(\\'.\\nLeft parenthesis \\'(\\' must go before the corresponding right parenthesis \\')\\'.\\n\\'*\\' could be treated as a single right parenthesis \\')\\' or a single left parenthesis \\'(\\' or an empty string \"\".\\n\\n\\xc2\\xa0\\nExample 1:\\nInput: s = \"()\"\\nOutput: true\\nExample 2:\\nInput: s = \"(*)\"\\nOutput: true\\nExample 3:\\nInput: s = \"(*))\"\\nOutput: true\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= s.length <= 100\\ns[i] is \\'(\\', \\')\\' or \\'*\\'.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/24-game",
        "Title": "24 Game ",
        "Description": "b'You are given an integer array cards of length 4. You have four cards, each containing a number in the range [1, 9]. You should arrange the numbers on these cards in a mathematical expression using the operators [\\'+\\', \\'-\\', \\'*\\', \\'/\\'] and the parentheses \\'(\\' and \\')\\' to get the value 24.\\nYou are restricted with the following rules:\\n\\nThe division operator \\'/\\' represents real division, not integer division.\\n\\n\\t\\nFor example, 4 / (1 - 2 / 3) = 4 / (1 / 3) = 12.\\n\\n\\nEvery operation done is between two numbers. In particular, we cannot use \\'-\\' as a unary operator.\\n\\t\\nFor example, if cards = [1, 1, 1, 1], the expression \"-1 - 1 - 1 - 1\" is not allowed.\\n\\n\\nYou cannot concatenate numbers together\\n\\t\\nFor example, if cards = [1, 2, 1, 2], the expression \"12 + 12\" is not valid.\\n\\n\\n\\nReturn true if you can get such expression that evaluates to 24, and false otherwise.\\n\\xc2\\xa0\\nExample 1:\\nInput: cards = [4,1,8,7]\\nOutput: true\\nExplanation: (8-4) * (7-1) = 24\\n\\nExample 2:\\nInput: cards = [1,2,1,2]\\nOutput: false\\n\\n\\xc2\\xa0\\nConstraints:\\n\\ncards.length == 4\\n1 <= cards[i] <= 9\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/valid-palindrome-ii",
        "Title": "Valid Palindrome II ",
        "Description": "b'Given a string s, return true if the s can be palindrome after deleting at most one character from it.\\n\\xc2\\xa0\\nExample 1:\\nInput: s = \"aba\"\\nOutput: true\\n\\nExample 2:\\nInput: s = \"abca\"\\nOutput: true\\nExplanation: You could delete the character \\'c\\'.\\n\\nExample 3:\\nInput: s = \"abc\"\\nOutput: false\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= s.length <= 105\\ns consists of lowercase English letters.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/next-closest-time",
        "Title": "Next Closest Time ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/baseball-game",
        "Title": "Baseball Game ",
        "Description": "b'You are keeping score for a baseball game with strange rules. The game consists of several rounds, where the scores of past rounds may affect future rounds\\' scores.\\nAt the beginning of the game, you start with an empty record. You are given a list of strings ops, where ops[i] is the ith operation you must apply to the record and is one of the following:\\n\\nAn integer x - Record a new score of x.\\n\"+\" - Record a new score that is the sum of the previous two scores. It is guaranteed there will always be two previous scores.\\n\"D\" - Record a new score that is double the previous score. It is guaranteed there will always be a previous score.\\n\"C\" - Invalidate the previous score, removing it from the record. It is guaranteed there will always be a previous score.\\n\\nReturn the sum of all the scores on the record. The test cases are generated so that the answer fits in a 32-bit integer.\\n\\xc2\\xa0\\nExample 1:\\nInput: ops = [\"5\",\"2\",\"C\",\"D\",\"+\"]\\nOutput: 30\\nExplanation:\\n\"5\" - Add 5 to the record, record is now [5].\\n\"2\" - Add 2 to the record, record is now [5, 2].\\n\"C\" - Invalidate and remove the previous score, record is now [5].\\n\"D\" - Add 2 * 5 = 10 to the record, record is now [5, 10].\\n\"+\" - Add 5 + 10 = 15 to the record, record is now [5, 10, 15].\\nThe total sum is 5 + 10 + 15 = 30.\\n\\nExample 2:\\nInput: ops = [\"5\",\"-2\",\"4\",\"C\",\"D\",\"9\",\"+\",\"+\"]\\nOutput: 27\\nExplanation:\\n\"5\" - Add 5 to the record, record is now [5].\\n\"-2\" - Add -2 to the record, record is now [5, -2].\\n\"4\" - Add 4 to the record, record is now [5, -2, 4].\\n\"C\" - Invalidate and remove the previous score, record is now [5, -2].\\n\"D\" - Add 2 * -2 = -4 to the record, record is now [5, -2, -4].\\n\"9\" - Add 9 to the record, record is now [5, -2, -4, 9].\\n\"+\" - Add -4 + 9 = 5 to the record, record is now [5, -2, -4, 9, 5].\\n\"+\" - Add 9 + 5 = 14 to the record, record is now [5, -2, -4, 9, 5, 14].\\nThe total sum is 5 + -2 + -4 + 9 + 5 + 14 = 27.\\n\\nExample 3:\\nInput: ops = [\"1\",\"C\"]\\nOutput: 0\\nExplanation:\\n\"1\" - Add 1 to the record, record is now [1].\\n\"C\" - Invalidate and remove the previous score, record is now [].\\nSince the record is empty, the total sum is 0.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= ops.length <= 1000\\nops[i] is \"C\", \"D\", \"+\", or a string representing an integer in the range [-3 * 104, 3 * 104].\\nFor operation \"+\", there will always be at least two previous scores on the record.\\nFor operations \"C\" and \"D\", there will always be at least one previous score on the record.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/k-empty-slots",
        "Title": "K Empty Slots ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/redundant-connection",
        "Title": "Redundant Connection ",
        "Description": "b'In this problem, a tree is an undirected graph that is connected and has no cycles.\\nYou are given a graph that started as a tree with n nodes labeled from 1 to n, with one additional edge added. The added edge has two different vertices chosen from 1 to n, and was not an edge that already existed. The graph is represented as an array edges of length n where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the graph.\\nReturn an edge that can be removed so that the resulting graph is a tree of n nodes. If there are multiple answers, return the answer that occurs last in the input.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: edges = [[1,2],[1,3],[2,3]]\\nOutput: [2,3]\\n\\nExample 2:\\n\\nInput: edges = [[1,2],[2,3],[3,4],[1,4],[1,5]]\\nOutput: [1,4]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nn == edges.length\\n3 <= n <= 1000\\nedges[i].length == 2\\n1 <= ai < bi <= edges.length\\nai != bi\\nThere are no repeated edges.\\nThe given graph is connected.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/redundant-connection-ii",
        "Title": "Redundant Connection II ",
        "Description": "b'In this problem, a rooted tree is a directed graph such that, there is exactly one node (the root) for which all other nodes are descendants of this node, plus every node has exactly one parent, except for the root node which has no parents.\\nThe given input is a directed graph that started as a rooted tree with n nodes (with distinct values from 1 to n), with one additional directed edge added. The added edge has two different vertices chosen from 1 to n, and was not an edge that already existed.\\nThe resulting graph is given as a 2D-array of edges. Each element of edges is a pair [ui, vi] that represents a directed edge connecting nodes ui and vi, where ui is a parent of child vi.\\nReturn an edge that can be removed so that the resulting graph is a rooted tree of n nodes. If there are multiple answers, return the answer that occurs last in the given 2D-array.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: edges = [[1,2],[1,3],[2,3]]\\nOutput: [2,3]\\n\\nExample 2:\\n\\nInput: edges = [[1,2],[2,3],[3,4],[4,1],[1,5]]\\nOutput: [4,1]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nn == edges.length\\n3 <= n <= 1000\\nedges[i].length == 2\\n1 <= ui, vi <= n\\nui != vi\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/repeated-string-match",
        "Title": "Repeated String Match ",
        "Description": "b'Given two strings a and b, return the minimum number of times you should repeat string a so that string b is a substring of it. If it is impossible for b\\xe2\\x80\\x8b\\xe2\\x80\\x8b\\xe2\\x80\\x8b\\xe2\\x80\\x8b\\xe2\\x80\\x8b\\xe2\\x80\\x8b to be a substring of a after repeating it, return -1.\\nNotice: string \"abc\" repeated 0 times is \"\", repeated 1 time is \"abc\" and repeated 2 times is \"abcabc\".\\n\\xc2\\xa0\\nExample 1:\\nInput: a = \"abcd\", b = \"cdabcdab\"\\nOutput: 3\\nExplanation: We return 3 because by repeating a three times \"abcdabcdabcd\", b is a substring of it.\\n\\nExample 2:\\nInput: a = \"a\", b = \"aa\"\\nOutput: 2\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= a.length, b.length <= 104\\na and b consist of lowercase English letters.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/longest-univalue-path",
        "Title": "Longest Univalue Path ",
        "Description": "b'Given the root of a binary tree, return the length of the longest path, where each node in the path has the same value. This path may or may not pass through the root.\\nThe length of the path between two nodes is represented by the number of edges between them.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: root = [5,4,5,1,1,null,5]\\nOutput: 2\\nExplanation: The shown image shows that the longest path of the same value (i.e. 5).\\n\\nExample 2:\\n\\nInput: root = [1,4,5,4,4,null,5]\\nOutput: 2\\nExplanation: The shown image shows that the longest path of the same value (i.e. 4).\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of nodes in the tree is in the range [0, 104].\\n-1000 <= Node.val <= 1000\\nThe depth of the tree will not exceed 1000.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/knight-probability-in-chessboard",
        "Title": "Knight Probability in Chessboard ",
        "Description": "b'On an n x n chessboard, a knight starts at the cell (row, column) and attempts to make exactly k moves. The rows and columns are 0-indexed, so the top-left cell is (0, 0), and the bottom-right cell is (n - 1, n - 1).\\nA chess knight has eight possible moves it can make, as illustrated below. Each move is two cells in a cardinal direction, then one cell in an orthogonal direction.\\n\\nEach time the knight is to move, it chooses one of eight possible moves uniformly at random (even if the piece would go off the chessboard) and moves there.\\nThe knight continues moving until it has made exactly k moves or has moved off the chessboard.\\nReturn the probability that the knight remains on the board after it has stopped moving.\\n\\xc2\\xa0\\nExample 1:\\nInput: n = 3, k = 2, row = 0, column = 0\\nOutput: 0.06250\\nExplanation: There are two moves (to (1,2), (2,1)) that will keep the knight on the board.\\nFrom each of those positions, there are also two moves that will keep the knight on the board.\\nThe total probability the knight stays on the board is 0.0625.\\n\\nExample 2:\\nInput: n = 1, k = 0, row = 0, column = 0\\nOutput: 1.00000\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= n <= 25\\n0 <= k <= 100\\n0 <= row, column <= n\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/maximum-sum-of-3-non-overlapping-subarrays",
        "Title": "Maximum Sum of 3 Non-Overlapping Subarrays ",
        "Description": "b'Given an integer array nums and an integer k, find three non-overlapping subarrays of length k with maximum sum and return them.\\nReturn the result as a list of indices representing the starting position of each interval (0-indexed). If there are multiple answers, return the lexicographically smallest one.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [1,2,1,2,6,7,5,1], k = 2\\nOutput: [0,3,5]\\nExplanation: Subarrays [1, 2], [2, 6], [7, 5] correspond to the starting indices [0, 3, 5].\\nWe could have also taken [2, 1], but an answer of [1, 3, 5] would be lexicographically larger.\\n\\nExample 2:\\nInput: nums = [1,2,1,2,1,2,1,2,1], k = 2\\nOutput: [0,2,4]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 2 * 104\\n1 <= nums[i] <\\xc2\\xa0216\\n1 <= k <= floor(nums.length / 3)\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/employee-importance",
        "Title": "Employee Importance ",
        "Description": "b\"You have a data structure of employee information, including the employee's unique ID, importance value, and direct subordinates' IDs.\\nYou are given an array of employees employees where:\\n\\nemployees[i].id is the ID of the ith employee.\\nemployees[i].importance is the importance value of the ith employee.\\nemployees[i].subordinates is a list of the IDs of the direct subordinates of the ith employee.\\n\\nGiven an integer id that represents an employee's ID, return the total importance value of this employee and all their direct and indirect subordinates.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: employees = [[1,5,[2,3]],[2,3,[]],[3,3,[]]], id = 1\\nOutput: 11\\nExplanation: Employee 1 has an importance value of 5 and has two direct subordinates: employee 2 and employee 3.\\nThey both have an importance value of 3.\\nThus, the total importance value of employee 1 is 5 + 3 + 3 = 11.\\n\\nExample 2:\\n\\nInput: employees = [[1,2,[5]],[5,-3,[]]], id = 5\\nOutput: -3\\nExplanation: Employee 5 has an importance value of -3 and has no direct subordinates.\\nThus, the total importance value of employee 5 is -3.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= employees.length <= 2000\\n1 <= employees[i].id <= 2000\\nAll employees[i].id are unique.\\n-100 <= employees[i].importance <= 100\\nOne employee has at most one direct leader and may have several subordinates.\\nThe IDs in employees[i].subordinates are valid IDs.\\n\\n\""
    },
    {
        "URL": "https://leetcode.com/problems/stickers-to-spell-word",
        "Title": "Stickers to Spell Word ",
        "Description": "b'We are given n different types of stickers. Each sticker has a lowercase English word on it.\\nYou would like to spell out the given string target by cutting individual letters from your collection of stickers and rearranging them. You can use each sticker more than once if you want, and you have infinite quantities of each sticker.\\nReturn the minimum number of stickers that you need to spell out target. If the task is impossible, return -1.\\nNote: In all test cases, all words were chosen randomly from the 1000 most common US English words, and target was chosen as a concatenation of two random words.\\n\\xc2\\xa0\\nExample 1:\\nInput: stickers = [\"with\",\"example\",\"science\"], target = \"thehat\"\\nOutput: 3\\nExplanation:\\nWe can use 2 \"with\" stickers, and 1 \"example\" sticker.\\nAfter cutting and rearrange the letters of those stickers, we can form the target \"thehat\".\\nAlso, this is the minimum number of stickers necessary to form the target string.\\n\\nExample 2:\\nInput: stickers = [\"notice\",\"possible\"], target = \"basicbasic\"\\nOutput: -1\\nExplanation:\\nWe cannot form the target \"basicbasic\" from cutting letters from the given stickers.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nn == stickers.length\\n1 <= n <= 50\\n1 <= stickers[i].length <= 10\\n1 <= target.length <= 15\\nstickers[i] and target consist of lowercase English letters.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/top-k-frequent-words",
        "Title": "Top K Frequent Words ",
        "Description": "b'Given an array of strings words and an integer k, return the k most frequent strings.\\nReturn the answer sorted by the frequency from highest to lowest. Sort the words with the same frequency by their lexicographical order.\\n\\xc2\\xa0\\nExample 1:\\nInput: words = [\"i\",\"love\",\"leetcode\",\"i\",\"love\",\"coding\"], k = 2\\nOutput: [\"i\",\"love\"]\\nExplanation: \"i\" and \"love\" are the two most frequent words.\\nNote that \"i\" comes before \"love\" due to a lower alphabetical order.\\n\\nExample 2:\\nInput: words = [\"the\",\"day\",\"is\",\"sunny\",\"the\",\"the\",\"the\",\"sunny\",\"is\",\"is\"], k = 4\\nOutput: [\"the\",\"is\",\"sunny\",\"day\"]\\nExplanation: \"the\", \"is\", \"sunny\" and \"day\" are the four most frequent words, with the number of occurrence being 4, 3, 2 and 1 respectively.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= words.length <= 500\\n1 <= words[i] <= 10\\nwords[i] consists of lowercase English letters.\\nk is in the range [1, The number of unique words[i]]\\n\\n\\xc2\\xa0\\nFollow-up: Could you solve it in O(n log(k)) time and O(n) extra space?\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/binary-number-with-alternating-bits",
        "Title": "Binary Number with Alternating Bits ",
        "Description": "b'Given a positive integer, check whether it has alternating bits: namely, if two adjacent bits will always have different values.\\n\\xc2\\xa0\\nExample 1:\\nInput: n = 5\\nOutput: true\\nExplanation: The binary representation of 5 is: 101\\n\\nExample 2:\\nInput: n = 7\\nOutput: false\\nExplanation: The binary representation of 7 is: 111.\\nExample 3:\\nInput: n = 11\\nOutput: false\\nExplanation: The binary representation of 11 is: 1011.\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= n <= 231 - 1\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/number-of-distinct-islands",
        "Title": "Number of Distinct Islands ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/max-area-of-island",
        "Title": "Max Area of Island ",
        "Description": "b\"You are given an m x n binary matrix grid. An island is a group of 1's (representing land) connected 4-directionally (horizontal or vertical.) You may assume all four edges of the grid are surrounded by water.\\nThe area of an island is the number of cells with a value 1 in the island.\\nReturn the maximum area of an island in grid. If there is no island, return 0.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: grid = [[0,0,1,0,0,0,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,1,1,1,0,0,0],[0,1,1,0,1,0,0,0,0,0,0,0,0],[0,1,0,0,1,1,0,0,1,0,1,0,0],[0,1,0,0,1,1,0,0,1,1,1,0,0],[0,0,0,0,0,0,0,0,0,0,1,0,0],[0,0,0,0,0,0,0,1,1,1,0,0,0],[0,0,0,0,0,0,0,1,1,0,0,0,0]]\\nOutput: 6\\nExplanation: The answer is not 11, because the island must be connected 4-directionally.\\n\\nExample 2:\\nInput: grid = [[0,0,0,0,0,0,0,0]]\\nOutput: 0\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nm == grid.length\\nn == grid[i].length\\n1 <= m, n <= 50\\ngrid[i][j] is either 0 or 1.\\n\\n\""
    },
    {
        "URL": "https://leetcode.com/problems/count-binary-substrings",
        "Title": "Count Binary Substrings ",
        "Description": "b'Given a binary string s, return the number of non-empty substrings that have the same number of 0\\'s and 1\\'s, and all the 0\\'s and all the 1\\'s in these substrings are grouped consecutively.\\nSubstrings that occur multiple times are counted the number of times they occur.\\n\\xc2\\xa0\\nExample 1:\\nInput: s = \"00110011\"\\nOutput: 6\\nExplanation: There are 6 substrings that have equal number of consecutive 1\\'s and 0\\'s: \"0011\", \"01\", \"1100\", \"10\", \"0011\", and \"01\".\\nNotice that some of these substrings repeat and are counted the number of times they occur.\\nAlso, \"00110011\" is not a valid substring because all the 0\\'s (and 1\\'s) are not grouped together.\\n\\nExample 2:\\nInput: s = \"10101\"\\nOutput: 4\\nExplanation: There are 4 substrings: \"10\", \"01\", \"10\", \"01\" that have equal number of consecutive 1\\'s and 0\\'s.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= s.length <= 105\\ns[i] is either \\'0\\' or \\'1\\'.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/degree-of-an-array",
        "Title": "Degree of an Array ",
        "Description": "b'Given a non-empty array of non-negative integers nums, the degree of this array is defined as the maximum frequency of any one of its elements.\\nYour task is to find the smallest possible length of a (contiguous) subarray of nums, that has the same degree as nums.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [1,2,2,3,1]\\nOutput: 2\\nExplanation: \\nThe input array has a degree of 2 because both elements 1 and 2 appear twice.\\nOf the subarrays that have the same degree:\\n[1, 2, 2, 3, 1], [1, 2, 2, 3], [2, 2, 3, 1], [1, 2, 2], [2, 2, 3], [2, 2]\\nThe shortest length is 2. So return 2.\\n\\nExample 2:\\nInput: nums = [1,2,2,3,1,4,2]\\nOutput: 6\\nExplanation: \\nThe degree is 3 because the element 2 is repeated 3 times.\\nSo [2,2,3,1,4,2] is the shortest subarray, therefore returning 6.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nnums.length will be between 1 and 50,000.\\nnums[i] will be an integer between 0 and 49,999.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/partition-to-k-equal-sum-subsets",
        "Title": "Partition to K Equal Sum Subsets ",
        "Description": "b'Given an integer array nums and an integer k, return true if it is possible to divide this array into k non-empty subsets whose sums are all equal.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [4,3,2,3,5,2,1], k = 4\\nOutput: true\\nExplanation: It is possible to divide it into 4 subsets (5), (1, 4), (2,3), (2,3) with equal sums.\\n\\nExample 2:\\nInput: nums = [1,2,3,4], k = 3\\nOutput: false\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= k <= nums.length <= 16\\n1 <= nums[i] <= 104\\nThe frequency of each element is in the range [1, 4].\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/falling-squares",
        "Title": "Falling Squares ",
        "Description": "b'There are several squares being dropped onto the X-axis of a 2D plane.\\nYou are given a 2D integer array positions where positions[i] = [lefti, sideLengthi] represents the ith square with a side length of sideLengthi that is dropped with its left edge aligned with X-coordinate lefti.\\nEach square is dropped one at a time from a height above any landed squares. It then falls downward (negative Y direction) until it either lands on the top side of another square or on the X-axis. A square brushing the left/right side of another square does not count as landing on it. Once it lands, it freezes in place and cannot be moved.\\nAfter each square is dropped, you must record the height of the current tallest stack of squares.\\nReturn an integer array ans where ans[i] represents the height described above after dropping the ith square.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: positions = [[1,2],[2,3],[6,1]]\\nOutput: [2,5,5]\\nExplanation:\\nAfter the first drop, the tallest stack is square 1 with a height of 2.\\nAfter the second drop, the tallest stack is squares 1 and 2 with a height of 5.\\nAfter the third drop, the tallest stack is still squares 1 and 2 with a height of 5.\\nThus, we return an answer of [2, 5, 5].\\n\\nExample 2:\\nInput: positions = [[100,100],[200,100]]\\nOutput: [100,100]\\nExplanation:\\nAfter the first drop, the tallest stack is square 1 with a height of 100.\\nAfter the second drop, the tallest stack is either square 1 or square 2, both with heights of 100.\\nThus, we return an answer of [100, 100].\\nNote that square 2 only brushes the right side of square 1, which does not count as landing on it.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= positions.length <= 1000\\n1 <= lefti <= 108\\n1 <= sideLengthi <= 106\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/search-in-a-binary-search-tree",
        "Title": "Search in a Binary Search Tree ",
        "Description": "b\"You are given the root of a binary search tree (BST) and an integer val.\\nFind the node in the BST that the node's value equals val and return the subtree rooted with that node. If such a node does not exist, return null.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: root = [4,2,7,1,3], val = 2\\nOutput: [2,1,3]\\n\\nExample 2:\\n\\nInput: root = [4,2,7,1,3], val = 5\\nOutput: []\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of nodes in the tree is in the range [1, 5000].\\n1 <= Node.val <= 107\\nroot is a binary search tree.\\n1 <= val <= 107\\n\\n\""
    },
    {
        "URL": "https://leetcode.com/problems/insert-into-a-binary-search-tree",
        "Title": "Insert into a Binary Search Tree ",
        "Description": "b\"You are given the root node of a binary search tree (BST) and a value to insert into the tree. Return the root node of the BST after the insertion. It is guaranteed that the new value does not exist in the original BST.\\nNotice\\xc2\\xa0that there may exist\\xc2\\xa0multiple valid ways for the\\xc2\\xa0insertion, as long as the tree remains a BST after insertion. You can return any of them.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: root = [4,2,7,1,3], val = 5\\nOutput: [4,2,7,1,3,5]\\nExplanation: Another accepted tree is:\\n\\n\\nExample 2:\\nInput: root = [40,20,60,10,30,50,70], val = 25\\nOutput: [40,20,60,10,30,50,70,null,null,25]\\n\\nExample 3:\\nInput: root = [4,2,7,1,3,null,null,null,null,null,null], val = 5\\nOutput: [4,2,7,1,3,5]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of nodes in\\xc2\\xa0the tree will be in the range [0,\\xc2\\xa0104].\\n-108 <= Node.val <= 108\\nAll the values Node.val are unique.\\n-108 <= val <= 108\\nIt's guaranteed that val does not exist in the original BST.\\n\\n\""
    },
    {
        "URL": "https://leetcode.com/problems/search-in-a-sorted-array-of-unknown-size",
        "Title": "Search in a Sorted Array of Unknown Size ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/kth-largest-element-in-a-stream",
        "Title": "Kth Largest Element in a Stream ",
        "Description": "b'Design a class to find the kth largest element in a stream. Note that it is the kth largest element in the sorted order, not the kth distinct element.\\nImplement KthLargest class:\\n\\nKthLargest(int k, int[] nums) Initializes the object with the integer k and the stream of integers nums.\\nint add(int val) Appends the integer val to the stream and returns the element representing the kth largest element in the stream.\\n\\n\\xc2\\xa0\\nExample 1:\\nInput\\n[\"KthLargest\", \"add\", \"add\", \"add\", \"add\", \"add\"]\\n[[3, [4, 5, 8, 2]], [3], [5], [10], [9], [4]]\\nOutput\\n[null, 4, 5, 5, 8, 8]\\n\\nExplanation\\nKthLargest kthLargest = new KthLargest(3, [4, 5, 8, 2]);\\nkthLargest.add(3);   // return 4\\nkthLargest.add(5);   // return 5\\nkthLargest.add(10);  // return 5\\nkthLargest.add(9);   // return 8\\nkthLargest.add(4);   // return 8\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= k <= 104\\n0 <= nums.length <= 104\\n-104 <= nums[i] <= 104\\n-104 <= val <= 104\\nAt most 104 calls will be made to add.\\nIt is guaranteed that there will be at least k elements in the array when you search for the kth element.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/binary-search",
        "Title": "Binary Search ",
        "Description": "b'Given an array of integers nums which is sorted in ascending order, and an integer target, write a function to search target in nums. If target exists, then return its index. Otherwise, return -1.\\nYou must write an algorithm with O(log n) runtime complexity.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [-1,0,3,5,9,12], target = 9\\nOutput: 4\\nExplanation: 9 exists in nums and its index is 4\\n\\nExample 2:\\nInput: nums = [-1,0,3,5,9,12], target = 2\\nOutput: -1\\nExplanation: 2 does not exist in nums so return -1\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 104\\n-104 < nums[i], target < 104\\nAll the integers in nums are unique.\\nnums is sorted in ascending order.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/design-hashset",
        "Title": "Design HashSet ",
        "Description": "b'Design a HashSet without using any built-in hash table libraries.\\nImplement MyHashSet class:\\n\\nvoid add(key) Inserts the value key into the HashSet.\\nbool contains(key) Returns whether the value key exists in the HashSet or not.\\nvoid remove(key) Removes the value key in the HashSet. If key does not exist in the HashSet, do nothing.\\n\\n\\xc2\\xa0\\nExample 1:\\nInput\\n[\"MyHashSet\", \"add\", \"add\", \"contains\", \"contains\", \"add\", \"contains\", \"remove\", \"contains\"]\\n[[], [1], [2], [1], [3], [2], [2], [2], [2]]\\nOutput\\n[null, null, null, true, false, null, true, null, false]\\n\\nExplanation\\nMyHashSet myHashSet = new MyHashSet();\\nmyHashSet.add(1);      // set = [1]\\nmyHashSet.add(2);      // set = [1, 2]\\nmyHashSet.contains(1); // return True\\nmyHashSet.contains(3); // return False, (not found)\\nmyHashSet.add(2);      // set = [1, 2]\\nmyHashSet.contains(2); // return True\\nmyHashSet.remove(2);   // set = [1]\\nmyHashSet.contains(2); // return False, (already removed)\\n\\xc2\\xa0\\nConstraints:\\n\\n0 <= key <= 106\\nAt most 104 calls will be made to add, remove, and contains.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/design-hashmap",
        "Title": "Design HashMap ",
        "Description": "b'Design a HashMap without using any built-in hash table libraries.\\nImplement the MyHashMap class:\\n\\nMyHashMap() initializes the object with an empty map.\\nvoid put(int key, int value) inserts a (key, value) pair into the HashMap. If the key already exists in the map, update the corresponding value.\\nint get(int key) returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key.\\nvoid remove(key) removes the key and its corresponding value if the map contains the mapping for the key.\\n\\n\\xc2\\xa0\\nExample 1:\\nInput\\n[\"MyHashMap\", \"put\", \"put\", \"get\", \"get\", \"put\", \"get\", \"remove\", \"get\"]\\n[[], [1, 1], [2, 2], [1], [3], [2, 1], [2], [2], [2]]\\nOutput\\n[null, null, null, 1, -1, null, 1, null, -1]\\n\\nExplanation\\nMyHashMap myHashMap = new MyHashMap();\\nmyHashMap.put(1, 1); // The map is now [[1,1]]\\nmyHashMap.put(2, 2); // The map is now [[1,1], [2,2]]\\nmyHashMap.get(1);    // return 1, The map is now [[1,1], [2,2]]\\nmyHashMap.get(3);    // return -1 (i.e., not found), The map is now [[1,1], [2,2]]\\nmyHashMap.put(2, 1); // The map is now [[1,1], [2,1]] (i.e., update the existing value)\\nmyHashMap.get(2);    // return 1, The map is now [[1,1], [2,1]]\\nmyHashMap.remove(2); // remove the mapping for 2, The map is now [[1,1]]\\nmyHashMap.get(2);    // return -1 (i.e., not found), The map is now [[1,1]]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n0 <= key, value <= 106\\nAt most 104 calls will be made to put, get, and remove.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/design-linked-list",
        "Title": "Design Linked List ",
        "Description": "b'Design your implementation of the linked list. You can choose to use a singly or doubly linked list.\\nA node in a singly linked list should have two attributes: val and next. val is the value of the current node, and next is a pointer/reference to the next node.\\nIf you want to use the doubly linked list, you will need one more attribute prev to indicate the previous node in the linked list. Assume all nodes in the linked list are 0-indexed.\\nImplement the MyLinkedList class:\\n\\nMyLinkedList() Initializes the MyLinkedList object.\\nint get(int index) Get the value of the indexth node in the linked list. If the index is invalid, return -1.\\nvoid addAtHead(int val) Add a node of value val before the first element of the linked list. After the insertion, the new node will be the first node of the linked list.\\nvoid addAtTail(int val) Append a node of value val as the last element of the linked list.\\nvoid addAtIndex(int index, int val) Add a node of value val before the indexth node in the linked list. If index equals the length of the linked list, the node will be appended to the end of the linked list. If index is greater than the length, the node will not be inserted.\\nvoid deleteAtIndex(int index) Delete the indexth node in the linked list, if the index is valid.\\n\\n\\xc2\\xa0\\nExample 1:\\nInput\\n[\"MyLinkedList\", \"addAtHead\", \"addAtTail\", \"addAtIndex\", \"get\", \"deleteAtIndex\", \"get\"]\\n[[], [1], [3], [1, 2], [1], [1], [1]]\\nOutput\\n[null, null, null, null, 2, null, 3]\\n\\nExplanation\\nMyLinkedList myLinkedList = new MyLinkedList();\\nmyLinkedList.addAtHead(1);\\nmyLinkedList.addAtTail(3);\\nmyLinkedList.addAtIndex(1, 2);    // linked list becomes 1->2->3\\nmyLinkedList.get(1);              // return 2\\nmyLinkedList.deleteAtIndex(1);    // now the linked list is 1->3\\nmyLinkedList.get(1);              // return 3\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n0 <= index, val <= 1000\\nPlease do not use the built-in LinkedList library.\\nAt most 2000 calls will be made to get, addAtHead, addAtTail, addAtIndex and deleteAtIndex.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/insert-into-a-sorted-circular-linked-list",
        "Title": "Insert into a Sorted Circular Linked List ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/to-lower-case",
        "Title": "To Lower Case ",
        "Description": "b'Given a string s, return the string after replacing every uppercase letter with the same lowercase letter.\\n\\xc2\\xa0\\nExample 1:\\nInput: s = \"Hello\"\\nOutput: \"hello\"\\n\\nExample 2:\\nInput: s = \"here\"\\nOutput: \"here\"\\n\\nExample 3:\\nInput: s = \"LOVELY\"\\nOutput: \"lovely\"\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= s.length <= 100\\ns consists of printable ASCII characters.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/random-pick-with-blacklist",
        "Title": "Random Pick with Blacklist ",
        "Description": "b'You are given an integer n and an array of unique integers blacklist. Design an algorithm to pick a random integer in the range [0, n - 1] that is not in blacklist. Any integer that is in the mentioned range and not in blacklist should be equally likely to be returned.\\nOptimize your algorithm such that it minimizes the number of calls to the built-in random function of your language.\\nImplement the Solution class:\\n\\nSolution(int n, int[] blacklist) Initializes the object with the integer n and the blacklisted integers blacklist.\\nint pick() Returns a random integer in the range [0, n - 1] and not in blacklist.\\n\\n\\xc2\\xa0\\nExample 1:\\nInput\\n[\"Solution\", \"pick\", \"pick\", \"pick\", \"pick\", \"pick\", \"pick\", \"pick\"]\\n[[7, [2, 3, 5]], [], [], [], [], [], [], []]\\nOutput\\n[null, 0, 4, 1, 6, 1, 0, 4]\\n\\nExplanation\\nSolution solution = new Solution(7, [2, 3, 5]);\\nsolution.pick(); // return 0, any integer from [0,1,4,6] should be ok. Note that for every call of pick,\\n                 // 0, 1, 4, and 6 must be equally likely to be returned (i.e., with probability 1/4).\\nsolution.pick(); // return 4\\nsolution.pick(); // return 1\\nsolution.pick(); // return 6\\nsolution.pick(); // return 1\\nsolution.pick(); // return 0\\nsolution.pick(); // return 4\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= n <= 109\\n0 <= blacklist.length <= min(105, n - 1)\\n0 <= blacklist[i] < n\\nAll the values of blacklist are unique.\\nAt most 2 * 104 calls will be made to pick.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/number-of-distinct-islands-ii",
        "Title": "Number of Distinct Islands II ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/minimum-ascii-delete-sum-for-two-strings",
        "Title": "Minimum ASCII Delete Sum for Two Strings ",
        "Description": "b'Given two strings s1 and\\xc2\\xa0s2, return the lowest ASCII sum of deleted characters to make two strings equal.\\n\\xc2\\xa0\\nExample 1:\\nInput: s1 = \"sea\", s2 = \"eat\"\\nOutput: 231\\nExplanation: Deleting \"s\" from \"sea\" adds the ASCII value of \"s\" (115) to the sum.\\nDeleting \"t\" from \"eat\" adds 116 to the sum.\\nAt the end, both strings are equal, and 115 + 116 = 231 is the minimum sum possible to achieve this.\\n\\nExample 2:\\nInput: s1 = \"delete\", s2 = \"leet\"\\nOutput: 403\\nExplanation: Deleting \"dee\" from \"delete\" to turn the string into \"let\",\\nadds 100[d] + 101[e] + 101[e] to the sum.\\nDeleting \"e\" from \"leet\" adds 101[e] to the sum.\\nAt the end, both strings are equal to \"let\", and the answer is 100+101+101+101 = 403.\\nIf instead we turned both strings into \"lee\" or \"eet\", we would get answers of 433 or 417, which are higher.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= s1.length, s2.length <= 1000\\ns1 and s2 consist of lowercase English letters.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/subarray-product-less-than-k",
        "Title": "Subarray Product Less Than K ",
        "Description": "b'Given an array of integers nums and an integer k, return the number of contiguous subarrays where the product of all the elements in the subarray is strictly less than k.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [10,5,2,6], k = 100\\nOutput: 8\\nExplanation: The 8 subarrays that have product less than 100 are:\\n[10], [5], [2], [6], [10, 5], [5, 2], [2, 6], [5, 2, 6]\\nNote that [10, 5, 2] is not included as the product of 100 is not strictly less than k.\\n\\nExample 2:\\nInput: nums = [1,2,3], k = 0\\nOutput: 0\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 3 * 104\\n1 <= nums[i] <= 1000\\n0 <= k <= 106\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-transaction-fee",
        "Title": "Best Time to Buy and Sell Stock with Transaction Fee ",
        "Description": "b'You are given an array prices where prices[i] is the price of a given stock on the ith day, and an integer fee representing a transaction fee.\\nFind the maximum profit you can achieve. You may complete as many transactions as you like, but you need to pay the transaction fee for each transaction.\\nNote: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).\\n\\xc2\\xa0\\nExample 1:\\nInput: prices = [1,3,2,8,4,9], fee = 2\\nOutput: 8\\nExplanation: The maximum profit can be achieved by:\\n- Buying at prices[0] = 1\\n- Selling at prices[3] = 8\\n- Buying at prices[4] = 4\\n- Selling at prices[5] = 9\\nThe total profit is ((8 - 1) - 2) + ((9 - 4) - 2) = 8.\\n\\nExample 2:\\nInput: prices = [1,3,7,5,10,3], fee = 3\\nOutput: 6\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= prices.length <= 5 * 104\\n1 <= prices[i] < 5 * 104\\n0 <= fee < 5 * 104\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/range-module",
        "Title": "Range Module ",
        "Description": "b'A Range Module is a module that tracks ranges of numbers. Design a data structure to track the ranges represented as half-open intervals and query about them.\\nA half-open interval [left, right) denotes all the real numbers x where left <= x < right.\\nImplement the RangeModule class:\\n\\nRangeModule() Initializes the object of the data structure.\\nvoid addRange(int left, int right) Adds the half-open interval [left, right), tracking every real number in that interval. Adding an interval that partially overlaps with currently tracked numbers should add any numbers in the interval [left, right) that are not already tracked.\\nboolean queryRange(int left, int right) Returns true if every real number in the interval [left, right) is currently being tracked, and false otherwise.\\nvoid removeRange(int left, int right) Stops tracking every real number currently being tracked in the half-open interval [left, right).\\n\\n\\xc2\\xa0\\nExample 1:\\nInput\\n[\"RangeModule\", \"addRange\", \"removeRange\", \"queryRange\", \"queryRange\", \"queryRange\"]\\n[[], [10, 20], [14, 16], [10, 14], [13, 15], [16, 17]]\\nOutput\\n[null, null, null, true, false, true]\\n\\nExplanation\\nRangeModule rangeModule = new RangeModule();\\nrangeModule.addRange(10, 20);\\nrangeModule.removeRange(14, 16);\\nrangeModule.queryRange(10, 14); // return True,(Every number in [10, 14) is being tracked)\\nrangeModule.queryRange(13, 15); // return False,(Numbers like 14, 14.03, 14.17 in [13, 15) are not being tracked)\\nrangeModule.queryRange(16, 17); // return True, (The number 16 in [16, 17) is still being tracked, despite the remove operation)\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= left < right <= 109\\nAt most 104 calls will be made to addRange, queryRange, and removeRange.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/max-stack",
        "Title": "Max Stack ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/1-bit-and-2-bit-characters",
        "Title": "1-bit and 2-bit Characters ",
        "Description": "b'We have two special characters:\\n\\nThe first character can be represented by one bit 0.\\nThe second character can be represented by two bits (10 or 11).\\n\\nGiven a binary array bits that ends with 0, return true if the last character must be a one-bit character.\\n\\xc2\\xa0\\nExample 1:\\nInput: bits = [1,0,0]\\nOutput: true\\nExplanation: The only way to decode it is two-bit character and one-bit character.\\nSo the last character is one-bit character.\\n\\nExample 2:\\nInput: bits = [1,1,1,0]\\nOutput: false\\nExplanation: The only way to decode it is two-bit character and two-bit character.\\nSo the last character is not one-bit character.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= bits.length <= 1000\\nbits[i] is either 0 or 1.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/maximum-length-of-repeated-subarray",
        "Title": "Maximum Length of Repeated Subarray ",
        "Description": "b'Given two integer arrays nums1 and nums2, return the maximum length of a subarray that appears in both arrays.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums1 = [1,2,3,2,1], nums2 = [3,2,1,4,7]\\nOutput: 3\\nExplanation: The repeated subarray with maximum length is [3,2,1].\\n\\nExample 2:\\nInput: nums1 = [0,0,0,0,0], nums2 = [0,0,0,0,0]\\nOutput: 5\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums1.length, nums2.length <= 1000\\n0 <= nums1[i], nums2[i] <= 100\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/find-k-th-smallest-pair-distance",
        "Title": "Find K-th Smallest Pair Distance ",
        "Description": "b'The distance of a pair of integers a and b is defined as the absolute difference between a and b.\\nGiven an integer array nums and an integer k, return the kth smallest distance among all the pairs nums[i] and nums[j] where 0 <= i < j < nums.length.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [1,3,1], k = 1\\nOutput: 0\\nExplanation: Here are all the pairs:\\n(1,3) -> 2\\n(1,1) -> 0\\n(3,1) -> 2\\nThen the 1st smallest distance pair is (1,1), and its distance is 0.\\n\\nExample 2:\\nInput: nums = [1,1,1], k = 2\\nOutput: 0\\n\\nExample 3:\\nInput: nums = [1,6,1], k = 3\\nOutput: 5\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nn == nums.length\\n2 <= n <= 104\\n0 <= nums[i] <= 106\\n1 <= k <= n * (n - 1) / 2\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/longest-word-in-dictionary",
        "Title": "Longest Word in Dictionary ",
        "Description": "b'Given an array of strings words representing an English Dictionary, return the longest word in words that can be built one character at a time by other words in words.\\nIf there is more than one possible answer, return the longest word with the smallest lexicographical order. If there is no answer, return the empty string.\\n\\xc2\\xa0\\nExample 1:\\nInput: words = [\"w\",\"wo\",\"wor\",\"worl\",\"world\"]\\nOutput: \"world\"\\nExplanation: The word \"world\" can be built one character at a time by \"w\", \"wo\", \"wor\", and \"worl\".\\n\\nExample 2:\\nInput: words = [\"a\",\"banana\",\"app\",\"appl\",\"ap\",\"apply\",\"apple\"]\\nOutput: \"apple\"\\nExplanation: Both \"apply\" and \"apple\" can be built from other words in the dictionary. However, \"apple\" is lexicographically smaller than \"apply\".\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= words.length <= 1000\\n1 <= words[i].length <= 30\\nwords[i] consists of lowercase English letters.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/accounts-merge",
        "Title": "Accounts Merge ",
        "Description": "b'Given a list of accounts where each element accounts[i] is a list of strings, where the first element accounts[i][0] is a name, and the rest of the elements are emails representing emails of the account.\\nNow, we would like to merge these accounts. Two accounts definitely belong to the same person if there is some common email to both accounts. Note that even if two accounts have the same name, they may belong to different people as people could have the same name. A person can have any number of accounts initially, but all of their accounts definitely have the same name.\\nAfter merging the accounts, return the accounts in the following format: the first element of each account is the name, and the rest of the elements are emails in sorted order. The accounts themselves can be returned in any order.\\n\\xc2\\xa0\\nExample 1:\\nInput: accounts = [[\"John\",\"johnsmith@mail.com\",\"john_newyork@mail.com\"],[\"John\",\"johnsmith@mail.com\",\"john00@mail.com\"],[\"Mary\",\"mary@mail.com\"],[\"John\",\"johnnybravo@mail.com\"]]\\nOutput: [[\"John\",\"john00@mail.com\",\"john_newyork@mail.com\",\"johnsmith@mail.com\"],[\"Mary\",\"mary@mail.com\"],[\"John\",\"johnnybravo@mail.com\"]]\\nExplanation:\\nThe first and second John\\'s are the same person as they have the common email \"johnsmith@mail.com\".\\nThe third John and Mary are different people as none of their email addresses are used by other accounts.\\nWe could return these lists in any order, for example the answer [[\\'Mary\\', \\'mary@mail.com\\'], [\\'John\\', \\'johnnybravo@mail.com\\'], \\n[\\'John\\', \\'john00@mail.com\\', \\'john_newyork@mail.com\\', \\'johnsmith@mail.com\\']] would still be accepted.\\n\\nExample 2:\\nInput: accounts = [[\"Gabe\",\"Gabe0@m.co\",\"Gabe3@m.co\",\"Gabe1@m.co\"],[\"Kevin\",\"Kevin3@m.co\",\"Kevin5@m.co\",\"Kevin0@m.co\"],[\"Ethan\",\"Ethan5@m.co\",\"Ethan4@m.co\",\"Ethan0@m.co\"],[\"Hanzo\",\"Hanzo3@m.co\",\"Hanzo1@m.co\",\"Hanzo0@m.co\"],[\"Fern\",\"Fern5@m.co\",\"Fern1@m.co\",\"Fern0@m.co\"]]\\nOutput: [[\"Ethan\",\"Ethan0@m.co\",\"Ethan4@m.co\",\"Ethan5@m.co\"],[\"Gabe\",\"Gabe0@m.co\",\"Gabe1@m.co\",\"Gabe3@m.co\"],[\"Hanzo\",\"Hanzo0@m.co\",\"Hanzo1@m.co\",\"Hanzo3@m.co\"],[\"Kevin\",\"Kevin0@m.co\",\"Kevin3@m.co\",\"Kevin5@m.co\"],[\"Fern\",\"Fern0@m.co\",\"Fern1@m.co\",\"Fern5@m.co\"]]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= accounts.length <= 1000\\n2 <= accounts[i].length <= 10\\n1 <= accounts[i][j].length <= 30\\naccounts[i][0] consists of English letters.\\naccounts[i][j] (for j > 0) is a valid email.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/remove-comments",
        "Title": "Remove Comments ",
        "Description": "b'Given a C++ program, remove comments from it. The program source is an array of strings source where source[i] is the ith line of the source code. This represents the result of splitting the original source code string by the newline character \\'\\\\n\\'.\\nIn C++, there are two types of comments, line comments, and block comments.\\n\\nThe string \"//\" denotes a line comment, which represents that it and the rest of the characters to the right of it in the same line should be ignored.\\nThe string \"/*\" denotes a block comment, which represents that all characters until the next (non-overlapping) occurrence of \"*/\" should be ignored. (Here, occurrences happen in reading order: line by line from left to right.) To be clear, the string \"/*/\" does not yet end the block comment, as the ending would be overlapping the beginning.\\n\\nThe first effective comment takes precedence over others.\\n\\nFor example, if the string \"//\" occurs in a block comment, it is ignored.\\nSimilarly, if the string \"/*\" occurs in a line or block comment, it is also ignored.\\n\\nIf a certain line of code is empty after removing comments, you must not output that line: each string in the answer list will be non-empty.\\nThere will be no control characters, single quote, or double quote characters.\\n\\nFor example, source = \"string s = \"/* Not a comment. */\";\" will not be a test case.\\n\\nAlso, nothing else such as defines or macros will interfere with the comments.\\nIt is guaranteed that every open block comment will eventually be closed, so \"/*\" outside of a line or block comment always starts a new comment.\\nFinally, implicit newline characters can be deleted by block comments. Please see the examples below for details.\\nAfter removing the comments from the source code, return the source code in the same format.\\n\\xc2\\xa0\\nExample 1:\\nInput: source = [\"/*Test program */\", \"int main()\", \"{ \", \"  // variable declaration \", \"int a, b, c;\", \"/* This is a test\", \"   multiline  \", \"   comment for \", \"   testing */\", \"a = b + c;\", \"}\"]\\nOutput: [\"int main()\",\"{ \",\"  \",\"int a, b, c;\",\"a = b + c;\",\"}\"]\\nExplanation: The line by line code is visualized as below:\\n/*Test program */\\nint main()\\n{ \\n  // variable declaration \\nint a, b, c;\\n/* This is a test\\n   multiline  \\n   comment for \\n   testing */\\na = b + c;\\n}\\nThe string /* denotes a block comment, including line 1 and lines 6-9. The string // denotes line 4 as comments.\\nThe line by line output code is visualized as below:\\nint main()\\n{ \\n  \\nint a, b, c;\\na = b + c;\\n}\\n\\nExample 2:\\nInput: source = [\"a/*comment\", \"line\", \"more_comment*/b\"]\\nOutput: [\"ab\"]\\nExplanation: The original source string is \"a/*comment\\\\nline\\\\nmore_comment*/b\", where we have bolded the newline characters.  After deletion, the implicit newline characters are deleted, leaving the string \"ab\", which when delimited by newline characters becomes [\"ab\"].\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= source.length <= 100\\n0 <= source[i].length <= 80\\nsource[i] consists of printable ASCII characters.\\nEvery open block comment is eventually closed.\\nThere are no single-quote or\\xc2\\xa0double-quote in the input.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/candy-crush",
        "Title": "Candy Crush ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/find-pivot-index",
        "Title": "Find Pivot Index ",
        "Description": "b\"Given an array of integers nums, calculate the pivot index of this array.\\nThe pivot index is the index where the sum of all the numbers strictly to the left of the index is equal to the sum of all the numbers strictly to the index's right.\\nIf the index is on the left edge of the array, then the left sum is 0 because there are no elements to the left. This also applies to the right edge of the array.\\nReturn the leftmost pivot index. If no such index exists, return -1.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [1,7,3,6,5,6]\\nOutput: 3\\nExplanation:\\nThe pivot index is 3.\\nLeft sum = nums[0] + nums[1] + nums[2] = 1 + 7 + 3 = 11\\nRight sum = nums[4] + nums[5] = 5 + 6 = 11\\n\\nExample 2:\\nInput: nums = [1,2,3]\\nOutput: -1\\nExplanation:\\nThere is no index that satisfies the conditions in the problem statement.\\nExample 3:\\nInput: nums = [2,1,-1]\\nOutput: 0\\nExplanation:\\nThe pivot index is 0.\\nLeft sum = 0 (no elements to the left of index 0)\\nRight sum = nums[1] + nums[2] = 1 + -1 = 0\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 104\\n-1000 <= nums[i] <= 1000\\n\\n\\xc2\\xa0\\nNote: This question is the same as\\xc2\\xa01991:\\xc2\\xa0https://leetcode.com/problems/find-the-middle-index-in-array/\\n\""
    },
    {
        "URL": "https://leetcode.com/problems/split-linked-list-in-parts",
        "Title": "Split Linked List in Parts ",
        "Description": "b'Given the head of a singly linked list and an integer k, split the linked list into k consecutive linked list parts.\\nThe length of each part should be as equal as possible: no two parts should have a size differing by more than one. This may lead to some parts being null.\\nThe parts should be in the order of occurrence in the input list, and parts occurring earlier should always have a size greater than or equal to parts occurring later.\\nReturn an array of the k parts.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: head = [1,2,3], k = 5\\nOutput: [[1],[2],[3],[],[]]\\nExplanation:\\nThe first element output[0] has output[0].val = 1, output[0].next = null.\\nThe last element output[4] is null, but its string representation as a ListNode is [].\\n\\nExample 2:\\n\\nInput: head = [1,2,3,4,5,6,7,8,9,10], k = 3\\nOutput: [[1,2,3,4],[5,6,7],[8,9,10]]\\nExplanation:\\nThe input has been split into consecutive parts with size difference at most 1, and earlier parts are a larger size than the later parts.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of nodes in the list is in the range [0, 1000].\\n0 <= Node.val <= 1000\\n1 <= k <= 50\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/number-of-atoms",
        "Title": "Number of Atoms ",
        "Description": "b'Given a string formula representing a chemical formula, return the count of each atom.\\nThe atomic element always starts with an uppercase character, then zero or more lowercase letters, representing the name.\\nOne or more digits representing that element\\'s count may follow if the count is greater than 1. If the count is 1, no digits will follow.\\n\\nFor example, \"H2O\" and \"H2O2\" are possible, but \"H1O2\" is impossible.\\n\\nTwo formulas are concatenated together to produce another formula.\\n\\nFor example, \"H2O2He3Mg4\" is also a formula.\\n\\nA formula placed in parentheses, and a count (optionally added) is also a formula.\\n\\nFor example, \"(H2O2)\" and \"(H2O2)3\" are formulas.\\n\\nReturn the count of all elements as a string in the following form: the first name (in sorted order), followed by its count (if that count is more than 1), followed by the second name (in sorted order), followed by its count (if that count is more than 1), and so on.\\nThe test cases are generated so that all the values in the output fit in a 32-bit integer.\\n\\xc2\\xa0\\nExample 1:\\nInput: formula = \"H2O\"\\nOutput: \"H2O\"\\nExplanation: The count of elements are {\\'H\\': 2, \\'O\\': 1}.\\n\\nExample 2:\\nInput: formula = \"Mg(OH)2\"\\nOutput: \"H2MgO2\"\\nExplanation: The count of elements are {\\'H\\': 2, \\'Mg\\': 1, \\'O\\': 2}.\\n\\nExample 3:\\nInput: formula = \"K4(ON(SO3)2)2\"\\nOutput: \"K4N2O14S4\"\\nExplanation: The count of elements are {\\'K\\': 4, \\'N\\': 2, \\'O\\': 14, \\'S\\': 4}.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= formula.length <= 1000\\nformula consists of English letters, digits, \\'(\\', and \\')\\'.\\nformula is always valid.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/minimum-window-subsequence",
        "Title": "Minimum Window Subsequence ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/self-dividing-numbers",
        "Title": "Self Dividing Numbers ",
        "Description": "b'A self-dividing number is a number that is divisible by every digit it contains.\\n\\nFor example, 128 is a self-dividing number because 128 % 1 == 0, 128 % 2 == 0, and 128 % 8 == 0.\\n\\nA self-dividing number is not allowed to contain the digit zero.\\nGiven two integers left and right, return a list of all the self-dividing numbers in the range [left, right].\\n\\xc2\\xa0\\nExample 1:\\nInput: left = 1, right = 22\\nOutput: [1,2,3,4,5,6,7,8,9,11,12,15,22]\\nExample 2:\\nInput: left = 47, right = 85\\nOutput: [48,55,66,77]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= left <= right <= 104\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/my-calendar-i",
        "Title": "My Calendar I ",
        "Description": "b'You are implementing a program to use as your calendar. We can add a new event if adding the event will not cause a double booking.\\nA double booking happens when two events have some non-empty intersection (i.e., some moment is common to both events.).\\nThe event can be represented as a pair of integers start and end that represents a booking on the half-open interval [start, end), the range of real numbers x such that start <= x < end.\\nImplement the MyCalendar class:\\n\\nMyCalendar() Initializes the calendar object.\\nboolean book(int start, int end) Returns true if the event can be added to the calendar successfully without causing a double booking. Otherwise, return false and do not add the event to the calendar.\\n\\n\\xc2\\xa0\\nExample 1:\\nInput\\n[\"MyCalendar\", \"book\", \"book\", \"book\"]\\n[[], [10, 20], [15, 25], [20, 30]]\\nOutput\\n[null, true, false, true]\\n\\nExplanation\\nMyCalendar myCalendar = new MyCalendar();\\nmyCalendar.book(10, 20); // return True\\nmyCalendar.book(15, 25); // return False, It can not be booked because time 15 is already booked by another event.\\nmyCalendar.book(20, 30); // return True, The event can be booked, as the first event takes every time less than 20, but not including 20.\\n\\xc2\\xa0\\nConstraints:\\n\\n0 <= start < end <= 109\\nAt most 1000 calls will be made to book.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/count-different-palindromic-subsequences",
        "Title": "Count Different Palindromic Subsequences ",
        "Description": "b'Given a string s, return the number of different non-empty palindromic subsequences in s. Since the answer may be very large, return it modulo 109 + 7.\\nA subsequence of a string is obtained by deleting zero or more characters from the string.\\nA sequence is palindromic if it is equal to the sequence reversed.\\nTwo sequences a1, a2, ... and b1, b2, ... are different if there is some i for which ai != bi.\\n\\xc2\\xa0\\nExample 1:\\nInput: s = \"bccb\"\\nOutput: 6\\nExplanation: The 6 different non-empty palindromic subsequences are \\'b\\', \\'c\\', \\'bb\\', \\'cc\\', \\'bcb\\', \\'bccb\\'.\\nNote that \\'bcb\\' is counted only once, even though it occurs twice.\\n\\nExample 2:\\nInput: s = \"abcdabcdabcdabcdabcdabcdabcdabcddcbadcbadcbadcbadcbadcbadcbadcba\"\\nOutput: 104860361\\nExplanation: There are 3104860382 different non-empty palindromic subsequences, which is 104860361 modulo 109 + 7.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= s.length <= 1000\\ns[i] is either \\'a\\', \\'b\\', \\'c\\', or \\'d\\'.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/my-calendar-ii",
        "Title": "My Calendar II ",
        "Description": "b'You are implementing a program to use as your calendar. We can add a new event if adding the event will not cause a triple booking.\\nA triple booking happens when three events have some non-empty intersection (i.e., some moment is common to all the three events.).\\nThe event can be represented as a pair of integers start and end that represents a booking on the half-open interval [start, end), the range of real numbers x such that start <= x < end.\\nImplement the MyCalendarTwo class:\\n\\nMyCalendarTwo() Initializes the calendar object.\\nboolean book(int start, int end) Returns true if the event can be added to the calendar successfully without causing a triple booking. Otherwise, return false and do not add the event to the calendar.\\n\\n\\xc2\\xa0\\nExample 1:\\nInput\\n[\"MyCalendarTwo\", \"book\", \"book\", \"book\", \"book\", \"book\", \"book\"]\\n[[], [10, 20], [50, 60], [10, 40], [5, 15], [5, 10], [25, 55]]\\nOutput\\n[null, true, true, true, false, true, true]\\n\\nExplanation\\nMyCalendarTwo myCalendarTwo = new MyCalendarTwo();\\nmyCalendarTwo.book(10, 20); // return True, The event can be booked. \\nmyCalendarTwo.book(50, 60); // return True, The event can be booked. \\nmyCalendarTwo.book(10, 40); // return True, The event can be double booked. \\nmyCalendarTwo.book(5, 15);  // return False, The event cannot be booked, because it would result in a triple booking.\\nmyCalendarTwo.book(5, 10); // return True, The event can be booked, as it does not use time 10 which is already double booked.\\nmyCalendarTwo.book(25, 55); // return True, The event can be booked, as the time in [25, 40) will be double booked with the third event, the time [40, 50) will be single booked, and the time [50, 55) will be double booked with the second event.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n0 <= start < end <= 109\\nAt most 1000 calls will be made to book.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/my-calendar-iii",
        "Title": "My Calendar III ",
        "Description": "b'A k-booking happens when k events have some non-empty intersection (i.e., there is some time that is common to all k events.)\\nYou are given some events [start, end), after each given event, return an integer k representing the maximum k-booking between all the previous events.\\nImplement the MyCalendarThree class:\\n\\nMyCalendarThree() Initializes the object.\\nint book(int start, int end) Returns an integer k representing the largest integer such that there exists a k-booking in the calendar.\\n\\n\\xc2\\xa0\\nExample 1:\\nInput\\n[\"MyCalendarThree\", \"book\", \"book\", \"book\", \"book\", \"book\", \"book\"]\\n[[], [10, 20], [50, 60], [10, 40], [5, 15], [5, 10], [25, 55]]\\nOutput\\n[null, 1, 1, 2, 3, 3, 3]\\n\\nExplanation\\nMyCalendarThree myCalendarThree = new MyCalendarThree();\\nmyCalendarThree.book(10, 20); // return 1, The first event can be booked and is disjoint, so the maximum k-booking is a 1-booking.\\nmyCalendarThree.book(50, 60); // return 1, The second event can be booked and is disjoint, so the maximum k-booking is a 1-booking.\\nmyCalendarThree.book(10, 40); // return 2, The third event [10, 40) intersects the first event, and the maximum k-booking is a 2-booking.\\nmyCalendarThree.book(5, 15); // return 3, The remaining events cause the maximum K-booking to be only a 3-booking.\\nmyCalendarThree.book(5, 10); // return 3\\nmyCalendarThree.book(25, 55); // return 3\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n0 <= start < end <= 109\\nAt most 400 calls will be made to book.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/flood-fill",
        "Title": "Flood Fill ",
        "Description": "b'An image is represented by an m x n integer grid image where image[i][j] represents the pixel value of the image.\\nYou are also given three integers sr, sc, and color. You should perform a flood fill on the image starting from the pixel image[sr][sc].\\nTo perform a flood fill, consider the starting pixel, plus any pixels connected 4-directionally to the starting pixel of the same color as the starting pixel, plus any pixels connected 4-directionally to those pixels (also with the same color), and so on. Replace the color of all of the aforementioned pixels with color.\\nReturn the modified image after performing the flood fill.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: image = [[1,1,1],[1,1,0],[1,0,1]], sr = 1, sc = 1, color = 2\\nOutput: [[2,2,2],[2,2,0],[2,0,1]]\\nExplanation: From the center of the image with position (sr, sc) = (1, 1) (i.e., the red pixel), all pixels connected by a path of the same color as the starting pixel (i.e., the blue pixels) are colored with the new color.\\nNote the bottom corner is not colored 2, because it is not 4-directionally connected to the starting pixel.\\n\\nExample 2:\\nInput: image = [[0,0,0],[0,0,0]], sr = 0, sc = 0, color = 0\\nOutput: [[0,0,0],[0,0,0]]\\nExplanation: The starting pixel is already colored 0, so no changes are made to the image.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nm == image.length\\nn == image[i].length\\n1 <= m, n <= 50\\n0 <= image[i][j], color < 216\\n0 <= sr < m\\n0 <= sc < n\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/sentence-similarity",
        "Title": "Sentence Similarity ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/asteroid-collision",
        "Title": "Asteroid Collision ",
        "Description": "b'We are given an array asteroids of integers representing asteroids in a row.\\nFor each asteroid, the absolute value represents its size, and the sign represents its direction (positive meaning right, negative meaning left). Each asteroid moves at the same speed.\\nFind out the state of the asteroids after all collisions. If two asteroids meet, the smaller one will explode. If both are the same size, both will explode. Two asteroids moving in the same direction will never meet.\\n\\xc2\\xa0\\nExample 1:\\nInput: asteroids = [5,10,-5]\\nOutput: [5,10]\\nExplanation: The 10 and -5 collide resulting in 10. The 5 and 10 never collide.\\n\\nExample 2:\\nInput: asteroids = [8,-8]\\nOutput: []\\nExplanation: The 8 and -8 collide exploding each other.\\n\\nExample 3:\\nInput: asteroids = [10,2,-5]\\nOutput: [10]\\nExplanation: The 2 and -5 collide resulting in -5. The 10 and -5 collide resulting in 10.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n2 <= asteroids.length <= 104\\n-1000 <= asteroids[i] <= 1000\\nasteroids[i] != 0\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/parse-lisp-expression",
        "Title": "Parse Lisp Expression ",
        "Description": "b'You are given a string expression representing a Lisp-like expression to return the integer value of.\\nThe syntax for these expressions is given as follows.\\n\\nAn expression is either an integer, let expression, add expression, mult expression, or an assigned variable. Expressions always evaluate to a single integer.\\n(An integer could be positive or negative.)\\nA let expression takes the form \"(let v1 e1 v2 e2 ... vn en expr)\", where let is always the string \"let\", then there are one or more pairs of alternating variables and expressions, meaning that the first variable v1 is assigned the value of the expression e1, the second variable v2 is assigned the value of the expression e2, and so on sequentially; and then the value of this let expression is the value of the expression expr.\\nAn add expression takes the form \"(add e1 e2)\" where add is always the string \"add\", there are always two expressions e1, e2 and the result is the addition of the evaluation of e1 and the evaluation of e2.\\nA mult expression takes the form \"(mult e1 e2)\" where mult is always the string \"mult\", there are always two expressions e1, e2 and the result is the multiplication of the evaluation of e1 and the evaluation of e2.\\nFor this question, we will use a smaller subset of variable names. A variable starts with a lowercase letter, then zero or more lowercase letters or digits. Additionally, for your convenience, the names \"add\", \"let\", and \"mult\" are protected and will never be used as variable names.\\nFinally, there is the concept of scope. When an expression of a variable name is evaluated, within the context of that evaluation, the innermost scope (in terms of parentheses) is checked first for the value of that variable, and then outer scopes are checked sequentially. It is guaranteed that every expression is legal. Please see the examples for more details on the scope.\\n\\n\\xc2\\xa0\\nExample 1:\\nInput: expression = \"(let x 2 (mult x (let x 3 y 4 (add x y))))\"\\nOutput: 14\\nExplanation: In the expression (add x y), when checking for the value of the variable x,\\nwe check from the innermost scope to the outermost in the context of the variable we are trying to evaluate.\\nSince x = 3 is found first, the value of x is 3.\\n\\nExample 2:\\nInput: expression = \"(let x 3 x 2 x)\"\\nOutput: 2\\nExplanation: Assignment in let statements is processed sequentially.\\n\\nExample 3:\\nInput: expression = \"(let x 1 y 2 x (add x y) (add x y))\"\\nOutput: 5\\nExplanation: The first (add x y) evaluates as 3, and is assigned to x.\\nThe second (add x y) evaluates as 3+2 = 5.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= expression.length <= 2000\\nThere are no leading or trailing spaces in expression.\\nAll tokens are separated by a single space in expression.\\nThe answer and all intermediate calculations of that answer are guaranteed to fit in a 32-bit integer.\\nThe expression is guaranteed to be legal and evaluate to an integer.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/sentence-similarity-ii",
        "Title": "Sentence Similarity II ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/monotone-increasing-digits",
        "Title": "Monotone Increasing Digits ",
        "Description": "b'An integer has monotone increasing digits if and only if each pair of adjacent digits x and y satisfy x <= y.\\nGiven an integer n, return the largest number that is less than or equal to n with monotone increasing digits.\\n\\xc2\\xa0\\nExample 1:\\nInput: n = 10\\nOutput: 9\\n\\nExample 2:\\nInput: n = 1234\\nOutput: 1234\\n\\nExample 3:\\nInput: n = 332\\nOutput: 299\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n0 <= n <= 109\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/daily-temperatures",
        "Title": "Daily Temperatures ",
        "Description": "b'Given an array of integers temperatures represents the daily temperatures, return an array answer such that answer[i] is the number of days you have to wait after the ith day to get a warmer temperature. If there is no future day for which this is possible, keep answer[i] == 0 instead.\\n\\xc2\\xa0\\nExample 1:\\nInput: temperatures = [73,74,75,71,69,72,76,73]\\nOutput: [1,1,4,2,1,1,0,0]\\nExample 2:\\nInput: temperatures = [30,40,50,60]\\nOutput: [1,1,1,0]\\nExample 3:\\nInput: temperatures = [30,60,90]\\nOutput: [1,1,0]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <=\\xc2\\xa0temperatures.length <= 105\\n30 <=\\xc2\\xa0temperatures[i] <= 100\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/delete-and-earn",
        "Title": "Delete and Earn ",
        "Description": "b\"You are given an integer array nums. You want to maximize the number of points you get by performing the following operation any number of times:\\n\\nPick any nums[i] and delete it to earn nums[i] points. Afterwards, you must delete every element equal to nums[i] - 1 and every element equal to nums[i] + 1.\\n\\nReturn the maximum number of points you can earn by applying the above operation some number of times.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [3,4,2]\\nOutput: 6\\nExplanation: You can perform the following operations:\\n- Delete 4 to earn 4 points. Consequently, 3 is also deleted. nums = [2].\\n- Delete 2 to earn 2 points. nums = [].\\nYou earn a total of 6 points.\\n\\nExample 2:\\nInput: nums = [2,2,3,3,3,4]\\nOutput: 9\\nExplanation: You can perform the following operations:\\n- Delete a 3 to earn 3 points. All 2's and 4's are also deleted. nums = [3,3].\\n- Delete a 3 again to earn 3 points. nums = [3].\\n- Delete a 3 once more to earn 3 points. nums = [].\\nYou earn a total of 9 points.\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 2 * 104\\n1 <= nums[i] <= 104\\n\\n\""
    },
    {
        "URL": "https://leetcode.com/problems/cherry-pickup",
        "Title": "Cherry Pickup ",
        "Description": "b'You are given an n x n grid representing a field of cherries, each cell is one of three possible integers.\\n\\n0 means the cell is empty, so you can pass through,\\n1 means the cell contains a cherry that you can pick up and pass through, or\\n-1 means the cell contains a thorn that blocks your way.\\n\\nReturn the maximum number of cherries you can collect by following the rules below:\\n\\nStarting at the position (0, 0) and reaching (n - 1, n - 1) by moving right or down through valid path cells (cells with value 0 or 1).\\nAfter reaching (n - 1, n - 1), returning to (0, 0) by moving left or up through valid path cells.\\nWhen passing through a path cell containing a cherry, you pick it up, and the cell becomes an empty cell 0.\\nIf there is no valid path between (0, 0) and (n - 1, n - 1), then no cherries can be collected.\\n\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: grid = [[0,1,-1],[1,0,-1],[1,1,1]]\\nOutput: 5\\nExplanation: The player started at (0, 0) and went down, down, right right to reach (2, 2).\\n4 cherries were picked up during this single trip, and the matrix becomes [[0,1,-1],[0,0,-1],[0,0,0]].\\nThen, the player went left, up, up, left to return home, picking up one more cherry.\\nThe total number of cherries picked up is 5, and this is the maximum possible.\\n\\nExample 2:\\nInput: grid = [[1,1,-1],[1,-1,1],[-1,1,1]]\\nOutput: 0\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nn == grid.length\\nn == grid[i].length\\n1 <= n <= 50\\ngrid[i][j] is -1, 0, or 1.\\ngrid[0][0] != -1\\ngrid[n - 1][n - 1] != -1\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/closest-leaf-in-a-binary-tree",
        "Title": "Closest Leaf in a Binary Tree ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/network-delay-time",
        "Title": "Network Delay Time ",
        "Description": "b'You are given a network of n nodes, labeled from 1 to n. You are also given times, a list of travel times as directed edges times[i] = (ui, vi, wi), where ui is the source node, vi is the target node, and wi is the time it takes for a signal to travel from source to target.\\nWe will send a signal from a given node k. Return the minimum time it takes for all the n nodes to receive the signal. If it is impossible for all the n nodes to receive the signal, return -1.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: times = [[2,1,1],[2,3,1],[3,4,1]], n = 4, k = 2\\nOutput: 2\\n\\nExample 2:\\nInput: times = [[1,2,1]], n = 2, k = 1\\nOutput: 1\\n\\nExample 3:\\nInput: times = [[1,2,1]], n = 2, k = 2\\nOutput: -1\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= k <= n <= 100\\n1 <= times.length <= 6000\\ntimes[i].length == 3\\n1 <= ui, vi <= n\\nui != vi\\n0 <= wi <= 100\\nAll the pairs (ui, vi) are unique. (i.e., no multiple edges.)\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/find-smallest-letter-greater-than-target",
        "Title": "Find Smallest Letter Greater Than Target ",
        "Description": "b'Given a characters array letters that is sorted in non-decreasing order and a character target, return the smallest character in the array that is larger than target.\\nNote that the letters wrap around.\\n\\nFor example, if target == \\'z\\' and letters == [\\'a\\', \\'b\\'], the answer is \\'a\\'.\\n\\n\\xc2\\xa0\\nExample 1:\\nInput: letters = [\"c\",\"f\",\"j\"], target = \"a\"\\nOutput: \"c\"\\n\\nExample 2:\\nInput: letters = [\"c\",\"f\",\"j\"], target = \"c\"\\nOutput: \"f\"\\n\\nExample 3:\\nInput: letters = [\"c\",\"f\",\"j\"], target = \"d\"\\nOutput: \"f\"\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n2 <= letters.length <= 104\\nletters[i] is a lowercase English letter.\\nletters is sorted in non-decreasing order.\\nletters contains at least two different characters.\\ntarget is a lowercase English letter.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/prefix-and-suffix-search",
        "Title": "Prefix and Suffix Search ",
        "Description": "b'Design a special dictionary that searches the words in it by a prefix and a suffix.\\nImplement the WordFilter class:\\n\\nWordFilter(string[] words) Initializes the object with the words in the dictionary.\\nf(string pref, string suff) Returns the index of the word in the dictionary, which has the prefix pref and the suffix suff. If there is more than one valid index, return the largest of them. If there is no such word in the dictionary, return -1.\\n\\n\\xc2\\xa0\\nExample 1:\\nInput\\n[\"WordFilter\", \"f\"]\\n[[[\"apple\"]], [\"a\", \"e\"]]\\nOutput\\n[null, 0]\\nExplanation\\nWordFilter wordFilter = new WordFilter([\"apple\"]);\\nwordFilter.f(\"a\", \"e\"); // return 0, because the word at index 0 has prefix = \"a\" and suffix = \"e\".\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= words.length <= 104\\n1 <= words[i].length <= 7\\n1 <= pref.length, suff.length <= 7\\nwords[i], pref and suff consist of lowercase English letters only.\\nAt most 104 calls will be made to the function f.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/min-cost-climbing-stairs",
        "Title": "Min Cost Climbing Stairs ",
        "Description": "b'You are given an integer array cost where cost[i] is the cost of ith step on a staircase. Once you pay the cost, you can either climb one or two steps.\\nYou can either start from the step with index 0, or the step with index 1.\\nReturn the minimum cost to reach the top of the floor.\\n\\xc2\\xa0\\nExample 1:\\nInput: cost = [10,15,20]\\nOutput: 15\\nExplanation: You will start at index 1.\\n- Pay 15 and climb two steps to reach the top.\\nThe total cost is 15.\\n\\nExample 2:\\nInput: cost = [1,100,1,1,1,100,1,1,100,1]\\nOutput: 6\\nExplanation: You will start at index 0.\\n- Pay 1 and climb two steps to reach index 2.\\n- Pay 1 and climb two steps to reach index 4.\\n- Pay 1 and climb two steps to reach index 6.\\n- Pay 1 and climb one step to reach index 7.\\n- Pay 1 and climb two steps to reach index 9.\\n- Pay 1 and climb one step to reach the top.\\nThe total cost is 6.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n2 <= cost.length <= 1000\\n0 <= cost[i] <= 999\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/largest-number-at-least-twice-of-others",
        "Title": "Largest Number At Least Twice of Others ",
        "Description": "b'You are given an integer array nums where the largest integer is unique.\\nDetermine whether the largest element in the array is at least twice as much as every other number in the array. If it is, return the index of the largest element, or return -1 otherwise.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [3,6,1,0]\\nOutput: 1\\nExplanation: 6 is the largest integer.\\nFor every other number in the array x, 6 is at least twice as big as x.\\nThe index of value 6 is 1, so we return 1.\\n\\nExample 2:\\nInput: nums = [1,2,3,4]\\nOutput: -1\\nExplanation: 4 is less than twice the value of 3, so we return -1.\\nExample 3:\\nInput: nums = [1]\\nOutput: 0\\nExplanation: 1 is trivially at least twice the value as any other number because there are no other numbers.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 50\\n0 <= nums[i] <= 100\\nThe largest element in nums is unique.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/shortest-completing-word",
        "Title": "Shortest Completing Word ",
        "Description": "b'Given a string licensePlate and an array of strings words, find the shortest completing word in words.\\nA completing word is a word that contains all the letters in licensePlate. Ignore numbers and spaces in licensePlate, and treat letters as case insensitive. If a letter appears more than once in licensePlate, then it must appear in the word the same number of times or more.\\nFor example, if licensePlate = \"aBc 12c\", then it contains letters \\'a\\', \\'b\\' (ignoring case), and \\'c\\' twice. Possible completing words are \"abccdef\", \"caaacab\", and \"cbca\".\\nReturn the shortest completing word in words. It is guaranteed an answer exists. If there are multiple shortest completing words, return the first one that occurs in words.\\n\\xc2\\xa0\\nExample 1:\\nInput: licensePlate = \"1s3 PSt\", words = [\"step\",\"steps\",\"stripe\",\"stepple\"]\\nOutput: \"steps\"\\nExplanation: licensePlate contains letters \\'s\\', \\'p\\', \\'s\\' (ignoring case), and \\'t\\'.\\n\"step\" contains \\'t\\' and \\'p\\', but only contains 1 \\'s\\'.\\n\"steps\" contains \\'t\\', \\'p\\', and both \\'s\\' characters.\\n\"stripe\" is missing an \\'s\\'.\\n\"stepple\" is missing an \\'s\\'.\\nSince \"steps\" is the only word containing all the letters, that is the answer.\\n\\nExample 2:\\nInput: licensePlate = \"1s3 456\", words = [\"looks\",\"pest\",\"stew\",\"show\"]\\nOutput: \"pest\"\\nExplanation: licensePlate only contains the letter \\'s\\'. All the words contain \\'s\\', but among these \"pest\", \"stew\", and \"show\" are shortest. The answer is \"pest\" because it is the word that appears earliest of the 3.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= licensePlate.length <= 7\\nlicensePlate contains digits, letters (uppercase or lowercase), or space \\' \\'.\\n1 <= words.length <= 1000\\n1 <= words[i].length <= 15\\nwords[i] consists of lower case English letters.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/contain-virus",
        "Title": "Contain Virus ",
        "Description": "b'A virus is spreading rapidly, and your task is to quarantine the infected area by installing walls.\\nThe world is modeled as an m x n binary grid isInfected, where isInfected[i][j] == 0 represents uninfected cells, and isInfected[i][j] == 1 represents cells contaminated with the virus. A wall (and only one wall) can be installed between any two 4-directionally adjacent cells, on the shared boundary.\\nEvery night, the virus spreads to all neighboring cells in all four directions unless blocked by a wall. Resources are limited. Each day, you can install walls around only one region (i.e., the affected area (continuous block of infected cells) that threatens the most uninfected cells the following night). There will never be a tie.\\nReturn the number of walls used to quarantine all the infected regions. If the world will become fully infected, return the number of walls used.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: isInfected = [[0,1,0,0,0,0,0,1],[0,1,0,0,0,0,0,1],[0,0,0,0,0,0,0,1],[0,0,0,0,0,0,0,0]]\\nOutput: 10\\nExplanation: There are 2 contaminated regions.\\nOn the first day, add 5 walls to quarantine the viral region on the left. The board after the virus spreads is:\\n\\nOn the second day, add 5 walls to quarantine the viral region on the right. The virus is fully contained.\\n\\n\\nExample 2:\\n\\nInput: isInfected = [[1,1,1],[1,0,1],[1,1,1]]\\nOutput: 4\\nExplanation: Even though there is only one cell saved, there are 4 walls built.\\nNotice that walls are only built on the shared boundary of two different cells.\\n\\nExample 3:\\nInput: isInfected = [[1,1,1,0,0,0,0,0,0],[1,0,1,0,1,1,1,1,1],[1,1,1,0,0,0,0,0,0]]\\nOutput: 13\\nExplanation: The region on the left only builds two new walls.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nm ==\\xc2\\xa0isInfected.length\\nn ==\\xc2\\xa0isInfected[i].length\\n1 <= m, n <= 50\\nisInfected[i][j] is either 0 or 1.\\nThere is always a contiguous viral region throughout the described process that will infect strictly more uncontaminated squares in the next round.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/number-of-corner-rectangles",
        "Title": "Number Of Corner Rectangles ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/ip-to-cidr",
        "Title": "IP to CIDR ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/open-the-lock",
        "Title": "Open the Lock ",
        "Description": "b'You have a lock in front of you with 4 circular wheels. Each wheel has 10 slots: \\'0\\', \\'1\\', \\'2\\', \\'3\\', \\'4\\', \\'5\\', \\'6\\', \\'7\\', \\'8\\', \\'9\\'. The wheels can rotate freely and wrap around: for example we can turn \\'9\\' to be \\'0\\', or \\'0\\' to be \\'9\\'. Each move consists of turning one wheel one slot.\\nThe lock initially starts at \\'0000\\', a string representing the state of the 4 wheels.\\nYou are given a list of deadends dead ends, meaning if the lock displays any of these codes, the wheels of the lock will stop turning and you will be unable to open it.\\nGiven a target representing the value of the wheels that will unlock the lock, return the minimum total number of turns required to open the lock, or -1 if it is impossible.\\n\\xc2\\xa0\\nExample 1:\\nInput: deadends = [\"0201\",\"0101\",\"0102\",\"1212\",\"2002\"], target = \"0202\"\\nOutput: 6\\nExplanation: \\nA sequence of valid moves would be \"0000\" -> \"1000\" -> \"1100\" -> \"1200\" -> \"1201\" -> \"1202\" -> \"0202\".\\nNote that a sequence like \"0000\" -> \"0001\" -> \"0002\" -> \"0102\" -> \"0202\" would be invalid,\\nbecause the wheels of the lock become stuck after the display becomes the dead end \"0102\".\\n\\nExample 2:\\nInput: deadends = [\"8888\"], target = \"0009\"\\nOutput: 1\\nExplanation: We can turn the last wheel in reverse to move from \"0000\" -> \"0009\".\\n\\nExample 3:\\nInput: deadends = [\"8887\",\"8889\",\"8878\",\"8898\",\"8788\",\"8988\",\"7888\",\"9888\"], target = \"8888\"\\nOutput: -1\\nExplanation: We cannot reach the target without getting stuck.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= deadends.length <= 500\\ndeadends[i].length == 4\\ntarget.length == 4\\ntarget will not be in the list deadends.\\ntarget and deadends[i] consist of digits only.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/cracking-the-safe",
        "Title": "Cracking the Safe ",
        "Description": "b'There is a safe protected by a password. The password is a sequence of n digits where each digit can be in the range [0, k - 1].\\nThe safe has a peculiar way of checking the password. When you enter in a sequence, it checks the most recent n digits that were entered each time you type a digit.\\n\\nFor example, the correct password is \"345\" and you enter in \"012345\":\\n\\n\\t\\nAfter typing 0, the most recent 3 digits is \"0\", which is incorrect.\\nAfter typing 1, the most recent 3 digits is \"01\", which is incorrect.\\nAfter typing 2, the most recent 3 digits is \"012\", which is incorrect.\\nAfter typing 3, the most recent 3 digits is \"123\", which is incorrect.\\nAfter typing 4, the most recent 3 digits is \"234\", which is incorrect.\\nAfter typing 5, the most recent 3 digits is \"345\", which is correct and the safe unlocks.\\n\\n\\n\\nReturn any string of minimum length that will unlock the safe at some point of entering it.\\n\\xc2\\xa0\\nExample 1:\\nInput: n = 1, k = 2\\nOutput: \"10\"\\nExplanation: The password is a single digit, so enter each digit. \"01\" would also unlock the safe.\\n\\nExample 2:\\nInput: n = 2, k = 2\\nOutput: \"01100\"\\nExplanation: For each possible password:\\n- \"00\" is typed in starting from the 4th digit.\\n- \"01\" is typed in starting from the 1st digit.\\n- \"10\" is typed in starting from the 3rd digit.\\n- \"11\" is typed in starting from the 2nd digit.\\nThus \"01100\" will unlock the safe. \"01100\", \"10011\", and \"11001\" would also unlock the safe.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= n <= 4\\n1 <= k <= 10\\n1 <= kn <= 4096\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/reach-a-number",
        "Title": "Reach a Number ",
        "Description": "b'You are standing at position 0 on an infinite number line. There is a destination at position target.\\nYou can make some number of moves numMoves so that:\\n\\nOn each move, you can either go left or right.\\nDuring the ith move (starting from i == 1 to i == numMoves), you take i steps in the chosen direction.\\n\\nGiven the integer target, return the minimum number of moves required (i.e., the minimum numMoves) to reach the destination.\\n\\xc2\\xa0\\nExample 1:\\nInput: target = 2\\nOutput: 3\\nExplanation:\\nOn the 1st move, we step from 0 to 1 (1 step).\\nOn the 2nd move, we step from 1 to -1 (2 steps).\\nOn the 3rd move, we step from -1 to 2 (3 steps).\\n\\nExample 2:\\nInput: target = 3\\nOutput: 2\\nExplanation:\\nOn the 1st move, we step from 0 to 1 (1 step).\\nOn the 2nd move, we step from 1 to 3 (2 steps).\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n-109 <= target <= 109\\ntarget != 0\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/pour-water",
        "Title": "Pour Water ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/pyramid-transition-matrix",
        "Title": "Pyramid Transition Matrix ",
        "Description": "b'You are stacking blocks to form a pyramid. Each block has a color, which is represented by a single letter. Each row of blocks contains one less block than the row beneath it and is centered on top.\\nTo make the pyramid aesthetically pleasing, there are only specific triangular patterns that are allowed. A triangular pattern consists of a single block stacked on top of two blocks. The patterns are given\\xc2\\xa0as a list of\\xc2\\xa0three-letter strings allowed, where the first two characters of a pattern represent the left and right bottom blocks respectively, and the third character is the top block.\\n\\nFor example, \"ABC\" represents a triangular pattern with a \\'C\\' block stacked on top of an \\'A\\' (left) and \\'B\\' (right) block. Note that this is different from \"BAC\" where \\'B\\' is on the left bottom and \\'A\\' is on the right bottom.\\n\\nYou start with a bottom row of blocks bottom, given as a single string, that you must use as the base of the pyramid.\\nGiven bottom and allowed, return true if you can build the pyramid all the way to the top such that every triangular pattern in the pyramid is in allowed, or false otherwise.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: bottom = \"BCD\", allowed = [\"BCC\",\"CDE\",\"CEA\",\"FFF\"]\\nOutput: true\\nExplanation: The allowed triangular patterns are shown on the right.\\nStarting from the bottom (level 3), we can build \"CE\" on level 2 and then build \"A\" on level 1.\\nThere are three triangular patterns in the pyramid, which are \"BCC\", \"CDE\", and \"CEA\". All are allowed.\\n\\nExample 2:\\n\\nInput: bottom = \"AAAA\", allowed = [\"AAB\",\"AAC\",\"BCD\",\"BBE\",\"DEF\"]\\nOutput: false\\nExplanation: The allowed triangular patterns are shown on the right.\\nStarting from the bottom (level 4), there are multiple ways to build level 3, but trying all the possibilites, you will get always stuck before building level 1.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n2 <= bottom.length <= 6\\n0 <= allowed.length <= 216\\nallowed[i].length == 3\\nThe letters in all input strings are from the set {\\'A\\', \\'B\\', \\'C\\', \\'D\\', \\'E\\', \\'F\\'}.\\nAll the values of allowed are unique.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/set-intersection-size-at-least-two",
        "Title": "Set Intersection Size At Least Two ",
        "Description": "b\"An integer interval [a, b] (for integers a < b) is a set of all consecutive integers from a to b, including a and b.\\nFind the minimum size of a set S such that for every integer interval A in intervals, the intersection of S with A has a size of at least two.\\n\\xc2\\xa0\\nExample 1:\\nInput: intervals = [[1,3],[1,4],[2,5],[3,5]]\\nOutput: 3\\nExplanation: Consider the set S = {2, 3, 4}.  For each interval, there are at least 2 elements from S in the interval.\\nAlso, there isn't a smaller size set that fulfills the above condition.\\nThus, we output the size of this set, which is 3.\\n\\nExample 2:\\nInput: intervals = [[1,2],[2,3],[2,4],[4,5]]\\nOutput: 5\\nExplanation: An example of a minimum sized set is {1, 2, 3, 4, 5}.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= intervals.length <= 3000\\nintervals[i].length == 2\\n0 <= ai <\\xc2\\xa0bi <= 108\\n\\n\""
    },
    {
        "URL": "https://leetcode.com/problems/bold-words-in-string",
        "Title": "Bold Words in String ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/employee-free-time",
        "Title": "Employee Free Time ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/find-anagram-mappings",
        "Title": "Find Anagram Mappings ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/special-binary-string",
        "Title": "Special Binary String ",
        "Description": "b'Special binary strings are binary strings with the following two properties:\\n\\nThe number of 0\\'s is equal to the number of 1\\'s.\\nEvery prefix of the binary string has at least as many 1\\'s as 0\\'s.\\n\\nYou are given a special binary string s.\\nA move consists of choosing two consecutive, non-empty, special substrings of s, and swapping them. Two strings are consecutive if the last character of the first string is exactly one index before the first character of the second string.\\nReturn the lexicographically largest resulting string possible after applying the mentioned operations on the string.\\n\\xc2\\xa0\\nExample 1:\\nInput: s = \"11011000\"\\nOutput: \"11100100\"\\nExplanation: The strings \"10\" [occuring at s[1]] and \"1100\" [at s[3]] are swapped.\\nThis is the lexicographically largest string possible after some number of swaps.\\n\\nExample 2:\\nInput: s = \"10\"\\nOutput: \"10\"\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= s.length <= 50\\ns[i] is either \\'0\\' or \\'1\\'.\\ns is a special binary string.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/prime-number-of-set-bits-in-binary-representation",
        "Title": "Prime Number of Set Bits in Binary Representation ",
        "Description": "b\"Given two integers left and right, return the count of numbers in the inclusive range [left, right] having a prime number of set bits in their binary representation.\\nRecall that the number of set bits an integer has is the number of 1's present when written in binary.\\n\\nFor example, 21 written in binary is 10101, which has 3 set bits.\\n\\n\\xc2\\xa0\\nExample 1:\\nInput: left = 6, right = 10\\nOutput: 4\\nExplanation:\\n6  -> 110 (2 set bits, 2 is prime)\\n7  -> 111 (3 set bits, 3 is prime)\\n8  -> 1000 (1 set bit, 1 is not prime)\\n9  -> 1001 (2 set bits, 2 is prime)\\n10 -> 1010 (2 set bits, 2 is prime)\\n4 numbers have a prime number of set bits.\\n\\nExample 2:\\nInput: left = 10, right = 15\\nOutput: 5\\nExplanation:\\n10 -> 1010 (2 set bits, 2 is prime)\\n11 -> 1011 (3 set bits, 3 is prime)\\n12 -> 1100 (2 set bits, 2 is prime)\\n13 -> 1101 (3 set bits, 3 is prime)\\n14 -> 1110 (3 set bits, 3 is prime)\\n15 -> 1111 (4 set bits, 4 is not prime)\\n5 numbers have a prime number of set bits.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= left <= right <= 106\\n0 <= right - left <= 104\\n\\n\""
    },
    {
        "URL": "https://leetcode.com/problems/partition-labels",
        "Title": "Partition Labels ",
        "Description": "b'You are given a string s. We want to partition the string into as many parts as possible so that each letter appears in at most one part.\\nNote that the partition is done so that after concatenating all the parts in order, the resultant string should be s.\\nReturn a list of integers representing the size of these parts.\\n\\xc2\\xa0\\nExample 1:\\nInput: s = \"ababcbacadefegdehijhklij\"\\nOutput: [9,7,8]\\nExplanation:\\nThe partition is \"ababcbaca\", \"defegde\", \"hijhklij\".\\nThis is a partition so that each letter appears in at most one part.\\nA partition like \"ababcbacadefegde\", \"hijhklij\" is incorrect, because it splits s into less parts.\\n\\nExample 2:\\nInput: s = \"eccbbbbdec\"\\nOutput: [10]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= s.length <= 500\\ns consists of lowercase English letters.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/largest-plus-sign",
        "Title": "Largest Plus Sign ",
        "Description": "b\"You are given an integer n. You have an n x n binary grid grid with all values initially 1's except for some indices given in the array mines. The ith element of the array mines is defined as mines[i] = [xi, yi] where grid[xi][yi] == 0.\\nReturn the order of the largest axis-aligned plus sign of 1's contained in grid. If there is none, return 0.\\nAn axis-aligned plus sign of 1's of order k has some center grid[r][c] == 1 along with four arms of length k - 1 going up, down, left, and right, and made of 1's. Note that there could be 0's or 1's beyond the arms of the plus sign, only the relevant area of the plus sign is checked for 1's.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: n = 5, mines = [[4,2]]\\nOutput: 2\\nExplanation: In the above grid, the largest plus sign can only be of order 2. One of them is shown.\\n\\nExample 2:\\n\\nInput: n = 1, mines = [[0,0]]\\nOutput: 0\\nExplanation: There is no plus sign, so return 0.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= n <= 500\\n1 <= mines.length <= 5000\\n0 <= xi, yi < n\\nAll the pairs (xi, yi) are unique.\\n\\n\""
    },
    {
        "URL": "https://leetcode.com/problems/couples-holding-hands",
        "Title": "Couples Holding Hands ",
        "Description": "b'There are n couples sitting in 2n seats arranged in a row and want to hold hands.\\nThe people and seats are represented by an integer array row where row[i] is the ID of the person sitting in the ith seat. The couples are numbered in order, the first couple being (0, 1), the second couple being (2, 3), and so on with the last couple being (2n - 2, 2n - 1).\\nReturn the minimum number of swaps so that every couple is sitting side by side. A swap consists of choosing any two people, then they stand up and switch seats.\\n\\xc2\\xa0\\nExample 1:\\nInput: row = [0,2,1,3]\\nOutput: 1\\nExplanation: We only need to swap the second (row[1]) and third (row[2]) person.\\n\\nExample 2:\\nInput: row = [3,2,0,1]\\nOutput: 0\\nExplanation: All couples are already seated side by side.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n2n == row.length\\n2 <= n <= 30\\nn is even.\\n0 <= row[i] < 2n\\nAll the elements of row are unique.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/toeplitz-matrix",
        "Title": "Toeplitz Matrix ",
        "Description": "b'Given an m x n matrix, return\\xc2\\xa0true\\xc2\\xa0if the matrix is Toeplitz. Otherwise, return false.\\nA matrix is Toeplitz if every diagonal from top-left to bottom-right has the same elements.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: matrix = [[1,2,3,4],[5,1,2,3],[9,5,1,2]]\\nOutput: true\\nExplanation:\\nIn the above grid, the\\xc2\\xa0diagonals are:\\n\"[9]\", \"[5, 5]\", \"[1, 1, 1]\", \"[2, 2, 2]\", \"[3, 3]\", \"[4]\".\\nIn each diagonal all elements are the same, so the answer is True.\\n\\nExample 2:\\n\\nInput: matrix = [[1,2],[2,2]]\\nOutput: false\\nExplanation:\\nThe diagonal \"[1, 2]\" has different elements.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nm == matrix.length\\nn == matrix[i].length\\n1 <= m, n <= 20\\n0 <= matrix[i][j] <= 99\\n\\n\\xc2\\xa0\\nFollow up:\\n\\nWhat if the matrix is stored on disk, and the memory is limited such that you can only load at most one row of the matrix into the memory at once?\\nWhat if the matrix is so large that you can only load up a partial row into the memory at once?\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/reorganize-string",
        "Title": "Reorganize String ",
        "Description": "b'Given a string s, rearrange the characters of s so that any two adjacent characters are not the same.\\nReturn any possible rearrangement of s or return \"\" if not possible.\\n\\xc2\\xa0\\nExample 1:\\nInput: s = \"aab\"\\nOutput: \"aba\"\\nExample 2:\\nInput: s = \"aaab\"\\nOutput: \"\"\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= s.length <= 500\\ns consists of lowercase English letters.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/max-chunks-to-make-sorted-ii",
        "Title": "Max Chunks To Make Sorted II ",
        "Description": "b\"You are given an integer array arr.\\nWe split arr into some number of chunks (i.e., partitions), and individually sort each chunk. After concatenating them, the result should equal the sorted array.\\nReturn the largest number of chunks we can make to sort the array.\\n\\xc2\\xa0\\nExample 1:\\nInput: arr = [5,4,3,2,1]\\nOutput: 1\\nExplanation:\\nSplitting into two or more chunks will not return the required result.\\nFor example, splitting into [5, 4], [3, 2, 1] will result in [4, 5, 1, 2, 3], which isn't sorted.\\n\\nExample 2:\\nInput: arr = [2,1,3,4,4]\\nOutput: 4\\nExplanation:\\nWe can split into two chunks, such as [2, 1], [3, 4, 4].\\nHowever, splitting into [2, 1], [3], [4], [4] is the highest number of chunks possible.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= arr.length <= 2000\\n0 <= arr[i] <= 108\\n\\n\""
    },
    {
        "URL": "https://leetcode.com/problems/max-chunks-to-make-sorted",
        "Title": "Max Chunks To Make Sorted ",
        "Description": "b\"You are given an integer array arr of length n that represents a permutation of the integers in the range [0, n - 1].\\nWe split arr into some number of chunks (i.e., partitions), and individually sort each chunk. After concatenating them, the result should equal the sorted array.\\nReturn the largest number of chunks we can make to sort the array.\\n\\xc2\\xa0\\nExample 1:\\nInput: arr = [4,3,2,1,0]\\nOutput: 1\\nExplanation:\\nSplitting into two or more chunks will not return the required result.\\nFor example, splitting into [4, 3], [2, 1, 0] will result in [3, 4, 0, 1, 2], which isn't sorted.\\n\\nExample 2:\\nInput: arr = [1,0,2,3,4]\\nOutput: 4\\nExplanation:\\nWe can split into two chunks, such as [1, 0], [2, 3, 4].\\nHowever, splitting into [1, 0], [2], [3], [4] is the highest number of chunks possible.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nn == arr.length\\n1 <= n <= 10\\n0 <= arr[i] < n\\nAll the elements of arr are unique.\\n\\n\""
    },
    {
        "URL": "https://leetcode.com/problems/basic-calculator-iv",
        "Title": "Basic Calculator IV ",
        "Description": "b'Given an expression such as expression = \"e + 8 - a + 5\" and an evaluation map such as {\"e\": 1} (given in terms of evalvars = [\"e\"] and evalints = [1]), return a list of tokens representing the simplified expression, such as [\"-1*a\",\"14\"]\\n\\nAn expression alternates chunks and symbols, with a space separating each chunk and symbol.\\nA chunk is either an expression in parentheses, a variable, or a non-negative integer.\\nA variable is a string of lowercase letters (not including digits.) Note that variables can be multiple letters, and note that variables never have a leading coefficient or unary operator like \"2x\" or \"-x\".\\n\\nExpressions are evaluated in the usual order: brackets first, then multiplication, then addition and subtraction.\\n\\nFor example, expression = \"1 + 2 * 3\" has an answer of [\"7\"].\\n\\nThe format of the output is as follows:\\n\\nFor each term of free variables with a non-zero coefficient, we write the free variables within a term in sorted order lexicographically.\\n\\t\\nFor example, we would never write a term like \"b*a*c\", only \"a*b*c\".\\n\\n\\nTerms have degrees equal to the number of free variables being multiplied, counting multiplicity. We write the largest degree terms of our answer first, breaking ties by lexicographic order ignoring the leading coefficient of the term.\\n\\t\\nFor example, \"a*a*b*c\" has degree 4.\\n\\n\\nThe leading coefficient of the term is placed directly to the left with an asterisk separating it from the variables (if they exist.) A leading coefficient of 1 is still printed.\\nAn example of a well-formatted answer is [\"-2*a*a*a\", \"3*a*a*b\", \"3*b*b\", \"4*a\", \"5*c\", \"-6\"].\\nTerms (including constant terms) with coefficient 0 are not included.\\n\\t\\nFor example, an expression of \"0\" has an output of [].\\n\\n\\n\\n\\xc2\\xa0\\nExample 1:\\nInput: expression = \"e + 8 - a + 5\", evalvars = [\"e\"], evalints = [1]\\nOutput: [\"-1*a\",\"14\"]\\n\\nExample 2:\\nInput: expression = \"e - 8 + temperature - pressure\", evalvars = [\"e\", \"temperature\"], evalints = [1, 12]\\nOutput: [\"-1*pressure\",\"5\"]\\n\\nExample 3:\\nInput: expression = \"(e + 8) * (e - 8)\", evalvars = [], evalints = []\\nOutput: [\"1*e*e\",\"-64\"]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= expression.length <= 250\\nexpression consists of lowercase English letters, digits, \\'+\\', \\'-\\', \\'*\\', \\'(\\', \\')\\', \\' \\'.\\nexpression does not contain any leading or trailing spaces.\\nAll the tokens in expression are separated by a single space.\\n0 <= evalvars.length <= 100\\n1 <= evalvars[i].length <= 20\\nevalvars[i] consists of lowercase English letters.\\nevalints.length == evalvars.length\\n-100 <= evalints[i] <= 100\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/jewels-and-stones",
        "Title": "Jewels and Stones ",
        "Description": "b'You\\'re given strings jewels representing the types of stones that are jewels, and stones representing the stones you have. Each character in stones is a type of stone you have. You want to know how many of the stones you have are also jewels.\\nLetters are case sensitive, so \"a\" is considered a different type of stone from \"A\".\\n\\xc2\\xa0\\nExample 1:\\nInput: jewels = \"aA\", stones = \"aAAbbbb\"\\nOutput: 3\\nExample 2:\\nInput: jewels = \"z\", stones = \"ZZ\"\\nOutput: 0\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <=\\xc2\\xa0jewels.length, stones.length <= 50\\njewels and stones consist of only English letters.\\nAll the characters of\\xc2\\xa0jewels are unique.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/basic-calculator-iii",
        "Title": "Basic Calculator III ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/sliding-puzzle",
        "Title": "Sliding Puzzle ",
        "Description": "b'On an 2 x 3 board, there are five tiles labeled from 1 to 5, and an empty square represented by 0. A move consists of choosing 0 and a 4-directionally adjacent number and swapping it.\\nThe state of the board is solved if and only if the board is [[1,2,3],[4,5,0]].\\nGiven the puzzle board board, return the least number of moves required so that the state of the board is solved. If it is impossible for the state of the board to be solved, return -1.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: board = [[1,2,3],[4,0,5]]\\nOutput: 1\\nExplanation: Swap the 0 and the 5 in one move.\\n\\nExample 2:\\n\\nInput: board = [[1,2,3],[5,4,0]]\\nOutput: -1\\nExplanation: No number of moves will make the board solved.\\n\\nExample 3:\\n\\nInput: board = [[4,1,2],[5,0,3]]\\nOutput: 5\\nExplanation: 5 is the smallest number of moves that solves the board.\\nAn example path:\\nAfter move 0: [[4,1,2],[5,0,3]]\\nAfter move 1: [[4,1,2],[0,5,3]]\\nAfter move 2: [[0,1,2],[4,5,3]]\\nAfter move 3: [[1,0,2],[4,5,3]]\\nAfter move 4: [[1,2,0],[4,5,3]]\\nAfter move 5: [[1,2,3],[4,5,0]]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nboard.length == 2\\nboard[i].length == 3\\n0 <= board[i][j] <= 5\\nEach value board[i][j] is unique.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/minimize-max-distance-to-gas-station",
        "Title": "Minimize Max Distance to Gas Station ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/global-and-local-inversions",
        "Title": "Global and Local Inversions ",
        "Description": "b'You are given an integer array nums of length n which represents a permutation of all the integers in the range [0, n - 1].\\nThe number of global inversions is the number of the different pairs (i, j) where:\\n\\n0 <= i < j < n\\nnums[i] > nums[j]\\n\\nThe number of local inversions is the number of indices i where:\\n\\n0 <= i < n - 1\\nnums[i] > nums[i + 1]\\n\\nReturn true if the number of global inversions is equal to the number of local inversions.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [1,0,2]\\nOutput: true\\nExplanation: There is 1 global inversion and 1 local inversion.\\n\\nExample 2:\\nInput: nums = [1,2,0]\\nOutput: false\\nExplanation: There are 2 global inversions and 1 local inversion.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nn == nums.length\\n1 <= n <= 105\\n0 <= nums[i] < n\\nAll the integers of nums are unique.\\nnums is a permutation of all the numbers in the range [0, n - 1].\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/split-bst",
        "Title": "Split BST ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/swap-adjacent-in-lr-string",
        "Title": "Swap Adjacent in LR String ",
        "Description": "b'In a string composed of \\'L\\', \\'R\\', and \\'X\\' characters, like \"RXXLRXRXL\", a move consists of either replacing one occurrence of \"XL\" with \"LX\", or replacing one occurrence of \"RX\" with \"XR\". Given the starting string start and the ending string end, return True if and only if there exists a sequence of moves to transform one string to the other.\\n\\xc2\\xa0\\nExample 1:\\nInput: start = \"RXXLRXRXL\", end = \"XRLXXRRLX\"\\nOutput: true\\nExplanation: We can transform start to end following these steps:\\nRXXLRXRXL ->\\nXRXLRXRXL ->\\nXRLXRXRXL ->\\nXRLXXRRXL ->\\nXRLXXRRLX\\n\\nExample 2:\\nInput: start = \"X\", end = \"L\"\\nOutput: false\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= start.length\\xc2\\xa0<= 104\\nstart.length == end.length\\nBoth start and end will only consist of characters in \\'L\\', \\'R\\', and\\xc2\\xa0\\'X\\'.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/swim-in-rising-water",
        "Title": "Swim in Rising Water ",
        "Description": "b'You are given an n x n integer matrix grid where each value grid[i][j] represents the elevation at that point (i, j).\\nThe rain starts to fall. At time t, the depth of the water everywhere is t. You can swim from a square to another 4-directionally adjacent square if and only if the elevation of both squares individually are at most t. You can swim infinite distances in zero time. Of course, you must stay within the boundaries of the grid during your swim.\\nReturn the least time until you can reach the bottom right square (n - 1, n - 1) if you start at the top left square (0, 0).\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: grid = [[0,2],[1,3]]\\nOutput: 3\\nExplanation:\\nAt time 0, you are in grid location (0, 0).\\nYou cannot go anywhere else because 4-directionally adjacent neighbors have a higher elevation than t = 0.\\nYou cannot reach point (1, 1) until time 3.\\nWhen the depth of water is 3, we can swim anywhere inside the grid.\\n\\nExample 2:\\n\\nInput: grid = [[0,1,2,3,4],[24,23,22,21,5],[12,13,14,15,16],[11,17,18,19,20],[10,9,8,7,6]]\\nOutput: 16\\nExplanation: The final route is shown.\\nWe need to wait until time 16 so that (0, 0) and (4, 4) are connected.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nn == grid.length\\nn == grid[i].length\\n1 <= n <= 50\\n0 <= grid[i][j] <\\xc2\\xa0n2\\nEach value grid[i][j] is unique.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/k-th-symbol-in-grammar",
        "Title": "K-th Symbol in Grammar ",
        "Description": "b'We build a table of n rows (1-indexed). We start by writing 0 in the 1st row. Now in every subsequent row, we look at the previous row and replace each occurrence of 0 with 01, and each occurrence of 1 with 10.\\n\\nFor example, for n = 3, the 1st row is 0, the 2nd row is 01, and the 3rd row is 0110.\\n\\nGiven two integer n and k, return the kth (1-indexed) symbol in the nth row of a table of n rows.\\n\\xc2\\xa0\\nExample 1:\\nInput: n = 1, k = 1\\nOutput: 0\\nExplanation: row 1: 0\\n\\nExample 2:\\nInput: n = 2, k = 1\\nOutput: 0\\nExplanation: \\nrow 1: 0\\nrow 2: 01\\n\\nExample 3:\\nInput: n = 2, k = 2\\nOutput: 1\\nExplanation: \\nrow 1: 0\\nrow 2: 01\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= n <= 30\\n1 <= k <= 2n - 1\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/reaching-points",
        "Title": "Reaching Points ",
        "Description": "b'Given four integers sx, sy, tx, and ty, return true if it is possible to convert the point (sx, sy) to the point (tx, ty) through some operations, or false otherwise.\\nThe allowed operation on some point (x, y) is to convert it to either (x, x + y) or (x + y, y).\\n\\xc2\\xa0\\nExample 1:\\nInput: sx = 1, sy = 1, tx = 3, ty = 5\\nOutput: true\\nExplanation:\\nOne series of moves that transforms the starting point to the target is:\\n(1, 1) -> (1, 2)\\n(1, 2) -> (3, 2)\\n(3, 2) -> (3, 5)\\n\\nExample 2:\\nInput: sx = 1, sy = 1, tx = 2, ty = 2\\nOutput: false\\n\\nExample 3:\\nInput: sx = 1, sy = 1, tx = 1, ty = 1\\nOutput: true\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= sx, sy, tx, ty <= 109\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/rabbits-in-forest",
        "Title": "Rabbits in Forest ",
        "Description": "b'There is a forest with an unknown number of rabbits. We asked n rabbits \"How many rabbits have the same color as you?\" and collected the answers in an integer array answers where answers[i] is the answer of the ith rabbit.\\nGiven the array answers, return the minimum number of rabbits that could be in the forest.\\n\\xc2\\xa0\\nExample 1:\\nInput: answers = [1,1,2]\\nOutput: 5\\nExplanation:\\nThe two rabbits that answered \"1\" could both be the same color, say red.\\nThe rabbit that answered \"2\" can\\'t be red or the answers would be inconsistent.\\nSay the rabbit that answered \"2\" was blue.\\nThen there should be 2 other blue rabbits in the forest that didn\\'t answer into the array.\\nThe smallest possible number of rabbits in the forest is therefore 5: 3 that answered plus 2 that didn\\'t.\\n\\nExample 2:\\nInput: answers = [10,10,10]\\nOutput: 11\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= answers.length <= 1000\\n0 <= answers[i] < 1000\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/transform-to-chessboard",
        "Title": "Transform to Chessboard ",
        "Description": "b\"You are given an n x n binary grid board. In each move, you can swap any two rows with each other, or any two columns with each other.\\nReturn the minimum number of moves to transform the board into a chessboard board. If the task is impossible, return -1.\\nA chessboard board is a board where no 0's and no 1's are 4-directionally adjacent.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: board = [[0,1,1,0],[0,1,1,0],[1,0,0,1],[1,0,0,1]]\\nOutput: 2\\nExplanation: One potential sequence of moves is shown.\\nThe first move swaps the first and second column.\\nThe second move swaps the second and third row.\\n\\nExample 2:\\n\\nInput: board = [[0,1],[1,0]]\\nOutput: 0\\nExplanation: Also note that the board with 0 in the top left corner, is also a valid chessboard.\\n\\nExample 3:\\n\\nInput: board = [[1,0],[1,0]]\\nOutput: -1\\nExplanation: No matter what sequence of moves you make, you cannot end with a valid chessboard.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nn == board.length\\nn == board[i].length\\n2 <= n <= 30\\nboard[i][j] is either\\xc2\\xa00 or 1.\\n\\n\""
    },
    {
        "URL": "https://leetcode.com/problems/minimum-distance-between-bst-nodes",
        "Title": "Minimum Distance Between BST Nodes ",
        "Description": "b'Given the root of a Binary Search Tree (BST), return the minimum difference between the values of any two different nodes in the tree.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: root = [4,2,6,1,3]\\nOutput: 1\\n\\nExample 2:\\n\\nInput: root = [1,0,48,null,null,12,49]\\nOutput: 1\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of nodes in the tree is in the range [2, 100].\\n0 <= Node.val <= 105\\n\\n\\xc2\\xa0\\nNote: This question is the same as 530: https://leetcode.com/problems/minimum-absolute-difference-in-bst/\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/letter-case-permutation",
        "Title": "Letter Case Permutation ",
        "Description": "b'Given a string s, you\\xc2\\xa0can transform every letter individually to be lowercase or uppercase to create another string.\\nReturn a list of all possible strings we could create. Return the output in any order.\\n\\xc2\\xa0\\nExample 1:\\nInput: s = \"a1b2\"\\nOutput: [\"a1b2\",\"a1B2\",\"A1b2\",\"A1B2\"]\\n\\nExample 2:\\nInput: s = \"3z4\"\\nOutput: [\"3z4\",\"3Z4\"]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= s.length <= 12\\ns consists of lowercase English letters, uppercase English letters, and digits.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/is-graph-bipartite",
        "Title": "Is Graph Bipartite? ",
        "Description": "b'There is an undirected graph with n nodes, where each node is numbered between 0 and n - 1. You are given a 2D array graph, where graph[u] is an array of nodes that node u is adjacent to. More formally, for each v in graph[u], there is an undirected edge between node u and node v. The graph has the following properties:\\n\\nThere are no self-edges (graph[u] does not contain u).\\nThere are no parallel edges (graph[u] does not contain duplicate values).\\nIf v is in graph[u], then u is in graph[v] (the graph is undirected).\\nThe graph may not be connected, meaning there may be two nodes u and v such that there is no path between them.\\n\\nA graph is bipartite if the nodes can be partitioned into two independent sets A and B such that every edge in the graph connects a node in set A and a node in set B.\\nReturn true if and only if it is bipartite.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: graph = [[1,2,3],[0,2],[0,1,3],[0,2]]\\nOutput: false\\nExplanation: There is no way to partition the nodes into two independent sets such that every edge connects a node in one and a node in the other.\\nExample 2:\\n\\nInput: graph = [[1,3],[0,2],[1,3],[0,2]]\\nOutput: true\\nExplanation: We can partition the nodes into two sets: {0, 2} and {1, 3}.\\n\\xc2\\xa0\\nConstraints:\\n\\ngraph.length == n\\n1 <= n <= 100\\n0 <= graph[u].length < n\\n0 <= graph[u][i] <= n - 1\\ngraph[u]\\xc2\\xa0does not contain\\xc2\\xa0u.\\nAll the values of graph[u] are unique.\\nIf graph[u] contains v, then graph[v] contains u.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/k-th-smallest-prime-fraction",
        "Title": "K-th Smallest Prime Fraction ",
        "Description": "b'You are given a sorted integer array arr containing 1 and prime numbers, where all the integers of arr are unique. You are also given an integer k.\\nFor every i and j where 0 <= i < j < arr.length, we consider the fraction arr[i] / arr[j].\\nReturn the kth smallest fraction considered. Return your answer as an array of integers of size 2, where answer[0] == arr[i] and answer[1] == arr[j].\\n\\xc2\\xa0\\nExample 1:\\nInput: arr = [1,2,3,5], k = 3\\nOutput: [2,5]\\nExplanation: The fractions to be considered in sorted order are:\\n1/5, 1/3, 2/5, 1/2, 3/5, and 2/3.\\nThe third fraction is 2/5.\\n\\nExample 2:\\nInput: arr = [1,7], k = 1\\nOutput: [1,7]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n2 <= arr.length <= 1000\\n1 <= arr[i] <= 3 * 104\\narr[0] == 1\\narr[i] is a prime number for i > 0.\\nAll the numbers of arr are unique and sorted in strictly increasing order.\\n1 <= k <= arr.length * (arr.length - 1) / 2\\n\\n\\xc2\\xa0\\nFollow up: Can you solve the problem with better than O(n2) complexity?'"
    },
    {
        "URL": "https://leetcode.com/problems/cheapest-flights-within-k-stops",
        "Title": "Cheapest Flights Within K Stops ",
        "Description": "b'There are n cities connected by some number of flights. You are given an array flights where flights[i] = [fromi, toi, pricei] indicates that there is a flight from city fromi to city toi with cost pricei.\\nYou are also given three integers src, dst, and k, return the cheapest price from src to dst with at most k stops. If there is no such route, return -1.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: n = 4, flights = [[0,1,100],[1,2,100],[2,0,100],[1,3,600],[2,3,200]], src = 0, dst = 3, k = 1\\nOutput: 700\\nExplanation:\\nThe graph is shown above.\\nThe optimal path with at most 1 stop from city 0 to 3 is marked in red and has cost 100 + 600 = 700.\\nNote that the path through cities [0,1,2,3] is cheaper but is invalid because it uses 2 stops.\\n\\nExample 2:\\n\\nInput: n = 3, flights = [[0,1,100],[1,2,100],[0,2,500]], src = 0, dst = 2, k = 1\\nOutput: 200\\nExplanation:\\nThe graph is shown above.\\nThe optimal path with at most 1 stop from city 0 to 2 is marked in red and has cost 100 + 100 = 200.\\n\\nExample 3:\\n\\nInput: n = 3, flights = [[0,1,100],[1,2,100],[0,2,500]], src = 0, dst = 2, k = 0\\nOutput: 500\\nExplanation:\\nThe graph is shown above.\\nThe optimal path with no stops from city 0 to 2 is marked in red and has cost 500.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= n <= 100\\n0 <= flights.length <= (n * (n - 1) / 2)\\nflights[i].length == 3\\n0 <= fromi, toi < n\\nfromi != toi\\n1 <= pricei <= 104\\nThere will not be any multiple flights between two cities.\\n0 <= src, dst, k < n\\nsrc != dst\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/rotated-digits",
        "Title": "Rotated Digits ",
        "Description": "b'An integer x is a good if after rotating each digit individually by 180 degrees, we get a valid number that is different from x. Each digit must be rotated - we cannot choose to leave it alone.\\nA number is valid if each digit remains a digit after rotation. For example:\\n\\n0, 1, and 8 rotate to themselves,\\n2 and 5 rotate to each other (in this case they are rotated in a different direction, in other words, 2 or 5 gets mirrored),\\n6 and 9 rotate to each other, and\\nthe rest of the numbers do not rotate to any other number and become invalid.\\n\\nGiven an integer n, return the number of good integers in the range [1, n].\\n\\xc2\\xa0\\nExample 1:\\nInput: n = 10\\nOutput: 4\\nExplanation: There are four good numbers in the range [1, 10] : 2, 5, 6, 9.\\nNote that 1 and 10 are not good numbers, since they remain unchanged after rotating.\\n\\nExample 2:\\nInput: n = 1\\nOutput: 0\\n\\nExample 3:\\nInput: n = 2\\nOutput: 1\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= n <= 104\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/escape-the-ghosts",
        "Title": "Escape The Ghosts ",
        "Description": "b'You are playing a simplified PAC-MAN game on an infinite 2-D grid. You start at the point [0, 0], and you are given a destination point target = [xtarget, ytarget] that you are trying to get to. There are several ghosts on the map with their starting positions given as a 2D array ghosts, where ghosts[i] = [xi, yi] represents the starting position of the ith ghost. All inputs are integral coordinates.\\nEach turn, you and all the ghosts may independently choose to either move 1 unit in any of the four cardinal directions: north, east, south, or west, or stay still. All actions happen simultaneously.\\nYou escape if and only if you can reach the target before any ghost reaches you. If you reach any square (including the target) at the same time as a ghost, it does not count as an escape.\\nReturn true if it is possible to escape regardless of how the ghosts move, otherwise return false.\\n\\xc2\\xa0\\nExample 1:\\nInput: ghosts = [[1,0],[0,3]], target = [0,1]\\nOutput: true\\nExplanation: You can reach the destination (0, 1) after 1 turn, while the ghosts located at (1, 0) and (0, 3) cannot catch up with you.\\n\\nExample 2:\\nInput: ghosts = [[1,0]], target = [2,0]\\nOutput: false\\nExplanation: You need to reach the destination (2, 0), but the ghost at (1, 0) lies between you and the destination.\\n\\nExample 3:\\nInput: ghosts = [[2,0]], target = [1,0]\\nOutput: false\\nExplanation: The ghost can reach the target at the same time as you.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= ghosts.length <= 100\\nghosts[i].length == 2\\n-104 <= xi, yi <= 104\\nThere can be multiple ghosts in the same location.\\ntarget.length == 2\\n-104 <= xtarget, ytarget <= 104\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/domino-and-tromino-tiling",
        "Title": "Domino and Tromino Tiling ",
        "Description": "b'You have two types of tiles: a 2 x 1 domino shape and a tromino shape. You may rotate these shapes.\\n\\nGiven an integer n, return the number of ways to tile an 2 x n board. Since the answer may be very large, return it modulo 109 + 7.\\nIn a tiling, every square must be covered by a tile. Two tilings are different if and only if there are two 4-directionally adjacent cells on the board such that exactly one of the tilings has both squares occupied by a tile.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: n = 3\\nOutput: 5\\nExplanation: The five different ways are show above.\\n\\nExample 2:\\nInput: n = 1\\nOutput: 1\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= n <= 1000\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/custom-sort-string",
        "Title": "Custom Sort String ",
        "Description": "b'You are given two strings order and s. All the characters of order are unique and were sorted in some custom order previously.\\nPermute the characters of s so that they match the order that order was sorted. More specifically, if a character x occurs before a character y in order, then x should occur before y in the permuted string.\\nReturn any permutation of s that satisfies this property.\\n\\xc2\\xa0\\nExample 1:\\nInput: order = \"cba\", s = \"abcd\"\\nOutput: \"cbad\"\\nExplanation: \\n\"a\", \"b\", \"c\" appear in order, so the order of \"a\", \"b\", \"c\" should be \"c\", \"b\", and \"a\". \\nSince \"d\" does not appear in order, it can be at any position in the returned string. \"dcba\", \"cdba\", \"cbda\" are also valid outputs.\\n\\nExample 2:\\nInput: order = \"cbafg\", s = \"abcd\"\\nOutput: \"cbad\"\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= order.length <= 26\\n1 <= s.length <= 200\\norder and s consist of lowercase English letters.\\nAll the characters of order are unique.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/number-of-matching-subsequences",
        "Title": "Number of Matching Subsequences ",
        "Description": "b'Given a string s and an array of strings words, return the number of words[i] that is a subsequence of s.\\nA subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters.\\n\\nFor example, \"ace\" is a subsequence of \"abcde\".\\n\\n\\xc2\\xa0\\nExample 1:\\nInput: s = \"abcde\", words = [\"a\",\"bb\",\"acd\",\"ace\"]\\nOutput: 3\\nExplanation: There are three strings in words that are a subsequence of s: \"a\", \"acd\", \"ace\".\\n\\nExample 2:\\nInput: s = \"dsahjpjauf\", words = [\"ahjpjau\",\"ja\",\"ahbwzgqnuk\",\"tnmlanowax\"]\\nOutput: 2\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= s.length <= 5 * 104\\n1 <= words.length <= 5000\\n1 <= words[i].length <= 50\\ns and words[i] consist of only lowercase English letters.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/preimage-size-of-factorial-zeroes-function",
        "Title": "Preimage Size of Factorial Zeroes Function ",
        "Description": "b'Let f(x) be the number of zeroes at the end of x!. Recall that x! = 1 * 2 * 3 * ... * x and by convention, 0! = 1.\\n\\nFor example, f(3) = 0 because 3! = 6 has no zeroes at the end, while f(11) = 2 because 11! = 39916800 has two zeroes at the end.\\n\\nGiven an integer k, return the number of non-negative integers x have the property that f(x) = k.\\n\\xc2\\xa0\\nExample 1:\\nInput: k = 0\\nOutput: 5\\nExplanation: 0!, 1!, 2!, 3!, and 4! end with k = 0 zeroes.\\n\\nExample 2:\\nInput: k = 5\\nOutput: 0\\nExplanation: There is no x such that x! ends in k = 5 zeroes.\\n\\nExample 3:\\nInput: k = 3\\nOutput: 5\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n0 <= k <= 109\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/valid-tic-tac-toe-state",
        "Title": "Valid Tic-Tac-Toe State ",
        "Description": "b'Given a Tic-Tac-Toe board as a string array board, return true if and only if it is possible to reach this board position during the course of a valid tic-tac-toe game.\\nThe board is a 3 x 3 array that consists of characters \\' \\', \\'X\\', and \\'O\\'. The \\' \\' character represents an empty square.\\nHere are the rules of Tic-Tac-Toe:\\n\\nPlayers take turns placing characters into empty squares \\' \\'.\\nThe first player always places \\'X\\' characters, while the second player always places \\'O\\' characters.\\n\\'X\\' and \\'O\\' characters are always placed into empty squares, never filled ones.\\nThe game ends when there are three of the same (non-empty) character filling any row, column, or diagonal.\\nThe game also ends if all squares are non-empty.\\nNo more moves can be played if the game is over.\\n\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: board = [\"O  \",\"   \",\"   \"]\\nOutput: false\\nExplanation: The first player always plays \"X\".\\n\\nExample 2:\\n\\nInput: board = [\"XOX\",\" X \",\"   \"]\\nOutput: false\\nExplanation: Players take turns making moves.\\n\\nExample 3:\\n\\nInput: board = [\"XOX\",\"O O\",\"XOX\"]\\nOutput: true\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nboard.length == 3\\nboard[i].length == 3\\nboard[i][j] is either \\'X\\', \\'O\\', or \\' \\'.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/number-of-subarrays-with-bounded-maximum",
        "Title": "Number of Subarrays with Bounded Maximum ",
        "Description": "b'Given an integer array nums and two integers left and right, return the number of contiguous non-empty subarrays such that the value of the maximum array element in that subarray is in the range [left, right].\\nThe test cases are generated so that the answer will fit in a 32-bit integer.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [2,1,4,3], left = 2, right = 3\\nOutput: 3\\nExplanation: There are three subarrays that meet the requirements: [2], [2, 1], [3].\\n\\nExample 2:\\nInput: nums = [2,9,2,5,6], left = 2, right = 8\\nOutput: 7\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 105\\n0 <= nums[i] <= 109\\n0 <= left <= right <= 109\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/rotate-string",
        "Title": "Rotate String ",
        "Description": "b'Given two strings s and goal, return true if and only if s can become goal after some number of shifts on s.\\nA shift on s consists of moving the leftmost character of s to the rightmost position.\\n\\nFor example, if s = \"abcde\", then it will be \"bcdea\" after one shift.\\n\\n\\xc2\\xa0\\nExample 1:\\nInput: s = \"abcde\", goal = \"cdeab\"\\nOutput: true\\nExample 2:\\nInput: s = \"abcde\", goal = \"abced\"\\nOutput: false\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= s.length, goal.length <= 100\\ns and goal consist of lowercase English letters.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/all-paths-from-source-to-target",
        "Title": "All Paths From Source to Target ",
        "Description": "b'Given a directed acyclic graph (DAG) of n nodes labeled from 0 to n - 1, find all possible paths from node 0 to node n - 1 and return them in any order.\\nThe graph is given as follows: graph[i] is a list of all nodes you can visit from node i (i.e., there is a directed edge from node i to node graph[i][j]).\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: graph = [[1,2],[3],[3],[]]\\nOutput: [[0,1,3],[0,2,3]]\\nExplanation: There are two paths: 0 -> 1 -> 3 and 0 -> 2 -> 3.\\n\\nExample 2:\\n\\nInput: graph = [[4,3,1],[3,2,4],[3],[4],[]]\\nOutput: [[0,4],[0,3,4],[0,1,3,4],[0,1,2,3,4],[0,1,4]]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nn == graph.length\\n2 <= n <= 15\\n0 <= graph[i][j] < n\\ngraph[i][j] != i (i.e., there will be no self-loops).\\nAll the elements of graph[i] are unique.\\nThe input graph is guaranteed to be a DAG.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/smallest-rotation-with-highest-score",
        "Title": "Smallest Rotation with Highest Score ",
        "Description": "b'You are given an array nums. You can rotate it by a non-negative integer k so that the array becomes [nums[k], nums[k + 1], ... nums[nums.length - 1], nums[0], nums[1], ..., nums[k-1]]. Afterward, any entries that are less than or equal to their index are worth one point.\\n\\nFor example, if we have nums = [2,4,1,3,0], and we rotate by k = 2, it becomes [1,3,0,2,4]. This is worth 3 points because 1 > 0 [no points], 3 > 1 [no points], 0 <= 2 [one point], 2 <= 3 [one point], 4 <= 4 [one point].\\n\\nReturn the rotation index k that corresponds to the highest score we can achieve if we rotated nums by it. If there are multiple answers, return the smallest such index k.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [2,3,1,4,0]\\nOutput: 3\\nExplanation: Scores for each k are listed below: \\nk = 0,  nums = [2,3,1,4,0],    score 2\\nk = 1,  nums = [3,1,4,0,2],    score 3\\nk = 2,  nums = [1,4,0,2,3],    score 3\\nk = 3,  nums = [4,0,2,3,1],    score 4\\nk = 4,  nums = [0,2,3,1,4],    score 3\\nSo we should choose k = 3, which has the highest score.\\n\\nExample 2:\\nInput: nums = [1,3,0,2,4]\\nOutput: 0\\nExplanation: nums will always have 3 points no matter how it shifts.\\nSo we will choose the smallest k, which is 0.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 105\\n0 <= nums[i] < nums.length\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/champagne-tower",
        "Title": "Champagne Tower ",
        "Description": "b'We stack glasses in a pyramid, where the first row has 1 glass, the second row has 2 glasses, and so on until the 100th row.\\xc2\\xa0 Each glass holds one cup\\xc2\\xa0of champagne.\\nThen, some champagne is poured into the first glass at the top.\\xc2\\xa0 When the topmost glass is full, any excess liquid poured will fall equally to the glass immediately to the left and right of it.\\xc2\\xa0 When those glasses become full, any excess champagne will fall equally to the left and right of those glasses, and so on.\\xc2\\xa0 (A glass at the bottom row has its excess champagne fall on the floor.)\\nFor example, after one cup of champagne is poured, the top most glass is full.\\xc2\\xa0 After two cups of champagne are poured, the two glasses on the second row are half full.\\xc2\\xa0 After three cups of champagne are poured, those two cups become full - there are 3 full glasses total now.\\xc2\\xa0 After four cups of champagne are poured, the third row has the middle glass half full, and the two outside glasses are a quarter full, as pictured below.\\n\\nNow after pouring some non-negative integer cups of champagne, return how full the jth glass in the ith row is (both i and j are 0-indexed.)\\n\\xc2\\xa0\\nExample 1:\\nInput: poured = 1, query_row = 1, query_glass = 1\\nOutput: 0.00000\\nExplanation: We poured 1 cup of champange to the top glass of the tower (which is indexed as (0, 0)). There will be no excess liquid so all the glasses under the top glass will remain empty.\\n\\nExample 2:\\nInput: poured = 2, query_row = 1, query_glass = 1\\nOutput: 0.50000\\nExplanation: We poured 2 cups of champange to the top glass of the tower (which is indexed as (0, 0)). There is one cup of excess liquid. The glass indexed as (1, 0) and the glass indexed as (1, 1) will share the excess liquid equally, and each will get half cup of champange.\\n\\nExample 3:\\nInput: poured = 100000009, query_row = 33, query_glass = 17\\nOutput: 1.00000\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n0 <=\\xc2\\xa0poured <= 109\\n0 <= query_glass <= query_row\\xc2\\xa0< 100\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/similar-rgb-color",
        "Title": "Similar RGB Color ",
        "Description": ""
    },
    {
        "URL": "https://leetcode.com/problems/minimum-swaps-to-make-sequences-increasing",
        "Title": "Minimum Swaps To Make Sequences Increasing ",
        "Description": "b'You are given two integer arrays of the same length nums1 and nums2. In one operation, you are allowed to swap nums1[i] with nums2[i].\\n\\nFor example, if nums1 = [1,2,3,8], and nums2 = [5,6,7,4], you can swap the element at i = 3 to obtain nums1 = [1,2,3,4] and nums2 = [5,6,7,8].\\n\\nReturn the minimum number of needed operations to make nums1 and nums2 strictly increasing. The test cases are generated so that the given input always makes it possible.\\nAn array arr is strictly increasing if and only if arr[0] < arr[1] < arr[2] < ... < arr[arr.length - 1].\\n\\xc2\\xa0\\nExample 1:\\nInput: nums1 = [1,3,5,4], nums2 = [1,2,3,7]\\nOutput: 1\\nExplanation: \\nSwap nums1[3] and nums2[3]. Then the sequences are:\\nnums1 = [1, 3, 5, 7] and nums2 = [1, 2, 3, 4]\\nwhich are both strictly increasing.\\n\\nExample 2:\\nInput: nums1 = [0,3,5,8,9], nums2 = [2,1,4,6,9]\\nOutput: 1\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n2 <= nums1.length <= 105\\nnums2.length == nums1.length\\n0 <= nums1[i], nums2[i] <= 2 * 105\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/find-eventual-safe-states",
        "Title": "Find Eventual Safe States ",
        "Description": "b'There is a directed graph of n nodes with each node labeled from 0 to n - 1. The graph is represented by a 0-indexed 2D integer array graph where graph[i] is an integer array of nodes adjacent to node i, meaning there is an edge from node i to each node in graph[i].\\nA node is a terminal node if there are no outgoing edges. A node is a safe node if every possible path starting from that node leads to a terminal node (or another safe node).\\nReturn an array containing all the safe nodes of the graph. The answer should be sorted in ascending order.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: graph = [[1,2],[2,3],[5],[0],[5],[],[]]\\nOutput: [2,4,5,6]\\nExplanation: The given graph is shown above.\\nNodes 5 and 6 are terminal nodes as there are no outgoing edges from either of them.\\nEvery path starting at nodes 2, 4, 5, and 6 all lead to either node 5 or 6.\\nExample 2:\\nInput: graph = [[1,2,3,4],[1,2],[3,4],[0,4],[]]\\nOutput: [4]\\nExplanation:\\nOnly node 4 is a terminal node, and every path starting at node 4 leads to node 4.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nn == graph.length\\n1 <= n <= 104\\n0 <= graph[i].length <= n\\n0 <= graph[i][j] <= n - 1\\ngraph[i] is sorted in a strictly increasing order.\\nThe graph may contain self-loops.\\nThe number of edges in the graph will be in the range [1, 4 * 104].\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/bricks-falling-when-hit",
        "Title": "Bricks Falling When Hit ",
        "Description": "b'You are given an m x n binary grid, where each 1 represents a brick and 0 represents an empty space. A brick is stable if:\\n\\nIt is directly connected to the top of the grid, or\\nAt least one other brick in its four adjacent cells is stable.\\n\\nYou are also given an array hits, which is a sequence of erasures we want to apply. Each time we want to erase the brick at the location hits[i] = (rowi, coli). The brick on that location\\xc2\\xa0(if it exists) will disappear. Some other bricks may no longer be stable because of that erasure and will fall. Once a brick falls, it is immediately erased from the grid (i.e., it does not land on other stable bricks).\\nReturn an array result, where each result[i] is the number of bricks that will fall after the ith erasure is applied.\\nNote that an erasure may refer to a location with no brick, and if it does, no bricks drop.\\n\\xc2\\xa0\\nExample 1:\\nInput: grid = [[1,0,0,0],[1,1,1,0]], hits = [[1,0]]\\nOutput: [2]\\nExplanation: Starting with the grid:\\n[[1,0,0,0],\\n [1,1,1,0]]\\nWe erase the underlined brick at (1,0), resulting in the grid:\\n[[1,0,0,0],\\n [0,1,1,0]]\\nThe two underlined bricks are no longer stable as they are no longer connected to the top nor adjacent to another stable brick, so they will fall. The resulting grid is:\\n[[1,0,0,0],\\n [0,0,0,0]]\\nHence the result is [2].\\n\\nExample 2:\\nInput: grid = [[1,0,0,0],[1,1,0,0]], hits = [[1,1],[1,0]]\\nOutput: [0,0]\\nExplanation: Starting with the grid:\\n[[1,0,0,0],\\n [1,1,0,0]]\\nWe erase the underlined brick at (1,1), resulting in the grid:\\n[[1,0,0,0],\\n [1,0,0,0]]\\nAll remaining bricks are still stable, so no bricks fall. The grid remains the same:\\n[[1,0,0,0],\\n [1,0,0,0]]\\nNext, we erase the underlined brick at (1,0), resulting in the grid:\\n[[1,0,0,0],\\n [0,0,0,0]]\\nOnce again, all remaining bricks are still stable, so no bricks fall.\\nHence the result is [0,0].\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nm == grid.length\\nn == grid[i].length\\n1 <= m, n <= 200\\ngrid[i][j] is 0 or 1.\\n1 <= hits.length <= 4 * 104\\nhits[i].length == 2\\n0 <= xi\\xc2\\xa0<= m - 1\\n0 <=\\xc2\\xa0yi <= n - 1\\nAll (xi, yi) are unique.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/unique-morse-code-words",
        "Title": "Unique Morse Code Words ",
        "Description": "b'International Morse Code defines a standard encoding where each letter is mapped to a series of dots and dashes, as follows:\\n\\n\\'a\\' maps to \".-\",\\n\\'b\\' maps to \"-...\",\\n\\'c\\' maps to \"-.-.\", and so on.\\n\\nFor convenience, the full table for the 26 letters of the English alphabet is given below:\\n[\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"]\\nGiven an array of strings words where each word can be written as a concatenation of the Morse code of each letter.\\n\\nFor example, \"cab\" can be written as \"-.-..--...\", which is the concatenation of \"-.-.\", \".-\", and \"-...\". We will call such a concatenation the transformation of a word.\\n\\nReturn the number of different transformations among all words we have.\\n\\xc2\\xa0\\nExample 1:\\nInput: words = [\"gin\",\"zen\",\"gig\",\"msg\"]\\nOutput: 2\\nExplanation: The transformation of each word is:\\n\"gin\" -> \"--...-.\"\\n\"zen\" -> \"--...-.\"\\n\"gig\" -> \"--...--.\"\\n\"msg\" -> \"--...--.\"\\nThere are 2 different transformations: \"--...-.\" and \"--...--.\".\\n\\nExample 2:\\nInput: words = [\"a\"]\\nOutput: 1\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= words.length <= 100\\n1 <= words[i].length <= 12\\nwords[i] consists of lowercase English letters.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/split-array-with-same-average",
        "Title": "Split Array With Same Average ",
        "Description": "b'You are given an integer array nums.\\nYou should move each element of nums into one of the two arrays A and B such that A and B are non-empty, and average(A) == average(B).\\nReturn true if it is possible to achieve that and false otherwise.\\nNote that for an array arr, average(arr) is the sum of all the elements of arr over the length of arr.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [1,2,3,4,5,6,7,8]\\nOutput: true\\nExplanation: We can split the array into [1,4,5,8] and [2,3,6,7], and both of them have an average of 4.5.\\n\\nExample 2:\\nInput: nums = [3,1]\\nOutput: false\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 30\\n0 <= nums[i] <= 104\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/number-of-lines-to-write-string",
        "Title": "Number of Lines To Write String ",
        "Description": "b'You are given a string s of lowercase English letters and an array widths denoting how many pixels wide each lowercase English letter is. Specifically, widths[0] is the width of \\'a\\', widths[1] is the width of \\'b\\', and so on.\\nYou are trying to write s across several lines, where each line is no longer than 100 pixels. Starting at the beginning of s, write as many letters on the first line such that the total width does not exceed 100 pixels. Then, from where you stopped in s, continue writing as many letters as you can on the second line. Continue this process until you have written all of s.\\nReturn an array result of length 2 where:\\n\\nresult[0] is the total number of lines.\\nresult[1] is the width of the last line in pixels.\\n\\n\\xc2\\xa0\\nExample 1:\\nInput: widths = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10], s = \"abcdefghijklmnopqrstuvwxyz\"\\nOutput: [3,60]\\nExplanation: You can write s as follows:\\nabcdefghij  // 100 pixels wide\\nklmnopqrst  // 100 pixels wide\\nuvwxyz      // 60 pixels wide\\nThere are a total of 3 lines, and the last line is 60 pixels wide.\\nExample 2:\\nInput: widths = [4,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10], s = \"bbbcccdddaaa\"\\nOutput: [2,4]\\nExplanation: You can write s as follows:\\nbbbcccdddaa  // 98 pixels wide\\na            // 4 pixels wide\\nThere are a total of 2 lines, and the last line is 4 pixels wide.\\n\\xc2\\xa0\\nConstraints:\\n\\nwidths.length == 26\\n2 <= widths[i] <= 10\\n1 <= s.length <= 1000\\ns contains only lowercase English letters.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/max-increase-to-keep-city-skyline",
        "Title": "Max Increase to Keep City Skyline ",
        "Description": "b\"There is a city composed of n x n blocks, where each block contains a single building shaped like a vertical square prism. You are given a 0-indexed n x n integer matrix grid where grid[r][c] represents the height of the building located in the block at row r and column c.\\nA city's skyline is the the outer contour formed by all the building when viewing the side of the city from a distance. The skyline from each cardinal direction north, east, south, and west may be different.\\nWe are allowed to increase the height of any number of buildings by any amount (the amount can be different per building). The height of a 0-height building can also be increased. However, increasing the height of a building should not affect the city's skyline from any cardinal direction.\\nReturn the maximum total sum that the height of the buildings can be increased by without changing the city's skyline from any cardinal direction.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: grid = [[3,0,8,4],[2,4,5,7],[9,2,6,3],[0,3,1,0]]\\nOutput: 35\\nExplanation: The building heights are shown in the center of the above image.\\nThe skylines when viewed from each cardinal direction are drawn in red.\\nThe grid after increasing the height of buildings without affecting skylines is:\\ngridNew = [ [8, 4, 8, 7],\\n            [7, 4, 7, 7],\\n            [9, 4, 8, 7],\\n            [3, 3, 3, 3] ]\\n\\nExample 2:\\nInput: grid = [[0,0,0],[0,0,0],[0,0,0]]\\nOutput: 0\\nExplanation: Increasing the height of any building will result in the skyline changing.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nn == grid.length\\nn == grid[r].length\\n2 <= n <= 50\\n0 <= grid[r][c] <= 100\\n\\n\""
    },
    {
        "URL": "https://leetcode.com/problems/soup-servings",
        "Title": "Soup Servings ",
        "Description": "b\"There are two types of soup: type A and type B. Initially, we have n ml of each type of soup. There are four kinds of operations:\\n\\nServe 100 ml of soup A and 0 ml of soup B,\\nServe 75 ml of soup A and 25 ml of soup B,\\nServe 50 ml of soup A and 50 ml of soup B, and\\nServe 25 ml of soup A and 75 ml of soup B.\\n\\nWhen we serve some soup, we give it to someone, and we no longer have it. Each turn, we will choose from the four operations with an equal probability 0.25. If the remaining volume of soup is not enough to complete the operation, we will serve as much as possible. We stop once we no longer have some quantity of both types of soup.\\nNote that we do not have an operation where all 100 ml's of soup B are used first.\\nReturn the probability that soup A will be empty first, plus half the probability that A and B become empty at the same time. Answers within 10-5 of the actual answer will be accepted.\\n\\xc2\\xa0\\nExample 1:\\nInput: n = 50\\nOutput: 0.62500\\nExplanation: If we choose the first two operations, A will become empty first.\\nFor the third operation, A and B will become empty at the same time.\\nFor the fourth operation, B will become empty first.\\nSo the total probability of A becoming empty first plus half the probability that A and B become empty at the same time, is 0.25 * (1 + 1 + 0.5 + 0) = 0.625.\\n\\nExample 2:\\nInput: n = 100\\nOutput: 0.71875\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n0 <= n <= 109\\n\\n\""
    },
    {
        "URL": "https://leetcode.com/problems/expressive-words",
        "Title": "Expressive Words ",
        "Description": "b'Sometimes people repeat letters to represent extra feeling. For example:\\n\\n\"hello\" -> \"heeellooo\"\\n\"hi\" -> \"hiiii\"\\n\\nIn these strings like \"heeellooo\", we have groups of adjacent letters that are all the same: \"h\", \"eee\", \"ll\", \"ooo\".\\nYou are given a string s and an array of query strings words. A query word is stretchy if it can be made to be equal to s by any number of applications of the following extension operation: choose a group consisting of characters c, and add some number of characters c to the group so that the size of the group is three or more.\\n\\nFor example, starting with \"hello\", we could do an extension on the group \"o\" to get \"hellooo\", but we cannot get \"helloo\" since the group \"oo\" has a size less than three. Also, we could do another extension like \"ll\" -> \"lllll\" to get \"helllllooo\". If s = \"helllllooo\", then the query word \"hello\" would be stretchy because of these two extension operations: query = \"hello\" -> \"hellooo\" -> \"helllllooo\" = s.\\n\\nReturn the number of query strings that are stretchy.\\n\\xc2\\xa0\\nExample 1:\\nInput: s = \"heeellooo\", words = [\"hello\", \"hi\", \"helo\"]\\nOutput: 1\\nExplanation: \\nWe can extend \"e\" and \"o\" in the word \"hello\" to get \"heeellooo\".\\nWe can\\'t extend \"helo\" to get \"heeellooo\" because the group \"ll\" is not size 3 or more.\\n\\nExample 2:\\nInput: s = \"zzzzzyyyyy\", words = [\"zzyy\",\"zy\",\"zyy\"]\\nOutput: 3\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= s.length, words.length <= 100\\n1 <= words[i].length <= 100\\ns and words[i] consist of lowercase letters.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/chalkboard-xor-game",
        "Title": "Chalkboard XOR Game ",
        "Description": "b'You are given an array of integers nums represents the numbers written on a chalkboard.\\nAlice and Bob take turns erasing exactly one number from the chalkboard, with Alice starting first. If erasing a number causes the bitwise XOR of all the elements of the chalkboard to become 0, then that player loses. The bitwise XOR of one element is that element itself, and the bitwise XOR of no elements is 0.\\nAlso, if any player starts their turn with the bitwise XOR of all the elements of the chalkboard equal to 0, then that player wins.\\nReturn true if and only if Alice wins the game, assuming both players play optimally.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [1,1,2]\\nOutput: false\\nExplanation: \\nAlice has two choices: erase 1 or erase 2. \\nIf she erases 1, the nums array becomes [1, 2]. The bitwise XOR of all the elements of the chalkboard is 1 XOR 2 = 3. Now Bob can remove any element he wants, because Alice will be the one to erase the last element and she will lose. \\nIf Alice erases 2 first, now nums become [1, 1]. The bitwise XOR of all the elements of the chalkboard is 1 XOR 1 = 0. Alice will lose.\\n\\nExample 2:\\nInput: nums = [0,1]\\nOutput: true\\n\\nExample 3:\\nInput: nums = [1,2,3]\\nOutput: true\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 1000\\n0 <= nums[i] < 216\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/subdomain-visit-count",
        "Title": "Subdomain Visit Count ",
        "Description": "b'A website domain \"discuss.leetcode.com\" consists of various subdomains. At the top level, we have \"com\", at the next level, we have \"leetcode.com\"\\xc2\\xa0and at the lowest level, \"discuss.leetcode.com\". When we visit a domain like \"discuss.leetcode.com\", we will also visit the parent domains \"leetcode.com\" and \"com\" implicitly.\\nA count-paired domain is a domain that has one of the two formats \"rep d1.d2.d3\" or \"rep d1.d2\" where rep is the number of visits to the domain and d1.d2.d3 is the domain itself.\\n\\nFor example, \"9001 discuss.leetcode.com\" is a count-paired domain that indicates that discuss.leetcode.com was visited 9001 times.\\n\\nGiven an array of count-paired domains cpdomains, return an array of the count-paired domains of each subdomain in the input. You may return the answer in any order.\\n\\xc2\\xa0\\nExample 1:\\nInput: cpdomains = [\"9001 discuss.leetcode.com\"]\\nOutput: [\"9001 leetcode.com\",\"9001 discuss.leetcode.com\",\"9001 com\"]\\nExplanation: We only have one website domain: \"discuss.leetcode.com\".\\nAs discussed above, the subdomain \"leetcode.com\" and \"com\" will also be visited. So they will all be visited 9001 times.\\n\\nExample 2:\\nInput: cpdomains = [\"900 google.mail.com\", \"50 yahoo.com\", \"1 intel.mail.com\", \"5 wiki.org\"]\\nOutput: [\"901 mail.com\",\"50 yahoo.com\",\"900 google.mail.com\",\"5 wiki.org\",\"5 org\",\"1 intel.mail.com\",\"951 com\"]\\nExplanation: We will visit \"google.mail.com\" 900 times, \"yahoo.com\" 50 times, \"intel.mail.com\" once and \"wiki.org\" 5 times.\\nFor the subdomains, we will visit \"mail.com\" 900 + 1 = 901 times, \"com\" 900 + 50 + 1 = 951 times, and \"org\" 5 times.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= cpdomain.length <= 100\\n1 <= cpdomain[i].length <= 100\\ncpdomain[i] follows either the \"repi d1i.d2i.d3i\" format or the \"repi d1i.d2i\" format.\\nrepi is an integer in the range [1, 104].\\nd1i, d2i, and d3i consist of lowercase English letters.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/largest-triangle-area",
        "Title": "Largest Triangle Area ",
        "Description": "b'Given an array of points on the X-Y plane points where points[i] = [xi, yi], return the area of the largest triangle that can be formed by any three different points. Answers within 10-5 of the actual answer will be accepted.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: points = [[0,0],[0,1],[1,0],[0,2],[2,0]]\\nOutput: 2.00000\\nExplanation: The five points are shown in the above figure. The red triangle is the largest.\\n\\nExample 2:\\nInput: points = [[1,0],[0,0],[0,1]]\\nOutput: 0.50000\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n3 <= points.length <= 50\\n-50 <= xi, yi <= 50\\nAll the given points are unique.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/largest-sum-of-averages",
        "Title": "Largest Sum of Averages ",
        "Description": "b'You are given an integer array nums and an integer k. You can partition the array into at most k non-empty adjacent subarrays. The score of a partition is the sum of the averages of each subarray.\\nNote that the partition must use every integer in nums, and that the score is not necessarily an integer.\\nReturn the maximum score you can achieve of all the possible partitions. Answers within 10-6 of the actual answer will be accepted.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [9,1,2,3,9], k = 3\\nOutput: 20.00000\\nExplanation: \\nThe best choice is to partition nums into [9], [1, 2, 3], [9]. The answer is 9 + (1 + 2 + 3) / 3 + 9 = 20.\\nWe could have also partitioned nums into [9, 1], [2], [3, 9], for example.\\nThat partition would lead to a score of 5 + 2 + 6 = 13, which is worse.\\n\\nExample 2:\\nInput: nums = [1,2,3,4,5,6,7], k = 4\\nOutput: 20.50000\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 100\\n1 <= nums[i] <= 104\\n1 <= k <= nums.length\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/binary-tree-pruning",
        "Title": "Binary Tree Pruning ",
        "Description": "b'Given the root of a binary tree, return the same tree where every subtree (of the given tree) not containing a 1 has been removed.\\nA subtree of a node node is node plus every node that is a descendant of node.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: root = [1,null,0,0,1]\\nOutput: [1,null,0,null,1]\\nExplanation: \\nOnly the red nodes satisfy the property \"every subtree not containing a 1\".\\nThe diagram on the right represents the answer.\\n\\nExample 2:\\n\\nInput: root = [1,0,1,0,0,0,1]\\nOutput: [1,null,1,null,1]\\n\\nExample 3:\\n\\nInput: root = [1,1,0,1,1,0,1,0]\\nOutput: [1,1,0,1,1,null,1]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of nodes in the tree is in the range [1, 200].\\nNode.val is either 0 or 1.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/bus-routes",
        "Title": "Bus Routes ",
        "Description": "b'You are given an array routes representing bus routes where routes[i] is a bus route that the ith bus repeats forever.\\n\\nFor example, if routes[0] = [1, 5, 7], this means that the 0th bus travels in the sequence 1 -> 5 -> 7 -> 1 -> 5 -> 7 -> 1 -> ... forever.\\n\\nYou will start at the bus stop source (You are not on any bus initially), and you want to go to the bus stop target. You can travel between bus stops by buses only.\\nReturn the least number of buses you must take to travel from source to target. Return -1 if it is not possible.\\n\\xc2\\xa0\\nExample 1:\\nInput: routes = [[1,2,7],[3,6,7]], source = 1, target = 6\\nOutput: 2\\nExplanation: The best strategy is take the first bus to the bus stop 7, then take the second bus to the bus stop 6.\\n\\nExample 2:\\nInput: routes = [[7,12],[4,5,15],[6],[15,19],[9,12,13]], source = 15, target = 12\\nOutput: -1\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= routes.length <= 500.\\n1 <= routes[i].length <= 105\\nAll the values of routes[i] are unique.\\nsum(routes[i].length) <= 105\\n0 <= routes[i][j] < 106\\n0 <= source, target < 106\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/ambiguous-coordinates",
        "Title": "Ambiguous Coordinates ",
        "Description": "b'We had some 2-dimensional coordinates, like \"(1, 3)\" or \"(2, 0.5)\". Then, we removed all commas, decimal points, and spaces and ended up with the string s.\\n\\nFor example, \"(1, 3)\" becomes s = \"(13)\" and \"(2, 0.5)\" becomes s = \"(205)\".\\n\\nReturn a list of strings representing all possibilities for what our original coordinates could have been.\\nOur original representation never had extraneous zeroes, so we never started with numbers like \"00\", \"0.0\", \"0.00\", \"1.0\", \"001\", \"00.01\", or any other number that can be represented with fewer digits. Also, a decimal point within a number never occurs without at least one digit occurring before it, so we never started with numbers like \".1\".\\nThe final answer list can be returned in any order. All coordinates in the final answer have exactly one space between them (occurring after the comma.)\\n\\xc2\\xa0\\nExample 1:\\nInput: s = \"(123)\"\\nOutput: [\"(1, 2.3)\",\"(1, 23)\",\"(1.2, 3)\",\"(12, 3)\"]\\n\\nExample 2:\\nInput: s = \"(0123)\"\\nOutput: [\"(0, 1.23)\",\"(0, 12.3)\",\"(0, 123)\",\"(0.1, 2.3)\",\"(0.1, 23)\",\"(0.12, 3)\"]\\nExplanation: 0.0, 00, 0001 or 00.01 are not allowed.\\n\\nExample 3:\\nInput: s = \"(00011)\"\\nOutput: [\"(0, 0.011)\",\"(0.001, 1)\"]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n4 <= s.length <= 12\\ns[0] == \\'(\\' and s[s.length - 1] == \\')\\'.\\nThe rest of s are digits.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/linked-list-components",
        "Title": "Linked List Components ",
        "Description": "b'You are given the head of a linked list containing unique integer values and an integer array nums that is a subset of the linked list values.\\nReturn the number of connected components in nums where two values are connected if they appear consecutively in the linked list.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: head = [0,1,2,3], nums = [0,1,3]\\nOutput: 2\\nExplanation: 0 and 1 are connected, so [0, 1] and [3] are the two connected components.\\n\\nExample 2:\\n\\nInput: head = [0,1,2,3,4], nums = [0,3,1,4]\\nOutput: 2\\nExplanation: 0 and 1 are connected, 3 and 4 are connected, so [0, 1] and [3, 4] are the two connected components.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of nodes in the linked list is n.\\n1 <= n <= 104\\n0 <= Node.val < n\\nAll the values Node.val are unique.\\n1 <= nums.length <= n\\n0 <= nums[i] < n\\nAll the values of nums are unique.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/race-car",
        "Title": "Race Car ",
        "Description": "b'Your car starts at position 0 and speed +1 on an infinite number line. Your car can go into negative positions. Your car drives automatically according to a sequence of instructions \\'A\\' (accelerate) and \\'R\\' (reverse):\\n\\nWhen you get an instruction \\'A\\', your car does the following:\\n\\n\\t\\nposition += speed\\nspeed *= 2\\n\\n\\nWhen you get an instruction \\'R\\', your car does the following:\\n\\t\\nIf your speed is positive then speed = -1\\notherwise speed = 1\\n\\n\\tYour position stays the same.\\n\\nFor example, after commands \"AAR\", your car goes to positions 0 --> 1 --> 3 --> 3, and your speed goes to 1 --> 2 --> 4 --> -1.\\nGiven a target position target, return the length of the shortest sequence of instructions to get there.\\n\\xc2\\xa0\\nExample 1:\\nInput: target = 3\\nOutput: 2\\nExplanation: \\nThe shortest instruction sequence is \"AA\".\\nYour position goes from 0 --> 1 --> 3.\\n\\nExample 2:\\nInput: target = 6\\nOutput: 5\\nExplanation: \\nThe shortest instruction sequence is \"AAARA\".\\nYour position goes from 0 --> 1 --> 3 --> 7 --> 7 --> 6.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= target <= 104\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/most-common-word",
        "Title": "Most Common Word ",
        "Description": "b'Given a string paragraph and a string array of the banned words banned, return the most frequent word that is not banned. It is guaranteed there is at least one word that is not banned, and that the answer is unique.\\nThe words in paragraph are case-insensitive and the answer should be returned in lowercase.\\n\\xc2\\xa0\\nExample 1:\\nInput: paragraph = \"Bob hit a ball, the hit BALL flew far after it was hit.\", banned = [\"hit\"]\\nOutput: \"ball\"\\nExplanation: \\n\"hit\" occurs 3 times, but it is a banned word.\\n\"ball\" occurs twice (and no other word does), so it is the most frequent non-banned word in the paragraph. \\nNote that words in the paragraph are not case sensitive,\\nthat punctuation is ignored (even if adjacent to words, such as \"ball,\"), \\nand that \"hit\" isn\\'t the answer even though it occurs more because it is banned.\\n\\nExample 2:\\nInput: paragraph = \"a.\", banned = []\\nOutput: \"a\"\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= paragraph.length <= 1000\\nparagraph consists of English letters, space \\' \\', or one of the symbols: \"!?\\',;.\".\\n0 <= banned.length <= 100\\n1 <= banned[i].length <= 10\\nbanned[i] consists of only lowercase English letters.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/short-encoding-of-words",
        "Title": "Short Encoding of Words ",
        "Description": "b'A valid encoding of an array of words is any reference string s and array of indices indices such that:\\n\\nwords.length == indices.length\\nThe reference string s ends with the \\'#\\' character.\\nFor each index indices[i], the substring of s starting from indices[i] and up to (but not including) the next \\'#\\' character is equal to words[i].\\n\\nGiven an array of words, return the length of the shortest reference string s possible of any valid encoding of words.\\n\\xc2\\xa0\\nExample 1:\\nInput: words = [\"time\", \"me\", \"bell\"]\\nOutput: 10\\nExplanation: A valid encoding would be s = \"time#bell#\" and indices = [0, 2, 5].\\nwords[0] = \"time\", the substring of s starting from indices[0] = 0 to the next \\'#\\' is underlined in \"time#bell#\"\\nwords[1] = \"me\", the substring of s starting from indices[1] = 2 to the next \\'#\\' is underlined in \"time#bell#\"\\nwords[2] = \"bell\", the substring of s starting from indices[2] = 5 to the next \\'#\\' is underlined in \"time#bell#\"\\n\\nExample 2:\\nInput: words = [\"t\"]\\nOutput: 2\\nExplanation: A valid encoding would be s = \"t#\" and indices = [0].\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= words.length <= 2000\\n1 <= words[i].length <= 7\\nwords[i] consists of only lowercase letters.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/shortest-distance-to-a-character",
        "Title": "Shortest Distance to a Character ",
        "Description": "b'Given a string s and a character c that occurs in s, return an array of integers answer where answer.length == s.length and answer[i] is the distance from index i to the closest occurrence of character c in s.\\nThe distance between two indices i and j is abs(i - j), where abs is the absolute value function.\\n\\xc2\\xa0\\nExample 1:\\nInput: s = \"loveleetcode\", c = \"e\"\\nOutput: [3,2,1,0,1,0,0,1,2,2,1,0]\\nExplanation: The character \\'e\\' appears at indices 3, 5, 6, and 11 (0-indexed).\\nThe closest occurrence of \\'e\\' for index 0 is at index 3, so the distance is abs(0 - 3) = 3.\\nThe closest occurrence of \\'e\\' for index 1 is at index 3, so the distance is abs(1 - 3) = 2.\\nFor index 4, there is a tie between the \\'e\\' at index 3 and the \\'e\\' at index 5, but the distance is still the same: abs(4 - 3) == abs(4 - 5) = 1.\\nThe closest occurrence of \\'e\\' for index 8 is at index 6, so the distance is abs(8 - 6) = 2.\\n\\nExample 2:\\nInput: s = \"aaab\", c = \"b\"\\nOutput: [3,2,1,0]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= s.length <= 104\\ns[i] and c are lowercase English letters.\\nIt is guaranteed that c occurs at least once in s.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/card-flipping-game",
        "Title": "Card Flipping Game ",
        "Description": "b'You are given two 0-indexed integer arrays fronts and backs of length n, where the ith card has the positive integer fronts[i] printed on the front and backs[i] printed on the back. Initially, each card is placed on a table such that the front number is facing up and the other is facing down. You may flip over any number of cards (possibly zero).\\nAfter flipping the cards, an integer is considered good if it is facing down on some card and not facing up on any card.\\nReturn the minimum possible good integer after flipping the cards. If there are no good integers, return 0.\\n\\xc2\\xa0\\nExample 1:\\nInput: fronts = [1,2,4,4,7], backs = [1,3,4,1,3]\\nOutput: 2\\nExplanation:\\nIf we flip the second card, the face up numbers are [1,3,4,4,7] and the face down are [1,2,4,1,3].\\n2 is the minimum good integer as it appears facing down but not facing up.\\nIt can be shown that 2 is the minimum possible good integer obtainable after flipping some cards.\\n\\nExample 2:\\nInput: fronts = [1], backs = [1]\\nOutput: 0\\nExplanation:\\nThere are no good integers no matter how we flip the cards, so we return 0.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nn == fronts.length == backs.length\\n1 <= n <= 1000\\n1 <= fronts[i], backs[i] <= 2000\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/binary-trees-with-factors",
        "Title": "Binary Trees With Factors ",
        "Description": "b\"Given an array of unique integers, arr, where each integer arr[i] is strictly greater than 1.\\nWe make a binary tree using these integers, and each number may be used for any number of times. Each non-leaf node's value should be equal to the product of the values of its children.\\nReturn the number of binary trees we can make. The answer may be too large so return the answer modulo 109 + 7.\\n\\xc2\\xa0\\nExample 1:\\nInput: arr = [2,4]\\nOutput: 3\\nExplanation: We can make these trees: [2], [4], [4, 2, 2]\\nExample 2:\\nInput: arr = [2,4,5,10]\\nOutput: 7\\nExplanation: We can make these trees: [2], [4], [5], [10], [4, 2, 2], [10, 2, 5], [10, 5, 2].\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= arr.length <= 1000\\n2 <= arr[i] <= 109\\nAll the values of arr are unique.\\n\\n\""
    },
    {
        "URL": "https://leetcode.com/problems/goat-latin",
        "Title": "Goat Latin ",
        "Description": "b'You are given a string sentence that consist of words separated by spaces. Each word consists of lowercase and uppercase letters only.\\nWe would like to convert the sentence to \"Goat Latin\" (a made-up language similar to Pig Latin.) The rules of Goat Latin are as follows:\\n\\nIf a word begins with a vowel (\\'a\\', \\'e\\', \\'i\\', \\'o\\', or \\'u\\'), append \"ma\" to the end of the word.\\n\\n\\t\\nFor example, the word \"apple\" becomes \"applema\".\\n\\n\\nIf a word begins with a consonant (i.e., not a vowel), remove the first letter and append it to the end, then add \"ma\".\\n\\t\\nFor example, the word \"goat\" becomes \"oatgma\".\\n\\n\\nAdd one letter \\'a\\' to the end of each word per its word index in the sentence, starting with 1.\\n\\t\\nFor example, the first word gets \"a\" added to the end, the second word gets \"aa\" added to the end, and so on.\\n\\n\\n\\nReturn the final sentence representing the conversion from sentence to Goat Latin.\\n\\xc2\\xa0\\nExample 1:\\nInput: sentence = \"I speak Goat Latin\"\\nOutput: \"Imaa peaksmaaa oatGmaaaa atinLmaaaaa\"\\nExample 2:\\nInput: sentence = \"The quick brown fox jumped over the lazy dog\"\\nOutput: \"heTmaa uickqmaaa rownbmaaaa oxfmaaaaa umpedjmaaaaaa overmaaaaaaa hetmaaaaaaaa azylmaaaaaaaaa ogdmaaaaaaaaaa\"\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= sentence.length <= 150\\nsentence consists of English letters and spaces.\\nsentence has no leading or trailing spaces.\\nAll the words in sentence are separated by a single space.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/friends-of-appropriate-ages",
        "Title": "Friends Of Appropriate Ages ",
        "Description": "b'There are n persons on a social media website. You are given an integer array ages where ages[i] is the age of the ith person.\\nA Person x will not send a friend request to a person y (x != y) if any of the following conditions is true:\\n\\nage[y] <= 0.5 * age[x] + 7\\nage[y] > age[x]\\nage[y] > 100 && age[x] < 100\\n\\nOtherwise, x will send a friend request to y.\\nNote that if x sends a request to y, y will not necessarily send a request to x. Also, a person will not send a friend request to themself.\\nReturn the total number of friend requests made.\\n\\xc2\\xa0\\nExample 1:\\nInput: ages = [16,16]\\nOutput: 2\\nExplanation: 2 people friend request each other.\\n\\nExample 2:\\nInput: ages = [16,17,18]\\nOutput: 2\\nExplanation: Friend requests are made 17 -> 16, 18 -> 17.\\n\\nExample 3:\\nInput: ages = [20,30,100,110,120]\\nOutput: 3\\nExplanation: Friend requests are made 110 -> 100, 120 -> 110, 120 -> 100.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nn == ages.length\\n1 <= n <= 2 * 104\\n1 <= ages[i] <= 120\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/most-profit-assigning-work",
        "Title": "Most Profit Assigning Work ",
        "Description": "b'You have n jobs and m workers. You are given three arrays: difficulty, profit, and worker where:\\n\\ndifficulty[i] and profit[i] are the difficulty and the profit of the ith job, and\\nworker[j] is the ability of jth worker (i.e., the jth worker can only complete a job with difficulty at most worker[j]).\\n\\nEvery worker can be assigned at most one job, but one job can be completed multiple times.\\n\\nFor example, if three workers attempt the same job that pays $1, then the total profit will be $3. If a worker cannot complete any job, their profit is $0.\\n\\nReturn the maximum profit we can achieve after assigning the workers to the jobs.\\n\\xc2\\xa0\\nExample 1:\\nInput: difficulty = [2,4,6,8,10], profit = [10,20,30,40,50], worker = [4,5,6,7]\\nOutput: 100\\nExplanation: Workers are assigned jobs of difficulty [4,4,6,6] and they get a profit of [20,20,30,30] separately.\\n\\nExample 2:\\nInput: difficulty = [85,47,57], profit = [24,66,99], worker = [40,25,25]\\nOutput: 0\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nn == difficulty.length\\nn == profit.length\\nm == worker.length\\n1 <= n, m <= 104\\n1 <= difficulty[i], profit[i], worker[i] <= 105\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/making-a-large-island",
        "Title": "Making A Large Island ",
        "Description": "b\"You are given an n x n binary matrix grid. You are allowed to change at most one 0 to be 1.\\nReturn the size of the largest island in grid after applying this operation.\\nAn island is a 4-directionally connected group of 1s.\\n\\xc2\\xa0\\nExample 1:\\nInput: grid = [[1,0],[0,1]]\\nOutput: 3\\nExplanation: Change one 0 to 1 and connect two 1s, then we get an island with area = 3.\\n\\nExample 2:\\nInput: grid = [[1,1],[1,0]]\\nOutput: 4\\nExplanation: Change the 0 to 1 and make the island bigger, only one island with area = 4.\\nExample 3:\\nInput: grid = [[1,1],[1,1]]\\nOutput: 4\\nExplanation: Can't change any 0 to 1, only one island with area = 4.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nn == grid.length\\nn == grid[i].length\\n1 <= n <= 500\\ngrid[i][j] is either 0 or 1.\\n\""
    },
    {
        "URL": "https://leetcode.com/problems/count-unique-characters-of-all-substrings-of-a-given-string",
        "Title": "Count Unique Characters of All Substrings of a Given String ",
        "Description": "b'Let\\'s define a function countUniqueChars(s) that returns the number of unique characters on s.\\n\\nFor example, calling countUniqueChars(s) if s = \"LEETCODE\" then \"L\", \"T\", \"C\", \"O\", \"D\" are the unique characters since they appear only once in s, therefore countUniqueChars(s) = 5.\\n\\nGiven a string s, return the sum of countUniqueChars(t) where t is a substring of s. The test cases are generated such that the answer fits in a 32-bit integer.\\nNotice that some substrings can be repeated so in this case you have to count the repeated ones too.\\n\\xc2\\xa0\\nExample 1:\\nInput: s = \"ABC\"\\nOutput: 10\\nExplanation: All possible substrings are: \"A\",\"B\",\"C\",\"AB\",\"BC\" and \"ABC\".\\nEvery substring is composed with only unique letters.\\nSum of lengths of all substring is 1 + 1 + 1 + 2 + 2 + 3 = 10\\n\\nExample 2:\\nInput: s = \"ABA\"\\nOutput: 8\\nExplanation: The same as example 1, except countUniqueChars(\"ABA\") = 1.\\n\\nExample 3:\\nInput: s = \"LEETCODE\"\\nOutput: 92\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= s.length <= 105\\ns consists of uppercase English letters only.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/consecutive-numbers-sum",
        "Title": "Consecutive Numbers Sum ",
        "Description": "b'Given an integer n, return the number of ways you can write n as the sum of consecutive positive integers.\\n\\xc2\\xa0\\nExample 1:\\nInput: n = 5\\nOutput: 2\\nExplanation: 5 = 2 + 3\\n\\nExample 2:\\nInput: n = 9\\nOutput: 3\\nExplanation: 9 = 4 + 5 = 2 + 3 + 4\\n\\nExample 3:\\nInput: n = 15\\nOutput: 4\\nExplanation: 15 = 8 + 7 = 4 + 5 + 6 = 1 + 2 + 3 + 4 + 5\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= n <= 109\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/positions-of-large-groups",
        "Title": "Positions of Large Groups ",
        "Description": "b'In a string s\\xc2\\xa0of lowercase letters, these letters form consecutive groups of the same character.\\nFor example, a string like s = \"abbxxxxzyy\" has the groups \"a\", \"bb\", \"xxxx\", \"z\", and\\xc2\\xa0\"yy\".\\nA group is identified by an interval\\xc2\\xa0[start, end], where\\xc2\\xa0start\\xc2\\xa0and\\xc2\\xa0end\\xc2\\xa0denote the start and end\\xc2\\xa0indices (inclusive) of the group. In the above example,\\xc2\\xa0\"xxxx\"\\xc2\\xa0has the interval\\xc2\\xa0[3,6].\\nA group is considered\\xc2\\xa0large\\xc2\\xa0if it has 3 or more characters.\\nReturn\\xc2\\xa0the intervals of every large group sorted in\\xc2\\xa0increasing order by start index.\\n\\xc2\\xa0\\nExample 1:\\nInput: s = \"abbxxxxzzy\"\\nOutput: [[3,6]]\\nExplanation: \"xxxx\" is the only large group with start index 3 and end index 6.\\n\\nExample 2:\\nInput: s = \"abc\"\\nOutput: []\\nExplanation: We have groups \"a\", \"b\", and \"c\", none of which are large groups.\\n\\nExample 3:\\nInput: s = \"abcdddeeeeaabbbcd\"\\nOutput: [[3,5],[6,9],[12,14]]\\nExplanation: The large groups are \"ddd\", \"eeee\", and \"bbb\".\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= s.length <= 1000\\ns contains lowercase English letters only.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/masking-personal-information",
        "Title": "Masking Personal Information ",
        "Description": "b'You are given a personal information string s, representing either an email address or a phone number. Return the masked personal information using the below rules.\\nEmail address:\\nAn email address is:\\n\\nA name consisting of uppercase and lowercase English letters, followed by\\nThe \\'@\\' symbol, followed by\\nThe domain consisting of uppercase and lowercase English letters with a dot \\'.\\' somewhere in the middle (not the first or last character).\\n\\nTo mask an email:\\n\\nThe uppercase letters in the name and domain must be converted to lowercase letters.\\nThe middle letters of the name (i.e., all but the first and last letters) must be replaced by 5 asterisks \"*****\".\\n\\nPhone number:\\nA phone number is formatted as follows:\\n\\nThe phone number contains 10-13 digits.\\nThe last 10 digits make up the local number.\\nThe remaining 0-3 digits, in the beginning, make up the country code.\\nSeparation characters from the set {\\'+\\', \\'-\\', \\'(\\', \\')\\', \\' \\'} separate the above digits in some way.\\n\\nTo mask a phone number:\\n\\nRemove all separation characters.\\nThe masked phone number should have the form:\\n\\t\\n\"***-***-XXXX\" if the country code has 0 digits.\\n\"+*-***-***-XXXX\" if the country code has 1 digit.\\n\"+**-***-***-XXXX\" if the country code has 2 digits.\\n\"+***-***-***-XXXX\" if the country code has 3 digits.\\n\\n\\n\"XXXX\" is the last 4 digits of the local number.\\n\\n\\xc2\\xa0\\nExample 1:\\nInput: s = \"LeetCode@LeetCode.com\"\\nOutput: \"l*****e@leetcode.com\"\\nExplanation: s is an email address.\\nThe name and domain are converted to lowercase, and the middle of the name is replaced by 5 asterisks.\\n\\nExample 2:\\nInput: s = \"AB@qq.com\"\\nOutput: \"a*****b@qq.com\"\\nExplanation: s is an email address.\\nThe name and domain are converted to lowercase, and the middle of the name is replaced by 5 asterisks.\\nNote that even though \"ab\" is 2 characters, it still must have 5 asterisks in the middle.\\n\\nExample 3:\\nInput: s = \"1(234)567-890\"\\nOutput: \"***-***-7890\"\\nExplanation: s is a phone number.\\nThere are 10 digits, so the local number is 10 digits and the country code is 0 digits.\\nThus, the resulting masked number is \"***-***-7890\".\\n\\n\\xc2\\xa0\\nConstraints:\\n\\ns is either a valid email or a phone number.\\nIf s is an email:\\n\\t\\n8 <= s.length <= 40\\ns consists of uppercase and lowercase English letters and exactly one \\'@\\' symbol and \\'.\\' symbol.\\n\\n\\nIf s is a phone number:\\n\\t\\n10 <= s.length <= 20\\ns consists of digits, spaces, and the symbols \\'(\\', \\')\\', \\'-\\', and \\'+\\'.\\n\\n\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/flipping-an-image",
        "Title": "Flipping an Image ",
        "Description": "b'Given an n x n binary matrix image, flip the image horizontally, then invert it, and return the resulting image.\\nTo flip an image horizontally means that each row of the image is reversed.\\n\\nFor example, flipping [1,1,0] horizontally results in [0,1,1].\\n\\nTo invert an image means that each 0 is replaced by 1, and each 1 is replaced by 0.\\n\\nFor example, inverting [0,1,1] results in [1,0,0].\\n\\n\\xc2\\xa0\\nExample 1:\\nInput: image = [[1,1,0],[1,0,1],[0,0,0]]\\nOutput: [[1,0,0],[0,1,0],[1,1,1]]\\nExplanation: First reverse each row: [[0,1,1],[1,0,1],[0,0,0]].\\nThen, invert the image: [[1,0,0],[0,1,0],[1,1,1]]\\n\\nExample 2:\\nInput: image = [[1,1,0,0],[1,0,0,1],[0,1,1,1],[1,0,1,0]]\\nOutput: [[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]]\\nExplanation: First reverse each row: [[0,0,1,1],[1,0,0,1],[1,1,1,0],[0,1,0,1]].\\nThen invert the image: [[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nn == image.length\\nn == image[i].length\\n1 <= n <= 20\\nimages[i][j] is either 0 or 1.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/find-and-replace-in-string",
        "Title": "Find And Replace in String ",
        "Description": "b'You are given a 0-indexed string s that you must perform k replacement operations on. The replacement operations are given as three 0-indexed parallel arrays, indices, sources, and targets, all of length k.\\nTo complete the ith replacement operation:\\n\\nCheck if the substring sources[i] occurs at index indices[i] in the original string s.\\nIf it does not occur, do nothing.\\nOtherwise if it does occur, replace that substring with targets[i].\\n\\nFor example, if s = \"abcd\", indices[i] = 0, sources[i] = \"ab\", and targets[i] = \"eee\", then the result of this replacement will be \"eeecd\".\\nAll replacement operations must occur simultaneously, meaning the replacement operations should not affect the indexing of each other. The testcases will be generated such that the replacements will not overlap.\\n\\nFor example, a testcase with s = \"abc\", indices = [0, 1], and sources = [\"ab\",\"bc\"] will not be generated because the \"ab\" and \"bc\" replacements overlap.\\n\\nReturn the resulting string after performing all replacement operations on s.\\nA substring is a contiguous sequence of characters in a string.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: s = \"abcd\", indices = [0, 2], sources = [\"a\", \"cd\"], targets = [\"eee\", \"ffff\"]\\nOutput: \"eeebffff\"\\nExplanation:\\n\"a\" occurs at index 0 in s, so we replace it with \"eee\".\\n\"cd\" occurs at index 2 in s, so we replace it with \"ffff\".\\n\\nExample 2:\\n\\nInput: s = \"abcd\", indices = [0, 2], sources = [\"ab\",\"ec\"], targets = [\"eee\",\"ffff\"]\\nOutput: \"eeecd\"\\nExplanation:\\n\"ab\" occurs at index 0 in s, so we replace it with \"eee\".\\n\"ec\" does not occur at index 2 in s, so we do nothing.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= s.length <= 1000\\nk == indices.length == sources.length == targets.length\\n1 <= k <= 100\\n0 <= indexes[i] < s.length\\n1 <= sources[i].length, targets[i].length <= 50\\ns consists of only lowercase English letters.\\nsources[i] and targets[i] consist of only lowercase English letters.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/sum-of-distances-in-tree",
        "Title": "Sum of Distances in Tree ",
        "Description": "b'There is an undirected connected tree with n nodes labeled from 0 to n - 1 and n - 1 edges.\\nYou are given the integer n and the array edges where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the tree.\\nReturn an array answer of length n where answer[i] is the sum of the distances between the ith node in the tree and all other nodes.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: n = 6, edges = [[0,1],[0,2],[2,3],[2,4],[2,5]]\\nOutput: [8,12,6,10,10,10]\\nExplanation: The tree is shown above.\\nWe can see that dist(0,1) + dist(0,2) + dist(0,3) + dist(0,4) + dist(0,5)\\nequals 1 + 1 + 2 + 2 + 2 = 8.\\nHence, answer[0] = 8, and so on.\\n\\nExample 2:\\n\\nInput: n = 1, edges = []\\nOutput: [0]\\n\\nExample 3:\\n\\nInput: n = 2, edges = [[1,0]]\\nOutput: [1,1]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= n <= 3 * 104\\nedges.length == n - 1\\nedges[i].length == 2\\n0 <= ai, bi < n\\nai != bi\\nThe given input represents a valid tree.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/image-overlap",
        "Title": "Image Overlap ",
        "Description": "b'You are given two images, img1 and img2, represented as binary, square matrices of size n x n. A binary matrix has only 0s and 1s as values.\\nWe translate one image however we choose by sliding all the 1 bits left, right, up, and/or down any number of units. We then place it on top of the other image. We can then calculate the overlap by counting the number of positions that have a 1 in both images.\\nNote also that a translation does not include any kind of rotation. Any 1 bits that are translated outside of the matrix borders are erased.\\nReturn the largest possible overlap.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: img1 = [[1,1,0],[0,1,0],[0,1,0]], img2 = [[0,0,0],[0,1,1],[0,0,1]]\\nOutput: 3\\nExplanation: We translate img1 to right by 1 unit and down by 1 unit.\\n\\nThe number of positions that have a 1 in both images is 3 (shown in red).\\n\\n\\nExample 2:\\nInput: img1 = [[1]], img2 = [[1]]\\nOutput: 1\\n\\nExample 3:\\nInput: img1 = [[0]], img2 = [[0]]\\nOutput: 0\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nn == img1.length == img1[i].length\\nn == img2.length == img2[i].length\\n1 <= n <= 30\\nimg1[i][j] is either 0 or 1.\\nimg2[i][j] is either 0 or 1.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/rectangle-overlap",
        "Title": "Rectangle Overlap ",
        "Description": "b'An axis-aligned rectangle is represented as a list [x1, y1, x2, y2], where (x1, y1) is the coordinate of its bottom-left corner, and (x2, y2) is the coordinate of its top-right corner. Its top and bottom edges are parallel to the X-axis, and its left and right edges are parallel to the Y-axis.\\nTwo rectangles overlap if the area of their intersection is positive. To be clear, two rectangles that only touch at the corner or edges do not overlap.\\nGiven two axis-aligned rectangles rec1 and rec2, return true if they overlap, otherwise return false.\\n\\xc2\\xa0\\nExample 1:\\nInput: rec1 = [0,0,2,2], rec2 = [1,1,3,3]\\nOutput: true\\nExample 2:\\nInput: rec1 = [0,0,1,1], rec2 = [1,0,2,1]\\nOutput: false\\nExample 3:\\nInput: rec1 = [0,0,1,1], rec2 = [2,2,3,3]\\nOutput: false\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nrec1.length == 4\\nrec2.length == 4\\n-109 <= rec1[i], rec2[i] <= 109\\nrec1 and rec2 represent a valid rectangle with a non-zero area.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/new-21-game",
        "Title": "New 21 Game ",
        "Description": "b'Alice plays the following game, loosely based on the card game \"21\".\\nAlice starts with 0 points and draws numbers while she has less than k points. During each draw, she gains an integer number of points randomly from the range [1, maxPts], where maxPts is an integer. Each draw is independent and the outcomes have equal probabilities.\\nAlice stops drawing numbers when she gets k or more points.\\nReturn the probability that Alice has n or fewer points.\\nAnswers within 10-5 of the actual answer are considered accepted.\\n\\xc2\\xa0\\nExample 1:\\nInput: n = 10, k = 1, maxPts = 10\\nOutput: 1.00000\\nExplanation: Alice gets a single card, then stops.\\n\\nExample 2:\\nInput: n = 6, k = 1, maxPts = 10\\nOutput: 0.60000\\nExplanation: Alice gets a single card, then stops.\\nIn 6 out of 10 possibilities, she is at or below 6 points.\\n\\nExample 3:\\nInput: n = 21, k = 17, maxPts = 10\\nOutput: 0.73278\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n0 <= k <= n <= 104\\n1 <= maxPts <= 104\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/push-dominoes",
        "Title": "Push Dominoes ",
        "Description": "b'There are n dominoes in a line, and we place each domino vertically upright. In the beginning, we simultaneously push some of the dominoes either to the left or to the right.\\nAfter each second, each domino that is falling to the left pushes the adjacent domino on the left. Similarly, the dominoes falling to the right push their adjacent dominoes standing on the right.\\nWhen a vertical domino has dominoes falling on it from both sides, it stays still due to the balance of the forces.\\nFor the purposes of this question, we will consider that a falling domino expends no additional force to a falling or already fallen domino.\\nYou are given a string dominoes representing the initial state where:\\n\\ndominoes[i] = \\'L\\', if the ith domino has been pushed to the left,\\ndominoes[i] = \\'R\\', if the ith domino has been pushed to the right, and\\ndominoes[i] = \\'.\\', if the ith domino has not been pushed.\\n\\nReturn a string representing the final state.\\n\\xc2\\xa0\\nExample 1:\\nInput: dominoes = \"RR.L\"\\nOutput: \"RR.L\"\\nExplanation: The first domino expends no additional force on the second domino.\\n\\nExample 2:\\n\\nInput: dominoes = \".L.R...LR..L..\"\\nOutput: \"LL.RR.LLRRLL..\"\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nn == dominoes.length\\n1 <= n <= 105\\ndominoes[i] is either \\'L\\', \\'R\\', or \\'.\\'.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/similar-string-groups",
        "Title": "Similar String Groups ",
        "Description": "b'Two strings X\\xc2\\xa0and Y\\xc2\\xa0are similar if we can swap two letters (in different positions) of X, so that\\xc2\\xa0it equals Y. Also two strings X and Y are similar if they are equal.\\nFor example, \"tars\"\\xc2\\xa0and \"rats\"\\xc2\\xa0are similar (swapping at positions 0 and 2), and \"rats\" and \"arts\" are similar, but \"star\" is not similar to \"tars\", \"rats\", or \"arts\".\\nTogether, these form two connected groups by similarity: {\"tars\", \"rats\", \"arts\"} and {\"star\"}.\\xc2\\xa0 Notice that \"tars\" and \"arts\" are in the same group even though they are not similar.\\xc2\\xa0 Formally, each group is such that a word is in the group if and only if it is similar to at least one other word in the group.\\nWe are given a list strs of strings where every string in strs is an anagram of every other string in strs. How many groups are there?\\n\\xc2\\xa0\\nExample 1:\\nInput: strs = [\"tars\",\"rats\",\"arts\",\"star\"]\\nOutput: 2\\n\\nExample 2:\\nInput: strs = [\"omv\",\"ovm\"]\\nOutput: 1\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= strs.length <= 300\\n1 <= strs[i].length <= 300\\nstrs[i] consists of lowercase letters only.\\nAll words in strs have the same length and are anagrams of each other.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/magic-squares-in-grid",
        "Title": "Magic Squares In Grid ",
        "Description": "b'A 3 x 3 magic square is a 3 x 3 grid filled with distinct numbers from 1 to 9 such that each row, column, and both diagonals all have the same sum.\\nGiven a row x col\\xc2\\xa0grid\\xc2\\xa0of integers, how many 3 x 3 \"magic square\" subgrids are there?\\xc2\\xa0 (Each subgrid is contiguous).\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: grid = [[4,3,8,4],[9,5,1,9],[2,7,6,2]]\\nOutput: 1\\nExplanation: \\nThe following subgrid is a 3 x 3 magic square:\\n\\nwhile this one is not:\\n\\nIn total, there is only one magic square inside the given grid.\\n\\nExample 2:\\nInput: grid = [[8]]\\nOutput: 0\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nrow == grid.length\\ncol == grid[i].length\\n1 <= row, col <= 10\\n0 <= grid[i][j] <= 15\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/keys-and-rooms",
        "Title": "Keys and Rooms ",
        "Description": "b'There are n rooms labeled from 0 to n - 1\\xc2\\xa0and all the rooms are locked except for room 0. Your goal is to visit all the rooms. However, you cannot enter a locked room without having its key.\\nWhen you visit a room, you may find a set of distinct keys in it. Each key has a number on it, denoting which room it unlocks, and you can take all of them with you to unlock the other rooms.\\nGiven an array rooms where rooms[i] is the set of keys that you can obtain if you visited room i, return true if you can visit all the rooms, or false otherwise.\\n\\xc2\\xa0\\nExample 1:\\nInput: rooms = [[1],[2],[3],[]]\\nOutput: true\\nExplanation: \\nWe visit room 0 and pick up key 1.\\nWe then visit room 1 and pick up key 2.\\nWe then visit room 2 and pick up key 3.\\nWe then visit room 3.\\nSince we were able to visit every room, we return true.\\n\\nExample 2:\\nInput: rooms = [[1,3],[3,0,1],[2],[0]]\\nOutput: false\\nExplanation: We can not enter room number 2 since the only key that unlocks it is in that room.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nn == rooms.length\\n2 <= n <= 1000\\n0 <= rooms[i].length <= 1000\\n1 <= sum(rooms[i].length) <= 3000\\n0 <= rooms[i][j] < n\\nAll the values of rooms[i] are unique.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/split-array-into-fibonacci-sequence",
        "Title": "Split Array into Fibonacci Sequence ",
        "Description": "b'You are given a string of digits num, such as \"123456579\". We can split it into a Fibonacci-like sequence [123, 456, 579].\\nFormally, a Fibonacci-like sequence is a list f of non-negative integers such that:\\n\\n0 <= f[i] < 231, (that is, each integer fits in a 32-bit signed integer type),\\nf.length >= 3, and\\nf[i] + f[i + 1] == f[i + 2] for all 0 <= i < f.length - 2.\\n\\nNote that when splitting the string into pieces, each piece must not have extra leading zeroes, except if the piece is the number 0 itself.\\nReturn any Fibonacci-like sequence split from num, or return [] if it cannot be done.\\n\\xc2\\xa0\\nExample 1:\\nInput: num = \"1101111\"\\nOutput: [11,0,11,11]\\nExplanation: The output [110, 1, 111] would also be accepted.\\n\\nExample 2:\\nInput: num = \"112358130\"\\nOutput: []\\nExplanation: The task is impossible.\\n\\nExample 3:\\nInput: num = \"0123\"\\nOutput: []\\nExplanation: Leading zeroes are not allowed, so \"01\", \"2\", \"3\" is not valid.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= num.length <= 200\\nnum contains only digits.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/guess-the-word",
        "Title": "Guess the Word ",
        "Description": "b'This is an interactive problem.\\nYou are given an array of unique strings wordlist where wordlist[i] is 6 letters long, and one word in this list is chosen as secret.\\nYou may call Master.guess(word) to guess a word. The guessed word should have type string and must be from the original list with 6 lowercase letters.\\nThis function returns an integer type, representing the number of exact matches (value and position) of your guess to the secret word. Also, if your guess is not in the given wordlist, it will return -1 instead.\\nFor each test case, you have exactly 10 guesses to guess the word. At the end of any number of calls, if you have made 10 or fewer calls to Master.guess and at least one of these guesses was secret, then you pass the test case.\\n\\xc2\\xa0\\nExample 1:\\nInput: secret = \"acckzz\", wordlist = [\"acckzz\",\"ccbazz\",\"eiowzz\",\"abcczz\"], numguesses = 10\\nOutput: You guessed the secret word correctly.\\nExplanation:\\nmaster.guess(\"aaaaaa\") returns -1, because \"aaaaaa\" is not in wordlist.\\nmaster.guess(\"acckzz\") returns 6, because \"acckzz\" is secret and has all 6 matches.\\nmaster.guess(\"ccbazz\") returns 3, because \"ccbazz\" has 3 matches.\\nmaster.guess(\"eiowzz\") returns 2, because \"eiowzz\" has 2 matches.\\nmaster.guess(\"abcczz\") returns 4, because \"abcczz\" has 4 matches.\\nWe made 5 calls to master.guess and one of them was the secret, so we pass the test case.\\n\\nExample 2:\\nInput: secret = \"hamada\", wordlist = [\"hamada\",\"khaled\"], numguesses = 10\\nOutput: You guessed the secret word correctly.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= wordlist.length <= 100\\nwordlist[i].length == 6\\nwordlist[i] consist of lowercase English letters.\\nAll the strings of wordlist are unique.\\nsecret exists in wordlist.\\nnumguesses == 10\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/backspace-string-compare",
        "Title": "Backspace String Compare ",
        "Description": "b'Given two strings s and t, return true if they are equal when both are typed into empty text editors. \\'#\\' means a backspace character.\\nNote that after backspacing an empty text, the text will continue empty.\\n\\xc2\\xa0\\nExample 1:\\nInput: s = \"ab#c\", t = \"ad#c\"\\nOutput: true\\nExplanation: Both s and t become \"ac\".\\n\\nExample 2:\\nInput: s = \"ab##\", t = \"c#d#\"\\nOutput: true\\nExplanation: Both s and t become \"\".\\n\\nExample 3:\\nInput: s = \"a#c\", t = \"b\"\\nOutput: false\\nExplanation: s becomes \"c\" while t becomes \"b\".\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= s.length, t.length <= 200\\ns and t only contain lowercase letters and \\'#\\' characters.\\n\\n\\xc2\\xa0\\nFollow up: Can you solve it in O(n) time and O(1) space?\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/longest-mountain-in-array",
        "Title": "Longest Mountain in Array ",
        "Description": "b'You may recall that an array arr is a mountain array if and only if:\\n\\narr.length >= 3\\nThere exists some index i (0-indexed) with 0 < i < arr.length - 1 such that:\\n\\t\\narr[0] < arr[1] < ... < arr[i - 1] < arr[i]\\narr[i] > arr[i + 1] > ... > arr[arr.length - 1]\\n\\n\\n\\nGiven an integer array arr, return the length of the longest subarray, which is a mountain. Return 0 if there is no mountain subarray.\\n\\xc2\\xa0\\nExample 1:\\nInput: arr = [2,1,4,7,3,2,5]\\nOutput: 5\\nExplanation: The largest mountain is [1,4,7,3,2] which has length 5.\\n\\nExample 2:\\nInput: arr = [2,2,2]\\nOutput: 0\\nExplanation: There is no mountain.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= arr.length <= 104\\n0 <= arr[i] <= 104\\n\\n\\xc2\\xa0\\nFollow up:\\n\\nCan you solve it using only one pass?\\nCan you solve it in O(1) space?\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/hand-of-straights",
        "Title": "Hand of Straights ",
        "Description": "b\"Alice has some number of cards and she wants to rearrange the cards into groups so that each group is of size groupSize, and consists of groupSize consecutive cards.\\nGiven an integer array hand where hand[i] is the value written on the ith card and an integer groupSize, return true if she can rearrange the cards, or false otherwise.\\n\\xc2\\xa0\\nExample 1:\\nInput: hand = [1,2,3,6,2,3,4,7,8], groupSize = 3\\nOutput: true\\nExplanation: Alice's hand can be rearranged as [1,2,3],[2,3,4],[6,7,8]\\n\\nExample 2:\\nInput: hand = [1,2,3,4,5], groupSize = 4\\nOutput: false\\nExplanation: Alice's hand can not be rearranged into groups of 4.\\n\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= hand.length <= 104\\n0 <= hand[i] <= 109\\n1 <= groupSize <= hand.length\\n\\n\\xc2\\xa0\\nNote: This question is the same as 1296: https://leetcode.com/problems/divide-array-in-sets-of-k-consecutive-numbers/\\n\""
    },
    {
        "URL": "https://leetcode.com/problems/shortest-path-visiting-all-nodes",
        "Title": "Shortest Path Visiting All Nodes ",
        "Description": "b'You have an undirected, connected graph of n nodes labeled from 0 to n - 1. You are given an array graph where graph[i] is a list of all the nodes connected with node i by an edge.\\nReturn the length of the shortest path that visits every node. You may start and stop at any node, you may revisit nodes multiple times, and you may reuse edges.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: graph = [[1,2,3],[0],[0],[0]]\\nOutput: 4\\nExplanation: One possible path is [1,0,2,0,3]\\n\\nExample 2:\\n\\nInput: graph = [[1],[0,2,4],[1,3,4],[2],[1,2]]\\nOutput: 4\\nExplanation: One possible path is [0,1,4,2,3]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nn == graph.length\\n1 <= n <= 12\\n0 <= graph[i].length <\\xc2\\xa0n\\ngraph[i] does not contain i.\\nIf graph[a] contains b, then graph[b] contains a.\\nThe input graph is always connected.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/shifting-letters",
        "Title": "Shifting Letters ",
        "Description": "b'You are given a string s of lowercase English letters and an integer array shifts of the same length.\\nCall the shift() of a letter, the next letter in the alphabet, (wrapping around so that \\'z\\' becomes \\'a\\').\\n\\nFor example, shift(\\'a\\') = \\'b\\', shift(\\'t\\') = \\'u\\', and shift(\\'z\\') = \\'a\\'.\\n\\nNow for each shifts[i] = x, we want to shift the first i + 1 letters of s, x times.\\nReturn the final string after all such shifts to s are applied.\\n\\xc2\\xa0\\nExample 1:\\nInput: s = \"abc\", shifts = [3,5,9]\\nOutput: \"rpl\"\\nExplanation: We start with \"abc\".\\nAfter shifting the first 1 letters of s by 3, we have \"dbc\".\\nAfter shifting the first 2 letters of s by 5, we have \"igc\".\\nAfter shifting the first 3 letters of s by 9, we have \"rpl\", the answer.\\n\\nExample 2:\\nInput: s = \"aaa\", shifts = [1,2,3]\\nOutput: \"gfd\"\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= s.length <= 105\\ns consists of lowercase English letters.\\nshifts.length == s.length\\n0 <= shifts[i] <= 109\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/maximize-distance-to-closest-person",
        "Title": "Maximize Distance to Closest Person ",
        "Description": "b'You are given an array representing a row of seats where seats[i] = 1 represents a person sitting in the ith seat, and seats[i] = 0 represents that the ith seat is empty (0-indexed).\\nThere is at least one empty seat, and at least one person sitting.\\nAlex wants to sit in the seat such that the distance between him and the closest person to him is maximized.\\xc2\\xa0\\nReturn that maximum distance to the closest person.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: seats = [1,0,0,0,1,0,1]\\nOutput: 2\\nExplanation: \\nIf Alex sits in the second open seat (i.e. seats[2]), then the closest person has distance 2.\\nIf Alex sits in any other open seat, the closest person has distance 1.\\nThus, the maximum distance to the closest person is 2.\\n\\nExample 2:\\nInput: seats = [1,0,0,0]\\nOutput: 3\\nExplanation: \\nIf Alex sits in the last seat (i.e. seats[3]), the closest person is 3 seats away.\\nThis is the maximum distance possible, so the answer is 3.\\n\\nExample 3:\\nInput: seats = [0,1]\\nOutput: 1\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n2 <= seats.length <= 2 * 104\\nseats[i]\\xc2\\xa0is 0 or\\xc2\\xa01.\\nAt least one seat is empty.\\nAt least one seat is occupied.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/rectangle-area-ii",
        "Title": "Rectangle Area II ",
        "Description": "b'You are given a 2D array of axis-aligned rectangles. Each rectangle[i] = [xi1, yi1, xi2, yi2] denotes the ith rectangle where (xi1, yi1) are the coordinates of the bottom-left corner, and (xi2, yi2) are the coordinates of the top-right corner.\\nCalculate the total area covered by all rectangles in the plane. Any area covered by two or more rectangles should only be counted once.\\nReturn the total area. Since the answer may be too large, return it modulo 109 + 7.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: rectangles = [[0,0,2,2],[1,0,2,3],[1,0,3,1]]\\nOutput: 6\\nExplanation: A total area of 6 is covered by all three rectangales, as illustrated in the picture.\\nFrom (1,1) to (2,2), the green and red rectangles overlap.\\nFrom (1,0) to (2,3), all three rectangles overlap.\\n\\nExample 2:\\nInput: rectangles = [[0,0,1000000000,1000000000]]\\nOutput: 49\\nExplanation: The answer is 1018 modulo (109 + 7), which is 49.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= rectangles.length <= 200\\nrectanges[i].length == 4\\n0 <= xi1, yi1, xi2, yi2 <= 109\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/loud-and-rich",
        "Title": "Loud and Rich ",
        "Description": "b'There is a group of n people labeled from 0 to n - 1 where each person has a different amount of money and a different level of quietness.\\nYou are given an array richer where richer[i] = [ai, bi] indicates that ai has more money than bi and an integer array quiet where quiet[i] is the quietness of the ith person. All the given data in richer are logically correct (i.e., the data will not lead you to a situation where x is richer than y and y is richer than x at the same time).\\nReturn an integer array answer where answer[x] = y if y is the least quiet person (that is, the person y with the smallest value of quiet[y]) among all people who definitely have equal to or more money than the person x.\\n\\xc2\\xa0\\nExample 1:\\nInput: richer = [[1,0],[2,1],[3,1],[3,7],[4,3],[5,3],[6,3]], quiet = [3,2,5,4,6,1,7,0]\\nOutput: [5,5,2,5,4,5,6,7]\\nExplanation: \\nanswer[0] = 5.\\nPerson 5 has more money than 3, which has more money than 1, which has more money than 0.\\nThe only person who is quieter (has lower quiet[x]) is person 7, but it is not clear if they have more money than person 0.\\nanswer[7] = 7.\\nAmong all people that definitely have equal to or more money than person 7 (which could be persons 3, 4, 5, 6, or 7), the person who is the quietest (has lower quiet[x]) is person 7.\\nThe other answers can be filled out with similar reasoning.\\n\\nExample 2:\\nInput: richer = [], quiet = [0]\\nOutput: [0]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nn == quiet.length\\n1 <= n <= 500\\n0 <= quiet[i] < n\\nAll the values of quiet are unique.\\n0 <= richer.length <= n * (n - 1) / 2\\n0 <= ai, bi < n\\nai != bi\\nAll the pairs of richer are unique.\\nThe observations in richer are all logically consistent.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/peak-index-in-a-mountain-array",
        "Title": "Peak Index in a Mountain Array ",
        "Description": "b\"Let's call an array arr a mountain\\xc2\\xa0if the following properties hold:\\n\\narr.length >= 3\\nThere exists some i with\\xc2\\xa00 < i\\xc2\\xa0< arr.length - 1\\xc2\\xa0such that:\\n\\t\\narr[0] < arr[1] < ... arr[i-1] < arr[i] \\narr[i] > arr[i+1] > ... > arr[arr.length - 1]\\n\\n\\n\\nGiven an integer array arr that is guaranteed to be\\xc2\\xa0a mountain, return any\\xc2\\xa0i\\xc2\\xa0such that\\xc2\\xa0arr[0] < arr[1] < ... arr[i - 1] < arr[i] > arr[i + 1] > ... > arr[arr.length - 1].\\n\\xc2\\xa0\\nExample 1:\\nInput: arr = [0,1,0]\\nOutput: 1\\n\\nExample 2:\\nInput: arr = [0,2,1,0]\\nOutput: 1\\n\\nExample 3:\\nInput: arr = [0,10,5,2]\\nOutput: 1\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n3 <= arr.length <= 104\\n0 <= arr[i] <= 106\\narr is guaranteed to be a mountain array.\\n\\n\\xc2\\xa0\\nFollow up: Finding the O(n) is straightforward, could you find an O(log(n)) solution?\""
    },
    {
        "URL": "https://leetcode.com/problems/car-fleet",
        "Title": "Car Fleet ",
        "Description": "b\"There are n cars going to the same destination along a one-lane road. The destination is target miles away.\\nYou are given two integer array position and speed, both of length n, where position[i] is the position of the ith car and speed[i] is the speed of the ith car (in miles per hour).\\nA car can never pass another car ahead of it, but it can catch up to it\\xc2\\xa0and drive bumper to bumper at the same speed. The faster car will slow down to match the slower car's speed. The distance between these two cars is ignored (i.e., they are assumed to have the same position).\\nA car fleet is some non-empty set of cars driving at the same position and same speed. Note that a single car is also a car fleet.\\nIf a car catches up to a car fleet right at the destination point, it will still be considered as one car fleet.\\nReturn the number of car fleets that will arrive at the destination.\\n\\xc2\\xa0\\nExample 1:\\nInput: target = 12, position = [10,8,0,5,3], speed = [2,4,1,1,3]\\nOutput: 3\\nExplanation:\\nThe cars starting at 10 (speed 2) and 8 (speed 4) become a fleet, meeting each other at 12.\\nThe car starting at 0 does not catch up to any other car, so it is a fleet by itself.\\nThe cars starting at 5 (speed 1) and 3 (speed 3) become a fleet, meeting each other at 6. The fleet moves at speed 1 until it reaches target.\\nNote that no other cars meet these fleets before the destination, so the answer is 3.\\n\\nExample 2:\\nInput: target = 10, position = [3], speed = [3]\\nOutput: 1\\nExplanation: There is only one car, hence there is only one fleet.\\n\\nExample 3:\\nInput: target = 100, position = [0,2,4], speed = [4,2,1]\\nOutput: 1\\nExplanation:\\nThe cars starting at 0 (speed 4) and 2 (speed 2) become a fleet, meeting each other at 4. The fleet moves at speed 2.\\nThen, the fleet (speed 2) and the car starting at 4 (speed 1) become one fleet, meeting each other at 6. The fleet moves at speed 1 until it reaches target.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nn == position.length == speed.length\\n1 <= n <= 105\\n0 < target <= 106\\n0 <= position[i] < target\\nAll the values of position are unique.\\n0 < speed[i] <= 106\\n\\n\""
    },
    {
        "URL": "https://leetcode.com/problems/k-similar-strings",
        "Title": "K-Similar Strings ",
        "Description": "b'Strings s1 and s2 are k-similar (for some non-negative integer k) if we can swap the positions of two letters in s1 exactly k times so that the resulting string equals s2.\\nGiven two anagrams s1 and s2, return the smallest k for which s1 and s2 are k-similar.\\n\\xc2\\xa0\\nExample 1:\\nInput: s1 = \"ab\", s2 = \"ba\"\\nOutput: 1\\n\\nExample 2:\\nInput: s1 = \"abc\", s2 = \"bca\"\\nOutput: 2\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= s1.length <= 20\\ns2.length == s1.length\\ns1 and s2 contain only lowercase letters from the set {\\'a\\', \\'b\\', \\'c\\', \\'d\\', \\'e\\', \\'f\\'}.\\ns2 is an anagram of s1.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/exam-room",
        "Title": "Exam Room ",
        "Description": "b'There is an exam room with n seats in a single row labeled from 0 to n - 1.\\nWhen a student enters the room, they must sit in the seat that maximizes the distance to the closest person. If there are multiple such seats, they sit in the seat with the lowest number. If no one is in the room, then the student sits at seat number 0.\\nDesign a class that simulates the mentioned exam room.\\nImplement the ExamRoom class:\\n\\nExamRoom(int n) Initializes the object of the exam room with the number of the seats n.\\nint seat() Returns the label of the seat at which the next student will set.\\nvoid leave(int p) Indicates that the student sitting at seat p will leave the room. It is guaranteed that there will be a student sitting at seat p.\\n\\n\\xc2\\xa0\\nExample 1:\\nInput\\n[\"ExamRoom\", \"seat\", \"seat\", \"seat\", \"seat\", \"leave\", \"seat\"]\\n[[10], [], [], [], [], [4], []]\\nOutput\\n[null, 0, 9, 4, 2, null, 5]\\n\\nExplanation\\nExamRoom examRoom = new ExamRoom(10);\\nexamRoom.seat(); // return 0, no one is in the room, then the student sits at seat number 0.\\nexamRoom.seat(); // return 9, the student sits at the last seat number 9.\\nexamRoom.seat(); // return 4, the student sits at the last seat number 4.\\nexamRoom.seat(); // return 2, the student sits at the last seat number 2.\\nexamRoom.leave(4);\\nexamRoom.seat(); // return 5, the student sits at the last seat number 5.\\n\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= n <= 109\\nIt is guaranteed that there is a student sitting at seat p.\\nAt most 104 calls will be made to seat and leave.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/score-of-parentheses",
        "Title": "Score of Parentheses ",
        "Description": "b'Given a balanced parentheses string s, return the score of the string.\\nThe score of a balanced parentheses string is based on the following rule:\\n\\n\"()\" has score 1.\\nAB has score A + B, where A and B are balanced parentheses strings.\\n(A) has score 2 * A, where A is a balanced parentheses string.\\n\\n\\xc2\\xa0\\nExample 1:\\nInput: s = \"()\"\\nOutput: 1\\n\\nExample 2:\\nInput: s = \"(())\"\\nOutput: 2\\n\\nExample 3:\\nInput: s = \"()()\"\\nOutput: 2\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n2 <= s.length <= 50\\ns consists of only \\'(\\' and \\')\\'.\\ns is a balanced parentheses string.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/minimum-cost-to-hire-k-workers",
        "Title": "Minimum Cost to Hire K Workers ",
        "Description": "b'There are n workers. You are given two integer arrays quality and wage where quality[i] is the quality of the ith worker and wage[i] is the minimum wage expectation for the ith worker.\\nWe want to hire exactly k workers to form a paid group. To hire a group of k workers, we must pay them according to the following rules:\\n\\nEvery worker in the paid group should be paid in the ratio of their quality compared to other workers in the paid group.\\nEvery worker in the paid group must be paid at least their minimum wage expectation.\\n\\nGiven the integer k, return the least amount of money needed to form a paid group satisfying the above conditions. Answers within 10-5 of the actual answer will be accepted.\\n\\xc2\\xa0\\nExample 1:\\nInput: quality = [10,20,5], wage = [70,50,30], k = 2\\nOutput: 105.00000\\nExplanation: We pay 70 to 0th worker and 35 to 2nd worker.\\n\\nExample 2:\\nInput: quality = [3,1,10,10,1], wage = [4,8,2,2,7], k = 3\\nOutput: 30.66667\\nExplanation: We pay 4 to 0th worker, 13.33333 to 2nd and 3rd workers separately.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nn == quality.length == wage.length\\n1 <= k <= n <= 104\\n1 <= quality[i], wage[i] <= 104\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/mirror-reflection",
        "Title": "Mirror Reflection ",
        "Description": "b'There is a special square room with mirrors on each of the four walls. Except for the southwest corner, there are receptors on each of the remaining corners, numbered 0, 1, and 2.\\nThe square room has walls of length p\\xc2\\xa0and a laser ray from the southwest corner first meets the east wall at a distance q from the 0th receptor.\\nGiven the two integers p and q, return the number of the receptor that the ray meets first.\\nThe test cases are guaranteed so that the ray will meet a receptor eventually.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: p = 2, q = 1\\nOutput: 2\\nExplanation: The ray meets receptor 2 the first time it gets reflected back to the left wall.\\n\\nExample 2:\\nInput: p = 3, q = 1\\nOutput: 1\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= q <= p <= 1000\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/buddy-strings",
        "Title": "Buddy Strings ",
        "Description": "b'Given two strings s and goal, return true if you can swap two letters in s so the result is equal to goal, otherwise, return false.\\nSwapping letters is defined as taking two indices i and j (0-indexed) such that i != j and swapping the characters at s[i] and s[j].\\n\\nFor example, swapping at indices 0 and 2 in \"abcd\" results in \"cbad\".\\n\\n\\xc2\\xa0\\nExample 1:\\nInput: s = \"ab\", goal = \"ba\"\\nOutput: true\\nExplanation: You can swap s[0] = \\'a\\' and s[1] = \\'b\\' to get \"ba\", which is equal to goal.\\n\\nExample 2:\\nInput: s = \"ab\", goal = \"ab\"\\nOutput: false\\nExplanation: The only letters you can swap are s[0] = \\'a\\' and s[1] = \\'b\\', which results in \"ba\" != goal.\\n\\nExample 3:\\nInput: s = \"aa\", goal = \"aa\"\\nOutput: true\\nExplanation: You can swap s[0] = \\'a\\' and s[1] = \\'a\\' to get \"aa\", which is equal to goal.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= s.length, goal.length <= 2 * 104\\ns and goal consist of lowercase letters.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/lemonade-change",
        "Title": "Lemonade Change ",
        "Description": "b'At a lemonade stand, each lemonade costs $5. Customers are standing in a queue to buy from you and order one at a time (in the order specified by bills). Each customer will only buy one lemonade and pay with either a $5, $10, or $20 bill. You must provide the correct change to each customer so that the net transaction is that the customer pays $5.\\nNote that you do not have any change in hand at first.\\nGiven an integer array bills where bills[i] is the bill the ith customer pays, return true if you can provide every customer with the correct change, or false otherwise.\\n\\xc2\\xa0\\nExample 1:\\nInput: bills = [5,5,5,10,20]\\nOutput: true\\nExplanation: \\nFrom the first 3 customers, we collect three $5 bills in order.\\nFrom the fourth customer, we collect a $10 bill and give back a $5.\\nFrom the fifth customer, we give a $10 bill and a $5 bill.\\nSince all customers got correct change, we output true.\\n\\nExample 2:\\nInput: bills = [5,5,10,10,20]\\nOutput: false\\nExplanation: \\nFrom the first two customers in order, we collect two $5 bills.\\nFor the next two customers in order, we collect a $10 bill and give back a $5 bill.\\nFor the last customer, we can not give the change of $15 back because we only have two $10 bills.\\nSince not every customer received the correct change, the answer is false.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= bills.length <= 105\\nbills[i] is either 5, 10, or 20.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/score-after-flipping-matrix",
        "Title": "Score After Flipping Matrix ",
        "Description": "b\"You are given an m x n binary matrix grid.\\nA move consists of choosing any row or column and toggling each value in that row or column (i.e., changing all 0's to 1's, and all 1's to 0's).\\nEvery row of the matrix is interpreted as a binary number, and the score of the matrix is the sum of these numbers.\\nReturn the highest possible score after making any number of moves (including zero moves).\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: grid = [[0,0,1,1],[1,0,1,0],[1,1,0,0]]\\nOutput: 39\\nExplanation: 0b1111 + 0b1001 + 0b1111 = 15 + 9 + 15 = 39\\n\\nExample 2:\\nInput: grid = [[0]]\\nOutput: 1\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nm == grid.length\\nn == grid[i].length\\n1 <= m, n <= 20\\ngrid[i][j] is either 0 or 1.\\n\\n\""
    },
    {
        "URL": "https://leetcode.com/problems/shortest-subarray-with-sum-at-least-k",
        "Title": "Shortest Subarray with Sum at Least K ",
        "Description": "b'Given an integer array nums and an integer k, return the length of the shortest non-empty subarray of nums with a sum of at least k. If there is no such subarray, return -1.\\nA subarray is a contiguous part of an array.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [1], k = 1\\nOutput: 1\\nExample 2:\\nInput: nums = [1,2], k = 4\\nOutput: -1\\nExample 3:\\nInput: nums = [2,-1,2], k = 3\\nOutput: 3\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 105\\n-105 <= nums[i] <= 105\\n1 <= k <= 109\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/all-nodes-distance-k-in-binary-tree",
        "Title": "All Nodes Distance K in Binary Tree ",
        "Description": "b'Given the root of a binary tree, the value of a target node target, and an integer k, return an array of the values of all nodes that have a distance k from the target node.\\nYou can return the answer in any order.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: root = [3,5,1,6,2,0,8,null,null,7,4], target = 5, k = 2\\nOutput: [7,4,1]\\nExplanation: The nodes that are a distance 2 from the target node (with value 5) have values 7, 4, and 1.\\n\\nExample 2:\\nInput: root = [1], target = 1, k = 3\\nOutput: []\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of nodes in the tree is in the range [1, 500].\\n0 <= Node.val <= 500\\nAll the values Node.val are unique.\\ntarget is the value of one of the nodes in the tree.\\n0 <= k <= 1000\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/shortest-path-to-get-all-keys",
        "Title": "Shortest Path to Get All Keys ",
        "Description": "b'You are given an m x n grid grid where:\\n\\n\\'.\\' is an empty cell.\\n\\'#\\' is a wall.\\n\\'@\\' is the starting point.\\nLowercase letters represent keys.\\nUppercase letters represent locks.\\n\\nYou start at the starting point and one move consists of walking one space in one of the four cardinal directions. You cannot walk outside the grid, or walk into a wall.\\nIf you walk over a key, you can pick it up and you cannot walk over a lock unless you have its corresponding key.\\nFor some 1 <= k <= 6, there is exactly one lowercase and one uppercase letter of the first k letters of the English alphabet in the grid. This means that there is exactly one key for each lock, and one lock for each key; and also that the letters used to represent the keys and locks were chosen in the same order as the English alphabet.\\nReturn the lowest number of moves to acquire all keys. If it is impossible, return -1.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: grid = [\"@.a..\",\"###.#\",\"b.A.B\"]\\nOutput: 8\\nExplanation: Note that the goal is to obtain all the keys not to open all the locks.\\n\\nExample 2:\\n\\nInput: grid = [\"@..aA\",\"..B#.\",\"....b\"]\\nOutput: 6\\n\\nExample 3:\\n\\nInput: grid = [\"@Aa\"]\\nOutput: -1\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nm == grid.length\\nn == grid[i].length\\n1 <= m, n <= 30\\ngrid[i][j] is either an English letter, \\'.\\', \\'#\\', or \\'@\\'.\\nThe number of keys in the grid is in the range [1, 6].\\nEach key in the grid is unique.\\nEach key in the grid has a matching lock.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/smallest-subtree-with-all-the-deepest-nodes",
        "Title": "Smallest Subtree with all the Deepest Nodes ",
        "Description": "b'Given the root of a binary tree, the depth of each node is the shortest distance to the root.\\nReturn the smallest subtree such that it contains all the deepest nodes in the original tree.\\nA node is called the deepest if it has the largest depth possible among any node in the entire tree.\\nThe subtree of a node is a tree consisting of that node, plus the set of all descendants of that node.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: root = [3,5,1,6,2,0,8,null,null,7,4]\\nOutput: [2,7,4]\\nExplanation: We return the node with value 2, colored in yellow in the diagram.\\nThe nodes coloured in blue are the deepest nodes of the tree.\\nNotice that nodes 5, 3 and 2 contain the deepest nodes in the tree but node 2 is the smallest subtree among them, so we return it.\\n\\nExample 2:\\nInput: root = [1]\\nOutput: [1]\\nExplanation: The root is the deepest node in the tree.\\n\\nExample 3:\\nInput: root = [0,1,3,null,2]\\nOutput: [2]\\nExplanation: The deepest node in the tree is 2, the valid subtrees are the subtrees of nodes 2, 1 and 0 but the subtree of node 2 is the smallest.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of nodes in the tree will be in the range [1, 500].\\n0 <= Node.val <= 500\\nThe values of the nodes in the tree are unique.\\n\\n\\xc2\\xa0\\nNote: This question is the same as 1123: https://leetcode.com/problems/lowest-common-ancestor-of-deepest-leaves/\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/prime-palindrome",
        "Title": "Prime Palindrome ",
        "Description": "b'Given an integer n, return the smallest prime palindrome greater than or equal to n.\\nAn integer is prime if it has exactly two divisors: 1 and itself. Note that 1 is not a prime number.\\n\\nFor example, 2, 3, 5, 7, 11, and 13 are all primes.\\n\\nAn integer is a palindrome if it reads the same from left to right as it does from right to left.\\n\\nFor example, 101 and 12321 are palindromes.\\n\\nThe test cases are generated so that the answer always exists and is in the range [2, 2 * 108].\\n\\xc2\\xa0\\nExample 1:\\nInput: n = 6\\nOutput: 7\\nExample 2:\\nInput: n = 8\\nOutput: 11\\nExample 3:\\nInput: n = 13\\nOutput: 101\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= n <= 108\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/transpose-matrix",
        "Title": "Transpose Matrix ",
        "Description": "b\"Given a 2D integer array matrix, return the transpose of matrix.\\nThe transpose of a matrix is the matrix flipped over its main diagonal, switching the matrix's row and column indices.\\n\\n\\xc2\\xa0\\nExample 1:\\nInput: matrix = [[1,2,3],[4,5,6],[7,8,9]]\\nOutput: [[1,4,7],[2,5,8],[3,6,9]]\\n\\nExample 2:\\nInput: matrix = [[1,2,3],[4,5,6]]\\nOutput: [[1,4],[2,5],[3,6]]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nm == matrix.length\\nn == matrix[i].length\\n1 <= m, n <= 1000\\n1 <= m * n <= 105\\n-109 <= matrix[i][j] <= 109\\n\\n\""
    },
    {
        "URL": "https://leetcode.com/problems/binary-gap",
        "Title": "Binary Gap ",
        "Description": "b'Given a positive integer n, find and return the longest distance between any two adjacent 1\\'s in the binary representation of n. If there are no two adjacent 1\\'s, return 0.\\nTwo 1\\'s are adjacent if there are only 0\\'s separating them (possibly no 0\\'s). The distance between two 1\\'s is the absolute difference between their bit positions. For example, the two 1\\'s in \"1001\" have a distance of 3.\\n\\xc2\\xa0\\nExample 1:\\nInput: n = 22\\nOutput: 2\\nExplanation: 22 in binary is \"10110\".\\nThe first adjacent pair of 1\\'s is \"10110\" with a distance of 2.\\nThe second adjacent pair of 1\\'s is \"10110\" with a distance of 1.\\nThe answer is the largest of these two distances, which is 2.\\nNote that \"10110\" is not a valid pair since there is a 1 separating the two 1\\'s underlined.\\n\\nExample 2:\\nInput: n = 8\\nOutput: 0\\nExplanation: 8 in binary is \"1000\".\\nThere are not any adjacent pairs of 1\\'s in the binary representation of 8, so we return 0.\\n\\nExample 3:\\nInput: n = 5\\nOutput: 2\\nExplanation: 5 in binary is \"101\".\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= n <= 109\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/reordered-power-of-2",
        "Title": "Reordered Power of 2 ",
        "Description": "b'You are given an integer n. We reorder the digits in any order (including the original order) such that the leading digit is not zero.\\nReturn true if and only if we can do this so that the resulting number is a power of two.\\n\\xc2\\xa0\\nExample 1:\\nInput: n = 1\\nOutput: true\\n\\nExample 2:\\nInput: n = 10\\nOutput: false\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= n <= 109\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/advantage-shuffle",
        "Title": "Advantage Shuffle ",
        "Description": "b'You are given two integer arrays nums1 and nums2 both of the same length. The advantage of nums1 with respect to nums2 is the number of indices i for which nums1[i] > nums2[i].\\nReturn any permutation of nums1 that maximizes its advantage with respect to nums2.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums1 = [2,7,11,15], nums2 = [1,10,4,11]\\nOutput: [2,11,7,15]\\nExample 2:\\nInput: nums1 = [12,24,8,32], nums2 = [13,25,32,11]\\nOutput: [24,32,8,12]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums1.length <= 105\\nnums2.length == nums1.length\\n0 <= nums1[i], nums2[i] <= 109\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/minimum-number-of-refueling-stops",
        "Title": "Minimum Number of Refueling Stops ",
        "Description": "b'A car travels from a starting position to a destination which is target miles east of the starting position.\\nThere are gas stations along the way. The gas stations are represented as an array stations where stations[i] = [positioni, fueli] indicates that the ith gas station is positioni miles east of the starting position and has fueli liters of gas.\\nThe car starts with an infinite tank of gas, which initially has startFuel liters of fuel in it. It uses one liter of gas per one mile that it drives. When the car reaches a gas station, it may stop and refuel, transferring all the gas from the station into the car.\\nReturn the minimum number of refueling stops the car must make in order to reach its destination. If it cannot reach the destination, return -1.\\nNote that if the car reaches a gas station with 0 fuel left, the car can still refuel there. If the car reaches the destination with 0 fuel left, it is still considered to have arrived.\\n\\xc2\\xa0\\nExample 1:\\nInput: target = 1, startFuel = 1, stations = []\\nOutput: 0\\nExplanation: We can reach the target without refueling.\\n\\nExample 2:\\nInput: target = 100, startFuel = 1, stations = [[10,100]]\\nOutput: -1\\nExplanation: We can not reach the target (or even the first gas station).\\n\\nExample 3:\\nInput: target = 100, startFuel = 10, stations = [[10,60],[20,30],[30,30],[60,40]]\\nOutput: 2\\nExplanation: We start with 10 liters of fuel.\\nWe drive to position 10, expending 10 liters of fuel.  We refuel from 0 liters to 60 liters of gas.\\nThen, we drive from position 10 to position 60 (expending 50 liters of fuel),\\nand refuel from 10 liters to 50 liters of gas.  We then drive to and reach the target.\\nWe made 2 refueling stops along the way, so we return 2.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= target, startFuel <= 109\\n0 <= stations.length <= 500\\n0 <= positioni <= positioni+1 < target\\n1 <= fueli < 109\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/leaf-similar-trees",
        "Title": "Leaf-Similar Trees ",
        "Description": "b'Consider all the leaves of a binary tree, from\\xc2\\xa0left to right order, the values of those\\xc2\\xa0leaves form a leaf value sequence.\\n\\nFor example, in the given tree above, the leaf value sequence is (6, 7, 4, 9, 8).\\nTwo binary trees are considered leaf-similar\\xc2\\xa0if their leaf value sequence is the same.\\nReturn true if and only if the two given trees with head nodes root1 and root2 are leaf-similar.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: root1 = [3,5,1,6,2,9,8,null,null,7,4], root2 = [3,5,1,6,7,4,2,null,null,null,null,null,null,9,8]\\nOutput: true\\n\\nExample 2:\\n\\nInput: root1 = [1,2,3], root2 = [1,3,2]\\nOutput: false\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of nodes in each tree will be in the range [1, 200].\\nBoth of the given trees will have values in the range [0, 200].\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/length-of-longest-fibonacci-subsequence",
        "Title": "Length of Longest Fibonacci Subsequence ",
        "Description": "b'A sequence x1, x2, ..., xn is Fibonacci-like if:\\n\\nn >= 3\\nxi + xi+1 == xi+2 for all i + 2 <= n\\n\\nGiven a strictly increasing array arr of positive integers forming a sequence, return the length of the longest Fibonacci-like subsequence of arr. If one does not exist, return 0.\\nA subsequence is derived from another sequence arr by deleting any number of elements (including none) from arr, without changing the order of the remaining elements. For example, [3, 5, 8] is a subsequence of [3, 4, 5, 6, 7, 8].\\n\\xc2\\xa0\\nExample 1:\\nInput: arr = [1,2,3,4,5,6,7,8]\\nOutput: 5\\nExplanation: The longest subsequence that is fibonacci-like: [1,2,3,5,8].\\nExample 2:\\nInput: arr = [1,3,7,11,12,14,18]\\nOutput: 3\\nExplanation: The longest subsequence that is fibonacci-like: [1,11,12], [3,11,14] or [7,11,18].\\n\\xc2\\xa0\\nConstraints:\\n\\n3 <= arr.length <= 1000\\n1 <= arr[i] < arr[i + 1] <= 109\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/walking-robot-simulation",
        "Title": "Walking Robot Simulation ",
        "Description": "b'A robot on an infinite XY-plane starts at point (0, 0) facing north. The robot can receive a sequence of these three possible types of commands:\\n\\n-2: Turn left 90 degrees.\\n-1: Turn right 90 degrees.\\n1 <= k <= 9: Move forward k units, one unit at a time.\\n\\nSome of the grid squares are obstacles. The ith obstacle is at grid point obstacles[i] = (xi, yi). If the robot runs into an obstacle, then it will instead stay in its current location and move on to the next command.\\nReturn the maximum Euclidean distance that the robot ever gets from the origin squared (i.e. if the distance is 5, return 25).\\nNote:\\n\\nNorth means +Y direction.\\nEast means +X direction.\\nSouth means -Y direction.\\nWest means -X direction.\\n\\n\\xc2\\xa0\\nExample 1:\\nInput: commands = [4,-1,3], obstacles = []\\nOutput: 25\\nExplanation: The robot starts at (0, 0):\\n1. Move north 4 units to (0, 4).\\n2. Turn right.\\n3. Move east 3 units to (3, 4).\\nThe furthest point the robot ever gets from the origin is (3, 4), which squared is 32 + 42 = 25 units away.\\n\\nExample 2:\\nInput: commands = [4,-1,4,-2,4], obstacles = [[2,4]]\\nOutput: 65\\nExplanation: The robot starts at (0, 0):\\n1. Move north 4 units to (0, 4).\\n2. Turn right.\\n3. Move east 1 unit and get blocked by the obstacle at (2, 4), robot is at (1, 4).\\n4. Turn left.\\n5. Move north 4 units to (1, 8).\\nThe furthest point the robot ever gets from the origin is (1, 8), which squared is 12 + 82 = 65 units away.\\n\\nExample 3:\\nInput: commands = [6,-1,-1,6], obstacles = []\\nOutput: 36\\nExplanation: The robot starts at (0, 0):\\n1. Move north 6 units to (0, 6).\\n2. Turn right.\\n3. Turn right.\\n4. Move south 6 units to (0, 0).\\nThe furthest point the robot ever gets from the origin is (0, 6), which squared is 62 = 36 units away.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= commands.length <= 104\\ncommands[i] is either -2, -1, or an integer in the range [1, 9].\\n0 <= obstacles.length <= 104\\n-3 * 104 <= xi, yi <= 3 * 104\\nThe answer is guaranteed to be less than 231.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/koko-eating-bananas",
        "Title": "Koko Eating Bananas ",
        "Description": "b'Koko loves to eat bananas. There are n piles of bananas, the ith pile has piles[i] bananas. The guards have gone and will come back in h hours.\\nKoko can decide her bananas-per-hour eating speed of k. Each hour, she chooses some pile of bananas and eats k bananas from that pile. If the pile has less than k bananas, she eats all of them instead and will not eat any more bananas during this hour.\\nKoko likes to eat slowly but still wants to finish eating all the bananas before the guards return.\\nReturn the minimum integer k such that she can eat all the bananas within h hours.\\n\\xc2\\xa0\\nExample 1:\\nInput: piles = [3,6,7,11], h = 8\\nOutput: 4\\n\\nExample 2:\\nInput: piles = [30,11,23,4,20], h = 5\\nOutput: 30\\n\\nExample 3:\\nInput: piles = [30,11,23,4,20], h = 6\\nOutput: 23\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= piles.length <= 104\\npiles.length <= h <= 109\\n1 <= piles[i] <= 109\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/middle-of-the-linked-list",
        "Title": "Middle of the Linked List ",
        "Description": "b'Given the head of a singly linked list, return the middle node of the linked list.\\nIf there are two middle nodes, return the second middle node.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: head = [1,2,3,4,5]\\nOutput: [3,4,5]\\nExplanation: The middle node of the list is node 3.\\n\\nExample 2:\\n\\nInput: head = [1,2,3,4,5,6]\\nOutput: [4,5,6]\\nExplanation: Since the list has two middle nodes with values 3 and 4, we return the second one.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of nodes in the list is in the range [1, 100].\\n1 <= Node.val <= 100\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/stone-game",
        "Title": "Stone Game ",
        "Description": "b'Alice and Bob play a game with piles of stones. There are an even number of piles arranged in a row, and each pile has a positive integer number of stones piles[i].\\nThe objective of the game is to end with the most stones. The total number of stones across all the piles is odd, so there are no ties.\\nAlice and Bob take turns, with Alice starting first. Each turn, a player takes the entire pile of stones either from the beginning or from the end of the row. This continues until there are no more piles left, at which point the person with the most stones wins.\\nAssuming Alice and Bob play optimally, return true if Alice wins the game, or false if Bob wins.\\n\\xc2\\xa0\\nExample 1:\\nInput: piles = [5,3,4,5]\\nOutput: true\\nExplanation: \\nAlice starts first, and can only take the first 5 or the last 5.\\nSay she takes the first 5, so that the row becomes [3, 4, 5].\\nIf Bob takes 3, then the board is [4, 5], and Alice takes 5 to win with 10 points.\\nIf Bob takes the last 5, then the board is [3, 4], and Alice takes 4 to win with 9 points.\\nThis demonstrated that taking the first 5 was a winning move for Alice, so we return true.\\n\\nExample 2:\\nInput: piles = [3,7,2,3]\\nOutput: true\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n2 <= piles.length <= 500\\npiles.length is even.\\n1 <= piles[i] <= 500\\nsum(piles[i]) is odd.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/nth-magical-number",
        "Title": "Nth Magical Number ",
        "Description": "b'A positive integer is magical if it is divisible by either a or b.\\nGiven the three integers n, a, and b, return the nth magical number. Since the answer may be very large, return it modulo 109 + 7.\\n\\xc2\\xa0\\nExample 1:\\nInput: n = 1, a = 2, b = 3\\nOutput: 2\\n\\nExample 2:\\nInput: n = 4, a = 2, b = 3\\nOutput: 6\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= n <= 109\\n2 <= a, b <= 4 * 104\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/profitable-schemes",
        "Title": "Profitable Schemes ",
        "Description": "b\"There is a group of n members, and a list of various crimes they could commit. The ith crime generates a profit[i] and requires group[i] members to participate in it. If a member participates in one crime, that member can't participate in another crime.\\nLet's call a profitable scheme any subset of these crimes that generates at least minProfit profit, and the total number of members participating in that subset of crimes is at most n.\\nReturn the number of schemes that can be chosen. Since the answer may be very large, return it modulo 109 + 7.\\n\\xc2\\xa0\\nExample 1:\\nInput: n = 5, minProfit = 3, group = [2,2], profit = [2,3]\\nOutput: 2\\nExplanation: To make a profit of at least 3, the group could either commit crimes 0 and 1, or just crime 1.\\nIn total, there are 2 schemes.\\nExample 2:\\nInput: n = 10, minProfit = 5, group = [2,3,5], profit = [6,7,8]\\nOutput: 7\\nExplanation: To make a profit of at least 5, the group could commit any crimes, as long as they commit one.\\nThere are 7 possible schemes: (0), (1), (2), (0,1), (0,2), (1,2), and (0,1,2).\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= n <= 100\\n0 <= minProfit <= 100\\n1 <= group.length <= 100\\n1 <= group[i] <= 100\\nprofit.length == group.length\\n0 <= profit[i] <= 100\\n\\n\""
    },
    {
        "URL": "https://leetcode.com/problems/decoded-string-at-index",
        "Title": "Decoded String at Index ",
        "Description": "b'You are given an encoded string s. To decode the string to a tape, the encoded string is read one character at a time and the following steps are taken:\\n\\nIf the character read is a letter, that letter is written onto the tape.\\nIf the character read is a digit d, the entire current tape is repeatedly written d - 1 more times in total.\\n\\nGiven an integer k, return the kth letter (1-indexed) in the decoded string.\\n\\xc2\\xa0\\nExample 1:\\nInput: s = \"leet2code3\", k = 10\\nOutput: \"o\"\\nExplanation: The decoded string is \"leetleetcodeleetleetcodeleetleetcode\".\\nThe 10th letter in the string is \"o\".\\n\\nExample 2:\\nInput: s = \"ha22\", k = 5\\nOutput: \"h\"\\nExplanation: The decoded string is \"hahahaha\".\\nThe 5th letter is \"h\".\\n\\nExample 3:\\nInput: s = \"a2345678999999999999999\", k = 1\\nOutput: \"a\"\\nExplanation: The decoded string is \"a\" repeated 8301530446056247680 times.\\nThe 1st letter is \"a\".\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n2 <= s.length <= 100\\ns consists of lowercase English letters and digits 2 through 9.\\ns starts with a letter.\\n1 <= k <= 109\\nIt is guaranteed that k is less than or equal to the length of the decoded string.\\nThe decoded string is guaranteed to have less than 263 letters.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/boats-to-save-people",
        "Title": "Boats to Save People ",
        "Description": "b'You are given an array people where people[i] is the weight of the ith person, and an infinite number of boats where each boat can carry a maximum weight of limit. Each boat carries at most two people at the same time, provided the sum of the weight of those people is at most limit.\\nReturn the minimum number of boats to carry every given person.\\n\\xc2\\xa0\\nExample 1:\\nInput: people = [1,2], limit = 3\\nOutput: 1\\nExplanation: 1 boat (1, 2)\\n\\nExample 2:\\nInput: people = [3,2,2,1], limit = 3\\nOutput: 3\\nExplanation: 3 boats (1, 2), (2) and (3)\\n\\nExample 3:\\nInput: people = [3,5,3,4], limit = 5\\nOutput: 4\\nExplanation: 4 boats (3), (3), (4), (5)\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= people.length <= 5 * 104\\n1 <= people[i] <= limit <= 3 * 104\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/reachable-nodes-in-subdivided-graph",
        "Title": "Reachable Nodes In Subdivided Graph ",
        "Description": "b'You are given an undirected graph (the \"original graph\") with n nodes labeled from 0 to n - 1. You decide to subdivide each edge in the graph into a chain of nodes, with the number of new nodes varying between each edge.\\nThe graph is given as a 2D array of edges where edges[i] = [ui, vi, cnti] indicates that there is an edge between nodes ui and vi in the original graph, and cnti is the total number of new nodes that you will subdivide the edge into. Note that cnti == 0 means you will not subdivide the edge.\\nTo subdivide the edge [ui, vi], replace it with (cnti + 1) new edges and cnti new nodes. The new nodes are x1, x2, ..., xcnti, and the new edges are [ui, x1], [x1, x2], [x2, x3], ..., [xcnti-1, xcnti], [xcnti, vi].\\nIn this new graph, you want to know how many nodes are reachable from the node 0, where a node is reachable if the distance is maxMoves or less.\\nGiven the original graph and maxMoves, return the number of nodes that are reachable from node 0 in the new graph.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: edges = [[0,1,10],[0,2,1],[1,2,2]], maxMoves = 6, n = 3\\nOutput: 13\\nExplanation: The edge subdivisions are shown in the image above.\\nThe nodes that are reachable are highlighted in yellow.\\n\\nExample 2:\\nInput: edges = [[0,1,4],[1,2,6],[0,2,8],[1,3,1]], maxMoves = 10, n = 4\\nOutput: 23\\n\\nExample 3:\\nInput: edges = [[1,2,4],[1,4,5],[1,3,1],[2,3,4],[3,4,5]], maxMoves = 17, n = 5\\nOutput: 1\\nExplanation: Node 0 is disconnected from the rest of the graph, so only node 0 is reachable.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n0 <= edges.length <= min(n * (n - 1) / 2, 104)\\nedges[i].length == 3\\n0 <= ui < vi < n\\nThere are no multiple edges in the graph.\\n0 <= cnti <= 104\\n0 <= maxMoves <= 109\\n1 <= n <= 3000\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/projection-area-of-3d-shapes",
        "Title": "Projection Area of 3D Shapes ",
        "Description": "b'You are given an n x n grid where we place some 1 x 1 x 1 cubes that are axis-aligned with the x, y, and z axes.\\nEach value v = grid[i][j] represents a tower of v cubes placed on top of the cell (i, j).\\nWe view the projection of these cubes onto the xy, yz, and zx planes.\\nA projection is like a shadow, that maps our 3-dimensional figure to a 2-dimensional plane. We are viewing the \"shadow\" when looking at the cubes from the top, the front, and the side.\\nReturn the total area of all three projections.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: grid = [[1,2],[3,4]]\\nOutput: 17\\nExplanation: Here are the three projections (\"shadows\") of the shape made with each axis-aligned plane.\\n\\nExample 2:\\nInput: grid = [[2]]\\nOutput: 5\\n\\nExample 3:\\nInput: grid = [[1,0],[0,2]]\\nOutput: 8\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nn == grid.length == grid[i].length\\n1 <= n <= 50\\n0 <= grid[i][j] <= 50\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/uncommon-words-from-two-sentences",
        "Title": "Uncommon Words from Two Sentences ",
        "Description": "b'A sentence is a string of single-space separated words where each word consists only of lowercase letters.\\nA word is uncommon if it appears exactly once in one of the sentences, and does not appear in the other sentence.\\nGiven two sentences s1 and s2, return a list of all the uncommon words. You may return the answer in any order.\\n\\xc2\\xa0\\nExample 1:\\nInput: s1 = \"this apple is sweet\", s2 = \"this apple is sour\"\\nOutput: [\"sweet\",\"sour\"]\\nExample 2:\\nInput: s1 = \"apple apple\", s2 = \"banana\"\\nOutput: [\"banana\"]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= s1.length, s2.length <= 200\\ns1 and s2 consist of lowercase English letters and spaces.\\ns1 and s2 do not have leading or trailing spaces.\\nAll the words in s1 and s2 are separated by a single space.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/spiral-matrix-iii",
        "Title": "Spiral Matrix III ",
        "Description": "b\"You start at the cell (rStart, cStart) of an rows x cols grid facing east. The northwest corner is at the first row and column in the grid, and the southeast corner is at the last row and column.\\nYou will walk in a clockwise spiral shape to visit every position in this grid. Whenever you move outside the grid's boundary, we continue our walk outside the grid (but may return to the grid boundary later.). Eventually, we reach all rows * cols spaces of the grid.\\nReturn an array of coordinates representing the positions of the grid in the order you visited them.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: rows = 1, cols = 4, rStart = 0, cStart = 0\\nOutput: [[0,0],[0,1],[0,2],[0,3]]\\n\\nExample 2:\\n\\nInput: rows = 5, cols = 6, rStart = 1, cStart = 4\\nOutput: [[1,4],[1,5],[2,5],[2,4],[2,3],[1,3],[0,3],[0,4],[0,5],[3,5],[3,4],[3,3],[3,2],[2,2],[1,2],[0,2],[4,5],[4,4],[4,3],[4,2],[4,1],[3,1],[2,1],[1,1],[0,1],[4,0],[3,0],[2,0],[1,0],[0,0]]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= rows, cols <= 100\\n0 <= rStart < rows\\n0 <= cStart < cols\\n\\n\""
    },
    {
        "URL": "https://leetcode.com/problems/possible-bipartition",
        "Title": "Possible Bipartition ",
        "Description": "b'We want to split a group of n people (labeled from 1 to n) into two groups of any size. Each person may dislike some other people, and they should not go into the same group.\\nGiven the integer n and the array dislikes where dislikes[i] = [ai, bi] indicates that the person labeled ai does not like the person labeled bi, return true if it is possible to split everyone into two groups in this way.\\n\\xc2\\xa0\\nExample 1:\\nInput: n = 4, dislikes = [[1,2],[1,3],[2,4]]\\nOutput: true\\nExplanation: group1 [1,4] and group2 [2,3].\\n\\nExample 2:\\nInput: n = 3, dislikes = [[1,2],[1,3],[2,3]]\\nOutput: false\\n\\nExample 3:\\nInput: n = 5, dislikes = [[1,2],[2,3],[3,4],[4,5],[1,5]]\\nOutput: false\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= n <= 2000\\n0 <= dislikes.length <= 104\\ndislikes[i].length == 2\\n1 <= dislikes[i][j] <= n\\nai < bi\\nAll the pairs of dislikes are unique.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/super-egg-drop",
        "Title": "Super Egg Drop ",
        "Description": "b'You are given k identical eggs and you have access to a building with n floors labeled from 1 to n.\\nYou know that there exists a floor f where 0 <= f <= n such that any egg dropped at a floor higher than f will break, and any egg dropped at or below floor f will not break.\\nEach move, you may take an unbroken egg and drop it from any floor x (where 1 <= x <= n). If the egg breaks, you can no longer use it. However, if the egg does not break, you may reuse it in future moves.\\nReturn the minimum number of moves that you need to determine with certainty what the value of f is.\\n\\xc2\\xa0\\nExample 1:\\nInput: k = 1, n = 2\\nOutput: 2\\nExplanation: \\nDrop the egg from floor 1. If it breaks, we know that f = 0.\\nOtherwise, drop the egg from floor 2. If it breaks, we know that f = 1.\\nIf it does not break, then we know f = 2.\\nHence, we need at minimum 2 moves to determine with certainty what the value of f is.\\n\\nExample 2:\\nInput: k = 2, n = 6\\nOutput: 3\\n\\nExample 3:\\nInput: k = 3, n = 14\\nOutput: 4\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= k <= 100\\n1 <= n <= 104\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/fair-candy-swap",
        "Title": "Fair Candy Swap ",
        "Description": "b'Alice and Bob have a different total number of candies. You are given two integer arrays aliceSizes and bobSizes where aliceSizes[i] is the number of candies of the ith box of candy that Alice has and bobSizes[j] is the number of candies of the jth box of candy that Bob has.\\nSince they are friends, they would like to exchange one candy box each so that after the exchange, they both have the same total amount of candy. The total amount of candy a person has is the sum of the number of candies in each box they have.\\nReturn an integer array answer where answer[0] is the number of candies in the box that Alice must exchange, and answer[1] is the number of candies in the box that Bob must exchange. If there are multiple answers, you may return any one of them. It is guaranteed that at least one answer exists.\\n\\xc2\\xa0\\nExample 1:\\nInput: aliceSizes = [1,1], bobSizes = [2,2]\\nOutput: [1,2]\\n\\nExample 2:\\nInput: aliceSizes = [1,2], bobSizes = [2,3]\\nOutput: [1,2]\\n\\nExample 3:\\nInput: aliceSizes = [2], bobSizes = [1,3]\\nOutput: [2,3]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= aliceSizes.length, bobSizes.length <= 104\\n1 <= aliceSizes[i], bobSizes[j] <= 105\\nAlice and Bob have a different total number of candies.\\nThere will be at least one valid answer for the given input.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/construct-binary-tree-from-preorder-and-postorder-traversal",
        "Title": "Construct Binary Tree from Preorder and Postorder Traversal ",
        "Description": "b'Given two integer arrays, preorder and postorder where preorder is the preorder traversal of a binary tree of distinct values and postorder is the postorder traversal of the same tree, reconstruct and return the binary tree.\\nIf there exist multiple answers, you can return any of them.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: preorder = [1,2,4,5,3,6,7], postorder = [4,5,2,6,7,3,1]\\nOutput: [1,2,3,4,5,6,7]\\n\\nExample 2:\\nInput: preorder = [1], postorder = [1]\\nOutput: [1]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= preorder.length <= 30\\n1 <= preorder[i] <= preorder.length\\nAll the values of preorder are unique.\\npostorder.length == preorder.length\\n1 <= postorder[i] <= postorder.length\\nAll the values of postorder are unique.\\nIt is guaranteed that preorder and postorder are the preorder traversal and postorder traversal of the same binary tree.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/find-and-replace-pattern",
        "Title": "Find and Replace Pattern ",
        "Description": "b'Given a list of strings words and a string pattern, return a list of words[i] that match pattern. You may return the answer in any order.\\nA word matches the pattern if there exists a permutation of letters p so that after replacing every letter x in the pattern with p(x), we get the desired word.\\nRecall that a permutation of letters is a bijection from letters to letters: every letter maps to another letter, and no two letters map to the same letter.\\n\\xc2\\xa0\\nExample 1:\\nInput: words = [\"abc\",\"deq\",\"mee\",\"aqq\",\"dkd\",\"ccc\"], pattern = \"abb\"\\nOutput: [\"mee\",\"aqq\"]\\nExplanation: \"mee\" matches the pattern because there is a permutation {a -> m, b -> e, ...}. \\n\"ccc\" does not match the pattern because {a -> c, b -> c, ...} is not a permutation, since a and b map to the same letter.\\n\\nExample 2:\\nInput: words = [\"a\",\"b\",\"c\"], pattern = \"a\"\\nOutput: [\"a\",\"b\",\"c\"]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= pattern.length <= 20\\n1 <= words.length <= 50\\nwords[i].length == pattern.length\\npattern and words[i] are lowercase English letters.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/sum-of-subsequence-widths",
        "Title": "Sum of Subsequence Widths ",
        "Description": "b'The width of a sequence is the difference between the maximum and minimum elements in the sequence.\\nGiven an array of integers nums, return the sum of the widths of all the non-empty subsequences of nums. Since the answer may be very large, return it modulo 109 + 7.\\nA subsequence is a sequence that can be derived from an array by deleting some or no elements without changing the order of the remaining elements. For example, [3,6,2,7] is a subsequence of the array [0,3,1,6,2,2,7].\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [2,1,3]\\nOutput: 6\\nExplanation: The subsequences are [1], [2], [3], [2,1], [2,3], [1,3], [2,1,3].\\nThe corresponding widths are 0, 0, 0, 1, 1, 2, 2.\\nThe sum of these widths is 6.\\n\\nExample 2:\\nInput: nums = [2]\\nOutput: 0\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 105\\n1 <= nums[i] <= 105\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/surface-area-of-3d-shapes",
        "Title": "Surface Area of 3D Shapes ",
        "Description": "b'You are given an n x n grid where you have placed some 1 x 1 x 1 cubes. Each value v = grid[i][j] represents a tower of v cubes placed on top of cell (i, j).\\nAfter placing these cubes, you have decided to glue any directly adjacent cubes to each other, forming several irregular 3D shapes.\\nReturn the total surface area of the resulting shapes.\\nNote: The bottom face of each shape counts toward its surface area.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: grid = [[1,2],[3,4]]\\nOutput: 34\\n\\nExample 2:\\n\\nInput: grid = [[1,1,1],[1,0,1],[1,1,1]]\\nOutput: 32\\n\\nExample 3:\\n\\nInput: grid = [[2,2,2],[2,1,2],[2,2,2]]\\nOutput: 46\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nn == grid.length == grid[i].length\\n1 <= n <= 50\\n0 <= grid[i][j] <= 50\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/groups-of-special-equivalent-strings",
        "Title": "Groups of Special-Equivalent Strings ",
        "Description": "b'You are given an array of strings of the same length words.\\nIn one move, you can swap any two even indexed characters or any two odd indexed characters of a string words[i].\\nTwo strings words[i] and words[j] are special-equivalent if after any number of moves, words[i] == words[j].\\n\\nFor example, words[i] = \"zzxy\" and words[j] = \"xyzz\" are special-equivalent because we may make the moves \"zzxy\" -> \"xzzy\" -> \"xyzz\".\\n\\nA group of special-equivalent strings from words is a non-empty subset of words such that:\\n\\nEvery pair of strings in the group are special equivalent, and\\nThe group is the largest size possible (i.e., there is not a string words[i] not in the group such that words[i] is special-equivalent to every string in the group).\\n\\nReturn the number of groups of special-equivalent strings from words.\\n\\xc2\\xa0\\nExample 1:\\nInput: words = [\"abcd\",\"cdab\",\"cbad\",\"xyzz\",\"zzxy\",\"zzyx\"]\\nOutput: 3\\nExplanation: \\nOne group is [\"abcd\", \"cdab\", \"cbad\"], since they are all pairwise special equivalent, and none of the other strings is all pairwise special equivalent to these.\\nThe other two groups are [\"xyzz\", \"zzxy\"] and [\"zzyx\"].\\nNote that in particular, \"zzxy\" is not special equivalent to \"zzyx\".\\n\\nExample 2:\\nInput: words = [\"abc\",\"acb\",\"bac\",\"bca\",\"cab\",\"cba\"]\\nOutput: 3\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= words.length <= 1000\\n1 <= words[i].length <= 20\\nwords[i] consist of lowercase English letters.\\nAll the strings are of the same length.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/all-possible-full-binary-trees",
        "Title": "All Possible Full Binary Trees ",
        "Description": "b'Given an integer n, return a list of all possible full binary trees with n nodes. Each node of each tree in the answer must have Node.val == 0.\\nEach element of the answer is the root node of one possible tree. You may return the final list of trees in any order.\\nA full binary tree is a binary tree where each node has exactly 0 or 2 children.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: n = 7\\nOutput: [[0,0,0,null,null,0,0,null,null,0,0],[0,0,0,null,null,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,null,null,null,null,0,0],[0,0,0,0,0,null,null,0,0]]\\n\\nExample 2:\\nInput: n = 3\\nOutput: [[0,0,0]]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= n <= 20\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/maximum-frequency-stack",
        "Title": "Maximum Frequency Stack ",
        "Description": "b'Design a stack-like data structure to push elements to the stack and pop the most frequent element from the stack.\\nImplement the FreqStack class:\\n\\nFreqStack() constructs an empty frequency stack.\\nvoid push(int val) pushes an integer val onto the top of the stack.\\nint pop() removes and returns the most frequent element in the stack.\\n\\t\\nIf there is a tie for the most frequent element, the element closest to the stack\\'s top is removed and returned.\\n\\n\\n\\n\\xc2\\xa0\\nExample 1:\\nInput\\n[\"FreqStack\", \"push\", \"push\", \"push\", \"push\", \"push\", \"push\", \"pop\", \"pop\", \"pop\", \"pop\"]\\n[[], [5], [7], [5], [7], [4], [5], [], [], [], []]\\nOutput\\n[null, null, null, null, null, null, null, 5, 7, 5, 4]\\n\\nExplanation\\nFreqStack freqStack = new FreqStack();\\nfreqStack.push(5); // The stack is [5]\\nfreqStack.push(7); // The stack is [5,7]\\nfreqStack.push(5); // The stack is [5,7,5]\\nfreqStack.push(7); // The stack is [5,7,5,7]\\nfreqStack.push(4); // The stack is [5,7,5,7,4]\\nfreqStack.push(5); // The stack is [5,7,5,7,4,5]\\nfreqStack.pop();   // return 5, as 5 is the most frequent. The stack becomes [5,7,5,7,4].\\nfreqStack.pop();   // return 7, as 5 and 7 is the most frequent, but 7 is closest to the top. The stack becomes [5,7,5,4].\\nfreqStack.pop();   // return 5, as 5 is the most frequent. The stack becomes [5,7,4].\\nfreqStack.pop();   // return 4, as 4, 5 and 7 is the most frequent, but 4 is closest to the top. The stack becomes [5,7].\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n0 <= val <= 109\\nAt most 2 * 104 calls will be made to push and pop.\\nIt is guaranteed that there will be at least one element in the stack before calling pop.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/monotonic-array",
        "Title": "Monotonic Array ",
        "Description": "b'An array is monotonic if it is either monotone increasing or monotone decreasing.\\nAn array nums is monotone increasing if for all i <= j, nums[i] <= nums[j]. An array nums is monotone decreasing if for all i <= j, nums[i] >= nums[j].\\nGiven an integer array nums, return true if the given array is monotonic, or false otherwise.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [1,2,2,3]\\nOutput: true\\n\\nExample 2:\\nInput: nums = [6,5,4,4]\\nOutput: true\\n\\nExample 3:\\nInput: nums = [1,3,2]\\nOutput: false\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 105\\n-105 <= nums[i] <= 105\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/increasing-order-search-tree",
        "Title": "Increasing Order Search Tree ",
        "Description": "b'Given the root of a binary search tree, rearrange the tree in in-order so that the leftmost node in the tree is now the root of the tree, and every node has no left child and only one right child.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: root = [5,3,6,2,4,null,8,1,null,null,null,7,9]\\nOutput: [1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9]\\n\\nExample 2:\\n\\nInput: root = [5,1,7]\\nOutput: [1,null,5,null,7]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of nodes in the given tree will be in the range [1, 100].\\n0 <= Node.val <= 1000\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/bitwise-ors-of-subarrays",
        "Title": "Bitwise ORs of Subarrays ",
        "Description": "b'We have an array arr of non-negative integers.\\nFor every (contiguous) subarray sub = [arr[i], arr[i + 1], ..., arr[j]] (with i <= j), we take the bitwise OR of all the elements in sub, obtaining a result arr[i] | arr[i + 1] | ... | arr[j].\\nReturn the number of possible results. Results that occur more than once are only counted once in the final answer\\n\\xc2\\xa0\\nExample 1:\\nInput: arr = [0]\\nOutput: 1\\nExplanation: There is only one possible result: 0.\\n\\nExample 2:\\nInput: arr = [1,1,2]\\nOutput: 3\\nExplanation: The possible subarrays are [1], [1], [2], [1, 1], [1, 2], [1, 1, 2].\\nThese yield the results 1, 1, 2, 1, 3, 3.\\nThere are 3 unique values, so the answer is 3.\\n\\nExample 3:\\nInput: arr = [1,2,4]\\nOutput: 6\\nExplanation: The possible results are 1, 2, 3, 4, 6, and 7.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 5 * 104\\n0 <= nums[i]\\xc2\\xa0<= 109\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/orderly-queue",
        "Title": "Orderly Queue ",
        "Description": "b'You are given a string s and an integer k. You can choose one of the first k letters of s and append it at the end of the string..\\nReturn the lexicographically smallest string you could have after applying the mentioned step any number of moves.\\n\\xc2\\xa0\\nExample 1:\\nInput: s = \"cba\", k = 1\\nOutput: \"acb\"\\nExplanation: \\nIn the first move, we move the 1st character \\'c\\' to the end, obtaining the string \"bac\".\\nIn the second move, we move the 1st character \\'b\\' to the end, obtaining the final result \"acb\".\\n\\nExample 2:\\nInput: s = \"baaca\", k = 3\\nOutput: \"aaabc\"\\nExplanation: \\nIn the first move, we move the 1st character \\'b\\' to the end, obtaining the string \"aacab\".\\nIn the second move, we move the 3rd character \\'c\\' to the end, obtaining the final result \"aaabc\".\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= k <= s.length <= 1000\\ns consist of lowercase English letters.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/rle-iterator",
        "Title": "RLE Iterator ",
        "Description": "b'We can use run-length encoding (i.e., RLE) to encode a sequence of integers. In a run-length encoded array of even length encoding (0-indexed), for all even i, encoding[i] tells us the number of times that the non-negative integer value encoding[i + 1] is repeated in the sequence.\\n\\nFor example, the sequence arr = [8,8,8,5,5] can be encoded to be encoding = [3,8,2,5]. encoding = [3,8,0,9,2,5] and encoding = [2,8,1,8,2,5] are also valid RLE of arr.\\n\\nGiven a run-length encoded array, design an iterator that iterates through it.\\nImplement the RLEIterator class:\\n\\nRLEIterator(int[] encoded) Initializes the object with the encoded array encoded.\\nint next(int n) Exhausts the next n elements and returns the last element exhausted in this way. If there is no element left to exhaust, return -1 instead.\\n\\n\\xc2\\xa0\\nExample 1:\\nInput\\n[\"RLEIterator\", \"next\", \"next\", \"next\", \"next\"]\\n[[[3, 8, 0, 9, 2, 5]], [2], [1], [1], [2]]\\nOutput\\n[null, 8, 8, 5, -1]\\n\\nExplanation\\nRLEIterator rLEIterator = new RLEIterator([3, 8, 0, 9, 2, 5]); // This maps to the sequence [8,8,8,5,5].\\nrLEIterator.next(2); // exhausts 2 terms of the sequence, returning 8. The remaining sequence is now [8, 5, 5].\\nrLEIterator.next(1); // exhausts 1 term of the sequence, returning 8. The remaining sequence is now [5, 5].\\nrLEIterator.next(1); // exhausts 1 term of the sequence, returning 5. The remaining sequence is now [5].\\nrLEIterator.next(2); // exhausts 2 terms, returning -1. This is because the first term exhausted was 5,\\nbut the second term did not exist. Since the last term exhausted does not exist, we return -1.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n2 <= encoding.length <= 1000\\nencoding.length is even.\\n0 <= encoding[i] <= 109\\n1 <= n <= 109\\nAt most 1000 calls will be made to next.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/online-stock-span",
        "Title": "Online Stock Span ",
        "Description": "b'Design an algorithm that collects daily price quotes for some stock and returns the span of that stock\\'s price for the current day.\\nThe span of the stock\\'s price today is defined as the maximum number of consecutive days (starting from today and going backward) for which the stock price was less than or equal to today\\'s price.\\n\\nFor example, if the price of a stock over the next 7 days were [100,80,60,70,60,75,85], then the stock spans would be [1,1,1,2,1,4,6].\\n\\nImplement the StockSpanner class:\\n\\nStockSpanner() Initializes the object of the class.\\nint next(int price) Returns the span of the stock\\'s price given that today\\'s price is price.\\n\\n\\xc2\\xa0\\nExample 1:\\nInput\\n[\"StockSpanner\", \"next\", \"next\", \"next\", \"next\", \"next\", \"next\", \"next\"]\\n[[], [100], [80], [60], [70], [60], [75], [85]]\\nOutput\\n[null, 1, 1, 1, 2, 1, 4, 6]\\n\\nExplanation\\nStockSpanner stockSpanner = new StockSpanner();\\nstockSpanner.next(100); // return 1\\nstockSpanner.next(80);  // return 1\\nstockSpanner.next(60);  // return 1\\nstockSpanner.next(70);  // return 2\\nstockSpanner.next(60);  // return 1\\nstockSpanner.next(75);  // return 4, because the last 4 prices (including today\\'s price of 75) were less than or equal to today\\'s price.\\nstockSpanner.next(85);  // return 6\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= price <= 105\\nAt most 104 calls will be made to next.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/numbers-at-most-n-given-digit-set",
        "Title": "Numbers At Most N Given Digit Set ",
        "Description": "b'Given an array of digits which is sorted in non-decreasing order. You can write numbers using each digits[i] as many times as we want. For example, if digits = [\\'1\\',\\'3\\',\\'5\\'], we may write numbers such as \\'13\\', \\'551\\', and \\'1351315\\'.\\nReturn the number of positive integers that can be generated that are less than or equal to a given integer n.\\n\\xc2\\xa0\\nExample 1:\\nInput: digits = [\"1\",\"3\",\"5\",\"7\"], n = 100\\nOutput: 20\\nExplanation: \\nThe 20 numbers that can be written are:\\n1, 3, 5, 7, 11, 13, 15, 17, 31, 33, 35, 37, 51, 53, 55, 57, 71, 73, 75, 77.\\n\\nExample 2:\\nInput: digits = [\"1\",\"4\",\"9\"], n = 1000000000\\nOutput: 29523\\nExplanation: \\nWe can write 3 one digit numbers, 9 two digit numbers, 27 three digit numbers,\\n81 four digit numbers, 243 five digit numbers, 729 six digit numbers,\\n2187 seven digit numbers, 6561 eight digit numbers, and 19683 nine digit numbers.\\nIn total, this is 29523 integers that can be written using the digits array.\\n\\nExample 3:\\nInput: digits = [\"7\"], n = 8\\nOutput: 1\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= digits.length <= 9\\ndigits[i].length == 1\\ndigits[i] is a digit from\\xc2\\xa0\\'1\\'\\xc2\\xa0to \\'9\\'.\\nAll the values in\\xc2\\xa0digits are unique.\\ndigits is sorted in\\xc2\\xa0non-decreasing order.\\n1 <= n <= 109\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/valid-permutations-for-di-sequence",
        "Title": "Valid Permutations for DI Sequence ",
        "Description": "b'You are given a string s of length n where s[i] is either:\\n\\n\\'D\\' means decreasing, or\\n\\'I\\' means increasing.\\n\\nA permutation perm of n + 1 integers of all the integers in the range [0, n] is called a valid permutation if for all valid i:\\n\\nIf s[i] == \\'D\\', then perm[i] > perm[i + 1], and\\nIf s[i] == \\'I\\', then perm[i] < perm[i + 1].\\n\\nReturn the number of valid permutations perm. Since the answer may be large, return it modulo 109 + 7.\\n\\xc2\\xa0\\nExample 1:\\nInput: s = \"DID\"\\nOutput: 5\\nExplanation: The 5 valid permutations of (0, 1, 2, 3) are:\\n(1, 0, 3, 2)\\n(2, 0, 3, 1)\\n(2, 1, 3, 0)\\n(3, 0, 2, 1)\\n(3, 1, 2, 0)\\n\\nExample 2:\\nInput: s = \"D\"\\nOutput: 1\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nn == s.length\\n1 <= n <= 200\\ns[i] is either \\'I\\' or \\'D\\'.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/fruit-into-baskets",
        "Title": "Fruit Into Baskets ",
        "Description": "b'You are visiting a farm that has a single row of fruit trees arranged from left to right. The trees are represented by an integer array fruits where fruits[i] is the type of fruit the ith tree produces.\\nYou want to collect as much fruit as possible. However, the owner has some strict rules that you must follow:\\n\\nYou only have two baskets, and each basket can only hold a single type of fruit. There is no limit on the amount of fruit each basket can hold.\\nStarting from any tree of your choice, you must pick exactly one fruit from every tree (including the start tree) while moving to the right. The picked fruits must fit in one of your baskets.\\nOnce you reach a tree with fruit that cannot fit in your baskets, you must stop.\\n\\nGiven the integer array fruits, return the maximum number of fruits you can pick.\\n\\xc2\\xa0\\nExample 1:\\nInput: fruits = [1,2,1]\\nOutput: 3\\nExplanation: We can pick from all 3 trees.\\n\\nExample 2:\\nInput: fruits = [0,1,2,2]\\nOutput: 3\\nExplanation: We can pick from trees [1,2,2].\\nIf we had started at the first tree, we would only pick from trees [0,1].\\n\\nExample 3:\\nInput: fruits = [1,2,3,2,2]\\nOutput: 4\\nExplanation: We can pick from trees [2,3,2,2].\\nIf we had started at the first tree, we would only pick from trees [1,2].\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= fruits.length <= 105\\n0 <= fruits[i] < fruits.length\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/sort-array-by-parity",
        "Title": "Sort Array By Parity ",
        "Description": "b'Given an integer array nums, move all the even integers at the beginning of the array followed by all the odd integers.\\nReturn any array that satisfies this condition.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [3,1,2,4]\\nOutput: [2,4,3,1]\\nExplanation: The outputs [4,2,3,1], [2,4,1,3], and [4,2,1,3] would also be accepted.\\n\\nExample 2:\\nInput: nums = [0]\\nOutput: [0]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 5000\\n0 <= nums[i] <= 5000\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/super-palindromes",
        "Title": "Super Palindromes ",
        "Description": "b'Let\\'s say a positive integer is a super-palindrome if it is a palindrome, and it is also the square of a palindrome.\\nGiven two positive integers left and right represented as strings, return the number of super-palindromes integers in the inclusive range [left, right].\\n\\xc2\\xa0\\nExample 1:\\nInput: left = \"4\", right = \"1000\"\\nOutput: 4\\nExplanation: 4, 9, 121, and 484 are superpalindromes.\\nNote that 676 is not a superpalindrome: 26 * 26 = 676, but 26 is not a palindrome.\\n\\nExample 2:\\nInput: left = \"1\", right = \"2\"\\nOutput: 1\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= left.length, right.length <= 18\\nleft and right consist of only digits.\\nleft and right cannot have leading zeros.\\nleft and right represent integers in the range [1, 1018 - 1].\\nleft is less than or equal to right.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/sum-of-subarray-minimums",
        "Title": "Sum of Subarray Minimums ",
        "Description": "b'Given an array of integers arr, find the sum of min(b), where b ranges over every (contiguous) subarray of arr. Since the answer may be large, return the answer modulo 109 + 7.\\n\\xc2\\xa0\\nExample 1:\\nInput: arr = [3,1,2,4]\\nOutput: 17\\nExplanation: \\nSubarrays are [3], [1], [2], [4], [3,1], [1,2], [2,4], [3,1,2], [1,2,4], [3,1,2,4]. \\nMinimums are 3, 1, 2, 4, 1, 1, 2, 1, 1, 1.\\nSum is 17.\\n\\nExample 2:\\nInput: arr = [11,81,94,43,3]\\nOutput: 444\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= arr.length <= 3 * 104\\n1 <= arr[i] <= 3 * 104\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/smallest-range-i",
        "Title": "Smallest Range I ",
        "Description": "b'You are given an integer array nums and an integer k.\\nIn one operation, you can choose any index i where 0 <= i < nums.length and change nums[i] to nums[i] + x where x is an integer from the range [-k, k]. You can apply this operation at most once for each index i.\\nThe score of nums is the difference between the maximum and minimum elements in nums.\\nReturn the minimum score of nums after applying the mentioned operation at most once for each index in it.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [1], k = 0\\nOutput: 0\\nExplanation: The score is max(nums) - min(nums) = 1 - 1 = 0.\\n\\nExample 2:\\nInput: nums = [0,10], k = 2\\nOutput: 6\\nExplanation: Change nums to be [2, 8]. The score is max(nums) - min(nums) = 8 - 2 = 6.\\n\\nExample 3:\\nInput: nums = [1,3,6], k = 3\\nOutput: 0\\nExplanation: Change nums to be [4, 4, 4]. The score is max(nums) - min(nums) = 4 - 4 = 0.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 104\\n0 <= nums[i] <= 104\\n0 <= k <= 104\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/snakes-and-ladders",
        "Title": "Snakes and Ladders ",
        "Description": "b'You are given an n x n integer matrix board where the cells are labeled from 1 to n2 in a Boustrophedon style starting from the bottom left of the board (i.e. board[n - 1][0]) and alternating direction each row.\\nYou start on square 1 of the board. In each move, starting from square curr, do the following:\\n\\nChoose a destination square next with a label in the range [curr + 1, min(curr + 6, n2)].\\n\\n\\t\\nThis choice simulates the result of a standard 6-sided die roll: i.e., there are always at most 6 destinations, regardless of the size of the board.\\n\\n\\nIf next has a snake or ladder, you must move to the destination of that snake or ladder. Otherwise, you move to next.\\nThe game ends when you reach the square n2.\\n\\nA board square on row r and column c has a snake or ladder if board[r][c] != -1. The destination of that snake or ladder is board[r][c]. Squares 1 and n2 do not have a snake or ladder.\\nNote that you only take a snake or ladder at most once per move. If the destination to a snake or ladder is the start of another snake or ladder, you do not follow the subsequent\\xc2\\xa0snake or ladder.\\n\\nFor example, suppose the board is [[-1,4],[-1,3]], and on the first move, your destination square is 2. You follow the ladder to square 3, but do not follow the subsequent ladder to 4.\\n\\nReturn the least number of moves required to reach the square n2. If it is not possible to reach the square, return -1.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: board = [[-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1],[-1,35,-1,-1,13,-1],[-1,-1,-1,-1,-1,-1],[-1,15,-1,-1,-1,-1]]\\nOutput: 4\\nExplanation: \\nIn the beginning, you start at square 1 (at row 5, column 0).\\nYou decide to move to square 2 and must take the ladder to square 15.\\nYou then decide to move to square 17 and must take the snake to square 13.\\nYou then decide to move to square 14 and must take the ladder to square 35.\\nYou then decide to move to square 36, ending the game.\\nThis is the lowest possible number of moves to reach the last square, so return 4.\\n\\nExample 2:\\nInput: board = [[-1,-1],[-1,3]]\\nOutput: 1\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nn == board.length == board[i].length\\n2 <= n <= 20\\ngrid[i][j] is either -1 or in the range [1, n2].\\nThe squares labeled 1 and n2 do not have any ladders or snakes.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/smallest-range-ii",
        "Title": "Smallest Range II ",
        "Description": "b'You are given an integer array nums and an integer k.\\nFor each index i where 0 <= i < nums.length, change nums[i] to be either nums[i] + k or nums[i] - k.\\nThe score of nums is the difference between the maximum and minimum elements in nums.\\nReturn the minimum score of nums after changing the values at each index.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [1], k = 0\\nOutput: 0\\nExplanation: The score is max(nums) - min(nums) = 1 - 1 = 0.\\n\\nExample 2:\\nInput: nums = [0,10], k = 2\\nOutput: 6\\nExplanation: Change nums to be [2, 8]. The score is max(nums) - min(nums) = 8 - 2 = 6.\\n\\nExample 3:\\nInput: nums = [1,3,6], k = 3\\nOutput: 3\\nExplanation: Change nums to be [4, 6, 3]. The score is max(nums) - min(nums) = 6 - 3 = 3.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 104\\n0 <= nums[i] <= 104\\n0 <= k <= 104\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/online-election",
        "Title": "Online Election ",
        "Description": "b'You are given two integer arrays persons and times. In an election, the ith vote was cast for persons[i] at time times[i].\\nFor each query at a time t, find the person that was leading the election at time t. Votes cast at time t will count towards our query. In the case of a tie, the most recent vote (among tied candidates) wins.\\nImplement the TopVotedCandidate class:\\n\\nTopVotedCandidate(int[] persons, int[] times) Initializes the object with the persons and times arrays.\\nint q(int t) Returns the number of the person that was leading the election at time t according to the mentioned rules.\\n\\n\\xc2\\xa0\\nExample 1:\\nInput\\n[\"TopVotedCandidate\", \"q\", \"q\", \"q\", \"q\", \"q\", \"q\"]\\n[[[0, 1, 1, 0, 0, 1, 0], [0, 5, 10, 15, 20, 25, 30]], [3], [12], [25], [15], [24], [8]]\\nOutput\\n[null, 0, 1, 1, 0, 0, 1]\\n\\nExplanation\\nTopVotedCandidate topVotedCandidate = new TopVotedCandidate([0, 1, 1, 0, 0, 1, 0], [0, 5, 10, 15, 20, 25, 30]);\\ntopVotedCandidate.q(3); // return 0, At time 3, the votes are [0], and 0 is leading.\\ntopVotedCandidate.q(12); // return 1, At time 12, the votes are [0,1,1], and 1 is leading.\\ntopVotedCandidate.q(25); // return 1, At time 25, the votes are [0,1,1,0,0,1], and 1 is leading (as ties go to the most recent vote.)\\ntopVotedCandidate.q(15); // return 0\\ntopVotedCandidate.q(24); // return 0\\ntopVotedCandidate.q(8); // return 1\\n\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= persons.length <= 5000\\ntimes.length == persons.length\\n0 <= persons[i] < persons.length\\n0 <= times[i] <= 109\\ntimes is sorted in a strictly increasing order.\\ntimes[0] <= t <= 109\\nAt most 104 calls will be made to q.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/sort-an-array",
        "Title": "Sort an Array ",
        "Description": "b'Given an array of integers nums, sort the array in ascending order.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [5,2,3,1]\\nOutput: [1,2,3,5]\\nExample 2:\\nInput: nums = [5,1,1,2,0,0]\\nOutput: [0,0,1,1,2,5]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 5 * 104\\n-5 * 104 <= nums[i] <= 5 * 104\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/cat-and-mouse",
        "Title": "Cat and Mouse ",
        "Description": "b\"A game on an undirected graph is played by two players, Mouse and Cat, who alternate turns.\\nThe graph is given as follows: graph[a] is a list of all nodes b such that ab is an edge of the graph.\\nThe mouse starts at node 1 and goes first, the cat starts at node 2 and goes second, and there is a hole at node 0.\\nDuring each player's turn, they must travel along one\\xc2\\xa0edge of the graph that meets where they are.\\xc2\\xa0 For example, if the Mouse is at node 1, it must travel to any node in graph[1].\\nAdditionally, it is not allowed for the Cat to travel to the Hole (node 0.)\\nThen, the game can end in three\\xc2\\xa0ways:\\n\\nIf ever the Cat occupies the same node as the Mouse, the Cat wins.\\nIf ever the Mouse reaches the Hole, the Mouse wins.\\nIf ever a position is repeated (i.e., the players are in the same position as a previous turn, and\\xc2\\xa0it is the same player's turn to move), the game is a draw.\\n\\nGiven a graph, and assuming both players play optimally, return\\n\\n1\\xc2\\xa0if the mouse wins the game,\\n2\\xc2\\xa0if the cat wins the game, or\\n0\\xc2\\xa0if the game is a draw.\\n\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: graph = [[2,5],[3],[0,4,5],[1,4,5],[2,3],[0,2,3]]\\nOutput: 0\\n\\nExample 2:\\n\\nInput: graph = [[1,3],[0],[3],[0,2]]\\nOutput: 1\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n3 <= graph.length <= 50\\n1\\xc2\\xa0<= graph[i].length < graph.length\\n0 <= graph[i][j] < graph.length\\ngraph[i][j] != i\\ngraph[i] is unique.\\nThe mouse and the cat can always move.\\xc2\\xa0\\n\\n\""
    },
    {
        "URL": "https://leetcode.com/problems/x-of-a-kind-in-a-deck-of-cards",
        "Title": "X of a Kind in a Deck of Cards ",
        "Description": "b'In a deck of cards, each card has an integer written on it.\\nReturn true if and only if you can choose X >= 2 such that it is possible to split the entire deck into 1 or more groups of cards, where:\\n\\nEach group has exactly X cards.\\nAll the cards in each group have the same integer.\\n\\n\\xc2\\xa0\\nExample 1:\\nInput: deck = [1,2,3,4,4,3,2,1]\\nOutput: true\\nExplanation: Possible partition [1,1],[2,2],[3,3],[4,4].\\n\\nExample 2:\\nInput: deck = [1,1,1,2,2,2,3,3]\\nOutput: false\\nExplanation: No possible partition.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= deck.length <= 104\\n0 <= deck[i] < 104\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/partition-array-into-disjoint-intervals",
        "Title": "Partition Array into Disjoint Intervals ",
        "Description": "b'Given an integer array nums, partition it into two (contiguous) subarrays left and right so that:\\n\\nEvery element in left is less than or equal to every element in right.\\nleft and right are non-empty.\\nleft has the smallest possible size.\\n\\nReturn the length of left after such a partitioning.\\nTest cases are generated such that partitioning exists.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [5,0,3,8,6]\\nOutput: 3\\nExplanation: left = [5,0,3], right = [8,6]\\n\\nExample 2:\\nInput: nums = [1,1,1,0,6,12]\\nOutput: 4\\nExplanation: left = [1,1,1,0], right = [6,12]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n2 <= nums.length <= 105\\n0 <= nums[i] <= 106\\nThere is at least one valid answer for the given input.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/word-subsets",
        "Title": "Word Subsets ",
        "Description": "b'You are given two string arrays words1 and words2.\\nA string b is a subset of string a if every letter in b occurs in a including multiplicity.\\n\\nFor example, \"wrr\" is a subset of \"warrior\" but is not a subset of \"world\".\\n\\nA string a from words1 is universal if for every string b in words2, b is a subset of a.\\nReturn an array of all the universal strings in words1. You may return the answer in any order.\\n\\xc2\\xa0\\nExample 1:\\nInput: words1 = [\"amazon\",\"apple\",\"facebook\",\"google\",\"leetcode\"], words2 = [\"e\",\"o\"]\\nOutput: [\"facebook\",\"google\",\"leetcode\"]\\n\\nExample 2:\\nInput: words1 = [\"amazon\",\"apple\",\"facebook\",\"google\",\"leetcode\"], words2 = [\"l\",\"e\"]\\nOutput: [\"apple\",\"google\",\"leetcode\"]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= words1.length, words2.length <= 104\\n1 <= words1[i].length, words2[i].length <= 10\\nwords1[i] and words2[i] consist only of lowercase English letters.\\nAll the strings of words1 are unique.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/reverse-only-letters",
        "Title": "Reverse Only Letters ",
        "Description": "b'Given a string s, reverse the string according to the following rules:\\n\\nAll the characters that are not English letters remain in the same position.\\nAll the English letters (lowercase or uppercase) should be reversed.\\n\\nReturn s after reversing it.\\n\\xc2\\xa0\\nExample 1:\\nInput: s = \"ab-cd\"\\nOutput: \"dc-ba\"\\nExample 2:\\nInput: s = \"a-bC-dEf-ghIj\"\\nOutput: \"j-Ih-gfE-dCba\"\\nExample 3:\\nInput: s = \"Test1ng-Leet=code-Q!\"\\nOutput: \"Qedo1ct-eeLg=ntse-T!\"\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= s.length <= 100\\ns consists of characters with ASCII values in the range [33, 122].\\ns does not contain \\'\\\\\"\\' or \\'\\\\\\\\\\'.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/maximum-sum-circular-subarray",
        "Title": "Maximum Sum Circular Subarray ",
        "Description": "b'Given a circular integer array nums of length n, return the maximum possible sum of a non-empty subarray of nums.\\nA circular array means the end of the array connects to the beginning of the array. Formally, the next element of nums[i] is nums[(i + 1) % n] and the previous element of nums[i] is nums[(i - 1 + n) % n].\\nA subarray may only include each element of the fixed buffer nums at most once. Formally, for a subarray nums[i], nums[i + 1], ..., nums[j], there does not exist i <= k1, k2 <= j with k1 % n == k2 % n.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [1,-2,3,-2]\\nOutput: 3\\nExplanation: Subarray [3] has maximum sum 3.\\n\\nExample 2:\\nInput: nums = [5,-3,5]\\nOutput: 10\\nExplanation: Subarray [5,5] has maximum sum 5 + 5 = 10.\\n\\nExample 3:\\nInput: nums = [-3,-2,-3]\\nOutput: -2\\nExplanation: Subarray [-2] has maximum sum -2.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nn == nums.length\\n1 <= n <= 3 * 104\\n-3 * 104 <= nums[i] <= 3 * 104\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/complete-binary-tree-inserter",
        "Title": "Complete Binary Tree Inserter ",
        "Description": "b'A complete binary tree is a binary tree in which every level, except possibly the last, is completely filled, and all nodes are as far left as possible.\\nDesign an algorithm to insert a new node to a complete binary tree keeping it complete after the insertion.\\nImplement the CBTInserter class:\\n\\nCBTInserter(TreeNode root) Initializes the data structure with the root of the complete binary tree.\\nint insert(int v) Inserts a TreeNode into the tree with value Node.val == val so that the tree remains complete, and returns the value of the parent of the inserted TreeNode.\\nTreeNode get_root() Returns the root node of the tree.\\n\\n\\xc2\\xa0\\nExample 1:\\n\\nInput\\n[\"CBTInserter\", \"insert\", \"insert\", \"get_root\"]\\n[[[1, 2]], [3], [4], []]\\nOutput\\n[null, 1, 2, [1, 2, 3, 4]]\\n\\nExplanation\\nCBTInserter cBTInserter = new CBTInserter([1, 2]);\\ncBTInserter.insert(3);  // return 1\\ncBTInserter.insert(4);  // return 2\\ncBTInserter.get_root(); // return [1, 2, 3, 4]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of nodes in the tree will be in the range [1, 1000].\\n0 <= Node.val <= 5000\\nroot is a complete binary tree.\\n0 <= val <= 5000\\nAt most 104 calls will be made to insert and get_root.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/number-of-music-playlists",
        "Title": "Number of Music Playlists ",
        "Description": "b'Your music player contains n different songs. You want to listen to goal songs (not necessarily different) during your trip. To avoid boredom, you will create a playlist so that:\\n\\nEvery song is played at least once.\\nA song can only be played again only if k other songs have been played.\\n\\nGiven n, goal, and k, return the number of possible playlists that you can create. Since the answer can be very large, return it modulo 109 + 7.\\n\\xc2\\xa0\\nExample 1:\\nInput: n = 3, goal = 3, k = 1\\nOutput: 6\\nExplanation: There are 6 possible playlists: [1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], and [3, 2, 1].\\n\\nExample 2:\\nInput: n = 2, goal = 3, k = 0\\nOutput: 6\\nExplanation: There are 6 possible playlists: [1, 1, 2], [1, 2, 1], [2, 1, 1], [2, 2, 1], [2, 1, 2], and [1, 2, 2].\\n\\nExample 3:\\nInput: n = 2, goal = 3, k = 1\\nOutput: 2\\nExplanation: There are 2 possible playlists: [1, 2, 1] and [2, 1, 2].\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n0 <= k < n <= goal <= 100\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/minimum-add-to-make-parentheses-valid",
        "Title": "Minimum Add to Make Parentheses Valid ",
        "Description": "b'A parentheses string is valid if and only if:\\n\\nIt is the empty string,\\nIt can be written as AB (A concatenated with B), where A and B are valid strings, or\\nIt can be written as (A), where A is a valid string.\\n\\nYou are given a parentheses string s. In one move, you can insert a parenthesis at any position of the string.\\n\\nFor example, if s = \"()))\", you can insert an opening parenthesis to be \"(()))\" or a closing parenthesis to be \"())))\".\\n\\nReturn the minimum number of moves required to make s valid.\\n\\xc2\\xa0\\nExample 1:\\nInput: s = \"())\"\\nOutput: 1\\n\\nExample 2:\\nInput: s = \"(((\"\\nOutput: 3\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= s.length <= 1000\\ns[i] is either \\'(\\' or \\')\\'.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/sort-array-by-parity-ii",
        "Title": "Sort Array By Parity II ",
        "Description": "b'Given an array of integers nums, half of the integers in nums are odd, and the other half are even.\\nSort the array so that whenever nums[i] is odd, i is odd, and whenever nums[i] is even, i is even.\\nReturn any answer array that satisfies this condition.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [4,2,5,7]\\nOutput: [4,5,2,7]\\nExplanation: [4,7,2,5], [2,5,4,7], [2,7,4,5] would also have been accepted.\\n\\nExample 2:\\nInput: nums = [2,3]\\nOutput: [2,3]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n2 <= nums.length <= 2 * 104\\nnums.length is even.\\nHalf of the integers in nums are even.\\n0 <= nums[i] <= 1000\\n\\n\\xc2\\xa0\\nFollow Up: Could you solve it in-place?\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/3sum-with-multiplicity",
        "Title": "3Sum With Multiplicity ",
        "Description": "b'Given an integer array arr, and an integer target, return the number of tuples i, j, k such that i < j < k and arr[i] + arr[j] + arr[k] == target.\\nAs the answer can be very large, return it modulo 109 + 7.\\n\\xc2\\xa0\\nExample 1:\\nInput: arr = [1,1,2,2,3,3,4,4,5,5], target = 8\\nOutput: 20\\nExplanation: \\nEnumerating by the values (arr[i], arr[j], arr[k]):\\n(1, 2, 5) occurs 8 times;\\n(1, 3, 4) occurs 8 times;\\n(2, 2, 4) occurs 2 times;\\n(2, 3, 3) occurs 2 times.\\n\\nExample 2:\\nInput: arr = [1,1,2,2,2,2], target = 5\\nOutput: 12\\nExplanation: \\narr[i] = 1, arr[j] = arr[k] = 2 occurs 12 times:\\nWe choose one 1 from [1,1] in 2 ways,\\nand two 2s from [2,2,2,2] in 6 ways.\\n\\nExample 3:\\nInput: arr = [2,1,3], target = 6\\nOutput: 1\\nExplanation: (1, 2, 3) occured one time in the array so we return 1.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n3 <= arr.length <= 3000\\n0 <= arr[i] <= 100\\n0 <= target <= 300\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/minimize-malware-spread",
        "Title": "Minimize Malware Spread ",
        "Description": "b'You are given a network of n nodes represented as an n x n adjacency matrix graph, where the ith node is directly connected to the jth node if graph[i][j] == 1.\\nSome nodes initial are initially infected by malware. Whenever two nodes are directly connected, and at least one of those two nodes is infected by malware, both nodes will be infected by malware. This spread of malware will continue until no more nodes can be infected in this manner.\\nSuppose M(initial) is the final number of nodes infected with malware in the entire network after the spread of malware stops. We will remove exactly one node from initial.\\nReturn the node that, if removed, would minimize M(initial). If multiple nodes could be removed to minimize M(initial), return such a node with the smallest index.\\nNote that if a node was removed from the initial list of infected nodes, it might still be infected later due to the malware spread.\\n\\xc2\\xa0\\nExample 1:\\nInput: graph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1]\\nOutput: 0\\nExample 2:\\nInput: graph = [[1,0,0],[0,1,0],[0,0,1]], initial = [0,2]\\nOutput: 0\\nExample 3:\\nInput: graph = [[1,1,1],[1,1,1],[1,1,1]], initial = [1,2]\\nOutput: 1\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nn == graph.length\\nn == graph[i].length\\n2 <= n <= 300\\ngraph[i][j] is 0 or 1.\\ngraph[i][j] == graph[j][i]\\ngraph[i][i] == 1\\n1 <= initial.length <= n\\n0 <= initial[i] <= n - 1\\nAll the integers in initial are unique.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/long-pressed-name",
        "Title": "Long Pressed Name ",
        "Description": "b'Your friend is typing his name into a keyboard. Sometimes, when typing a character c, the key might get long pressed, and the character will be typed 1 or more times.\\nYou examine the typed characters of the keyboard. Return True if it is possible that it was your friends name, with some characters (possibly none) being long pressed.\\n\\xc2\\xa0\\nExample 1:\\nInput: name = \"alex\", typed = \"aaleex\"\\nOutput: true\\nExplanation: \\'a\\' and \\'e\\' in \\'alex\\' were long pressed.\\n\\nExample 2:\\nInput: name = \"saeed\", typed = \"ssaaedd\"\\nOutput: false\\nExplanation: \\'e\\' must have been pressed twice, but it was not in the typed output.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= name.length, typed.length <= 1000\\nname and typed consist of only lowercase English letters.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/flip-string-to-monotone-increasing",
        "Title": "Flip String to Monotone Increasing ",
        "Description": "b'A binary string is monotone increasing if it consists of some number of 0\\'s (possibly none), followed by some number of 1\\'s (also possibly none).\\nYou are given a binary string s. You can flip s[i] changing it from 0 to 1 or from 1 to 0.\\nReturn the minimum number of flips to make s monotone increasing.\\n\\xc2\\xa0\\nExample 1:\\nInput: s = \"00110\"\\nOutput: 1\\nExplanation: We flip the last digit to get 00111.\\n\\nExample 2:\\nInput: s = \"010110\"\\nOutput: 2\\nExplanation: We flip to get 011111, or alternatively 000111.\\n\\nExample 3:\\nInput: s = \"00011000\"\\nOutput: 2\\nExplanation: We flip to get 00000000.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= s.length <= 105\\ns[i] is either \\'0\\' or \\'1\\'.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/three-equal-parts",
        "Title": "Three Equal Parts ",
        "Description": "b'You are given an array arr which consists of only zeros and ones, divide the array into three non-empty parts such that all of these parts represent the same binary value.\\nIf it is possible, return any [i, j] with i + 1 < j, such that:\\n\\narr[0], arr[1], ..., arr[i] is the first part,\\narr[i + 1], arr[i + 2], ..., arr[j - 1] is the second part, and\\narr[j], arr[j + 1], ..., arr[arr.length - 1] is the third part.\\nAll three parts have equal binary values.\\n\\nIf it is not possible, return [-1, -1].\\nNote that the entire part is used when considering what binary value it represents. For example, [1,1,0] represents 6 in decimal, not 3. Also, leading zeros are allowed, so [0,1,1] and [1,1] represent the same value.\\n\\xc2\\xa0\\nExample 1:\\nInput: arr = [1,0,1,0,1]\\nOutput: [0,3]\\nExample 2:\\nInput: arr = [1,1,0,1,1]\\nOutput: [-1,-1]\\nExample 3:\\nInput: arr = [1,1,0,0,1]\\nOutput: [0,2]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n3 <= arr.length <= 3 * 104\\narr[i] is 0 or 1\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/minimize-malware-spread-ii",
        "Title": "Minimize Malware Spread II ",
        "Description": "b'You are given a network of n nodes represented as an n x n adjacency matrix graph, where the ith node is directly connected to the jth node if graph[i][j] == 1.\\nSome nodes initial are initially infected by malware. Whenever two nodes are directly connected, and at least one of those two nodes is infected by malware, both nodes will be infected by malware. This spread of malware will continue until no more nodes can be infected in this manner.\\nSuppose M(initial) is the final number of nodes infected with malware in the entire network after the spread of malware stops.\\nWe will remove exactly one node from initial, completely removing it and any connections from this node to any other node.\\nReturn the node that, if removed, would minimize M(initial). If multiple nodes could be removed to minimize M(initial), return such a node with the smallest index.\\n\\xc2\\xa0\\nExample 1:\\nInput: graph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1]\\nOutput: 0\\nExample 2:\\nInput: graph = [[1,1,0],[1,1,1],[0,1,1]], initial = [0,1]\\nOutput: 1\\nExample 3:\\nInput: graph = [[1,1,0,0],[1,1,1,0],[0,1,1,1],[0,0,1,1]], initial = [0,1]\\nOutput: 1\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nn == graph.length\\nn == graph[i].length\\n2 <= n <= 300\\ngraph[i][j] is 0 or 1.\\ngraph[i][j] == graph[j][i]\\ngraph[i][i] == 1\\n1 <= initial.length <\\xc2\\xa0n\\n0 <= initial[i] <= n - 1\\nAll the integers in initial are unique.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/unique-email-addresses",
        "Title": "Unique Email Addresses ",
        "Description": "b'Every valid email consists of a local name and a domain name, separated by the \\'@\\' sign. Besides lowercase letters, the email may contain one or more \\'.\\' or \\'+\\'.\\n\\nFor example, in \"alice@leetcode.com\", \"alice\" is the local name, and \"leetcode.com\" is the domain name.\\n\\nIf you add periods \\'.\\' between some characters in the local name part of an email address, mail sent there will be forwarded to the same address without dots in the local name. Note that this rule does not apply to domain names.\\n\\nFor example, \"alice.z@leetcode.com\" and \"alicez@leetcode.com\" forward to the same email address.\\n\\nIf you add a plus \\'+\\' in the local name, everything after the first plus sign will be ignored. This allows certain emails to be filtered. Note that this rule does not apply to domain names.\\n\\nFor example, \"m.y+name@email.com\" will be forwarded to \"my@email.com\".\\n\\nIt is possible to use both of these rules at the same time.\\nGiven an array of strings emails where we send one email to each emails[i], return the number of different addresses that actually receive mails.\\n\\xc2\\xa0\\nExample 1:\\nInput: emails = [\"test.email+alex@leetcode.com\",\"test.e.mail+bob.cathy@leetcode.com\",\"testemail+david@lee.tcode.com\"]\\nOutput: 2\\nExplanation: \"testemail@leetcode.com\" and \"testemail@lee.tcode.com\" actually receive mails.\\n\\nExample 2:\\nInput: emails = [\"a@leetcode.com\",\"b@leetcode.com\",\"c@leetcode.com\"]\\nOutput: 3\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= emails.length <= 100\\n1 <= emails[i].length <= 100\\nemails[i] consist of lowercase English letters, \\'+\\', \\'.\\' and \\'@\\'.\\nEach emails[i] contains exactly one \\'@\\' character.\\nAll local and domain names are non-empty.\\nLocal names do not start with a \\'+\\' character.\\nDomain names end with the \".com\" suffix.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/binary-subarrays-with-sum",
        "Title": "Binary Subarrays With Sum ",
        "Description": "b'Given a binary array nums and an integer goal, return the number of non-empty subarrays with a sum goal.\\nA subarray is a contiguous part of the array.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [1,0,1,0,1], goal = 2\\nOutput: 4\\nExplanation: The 4 subarrays are bolded and underlined below:\\n[1,0,1,0,1]\\n[1,0,1,0,1]\\n[1,0,1,0,1]\\n[1,0,1,0,1]\\n\\nExample 2:\\nInput: nums = [0,0,0,0,0], goal = 0\\nOutput: 15\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 3 * 104\\nnums[i] is either 0 or 1.\\n0 <= goal <= nums.length\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/minimum-falling-path-sum",
        "Title": "Minimum Falling Path Sum ",
        "Description": "b'Given an n x n array of integers matrix, return the minimum sum of any falling path through matrix.\\nA falling path starts at any element in the first row and chooses the element in the next row that is either directly below or diagonally left/right. Specifically, the next element from position (row, col) will be (row + 1, col - 1), (row + 1, col), or (row + 1, col + 1).\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: matrix = [[2,1,3],[6,5,4],[7,8,9]]\\nOutput: 13\\nExplanation: There are two falling paths with a minimum sum as shown.\\n\\nExample 2:\\n\\nInput: matrix = [[-19,57],[-40,-5]]\\nOutput: -59\\nExplanation: The falling path with a minimum sum is shown.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nn == matrix.length == matrix[i].length\\n1 <= n <= 100\\n-100 <= matrix[i][j] <= 100\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/beautiful-array",
        "Title": "Beautiful Array ",
        "Description": "b'An array nums of length n is beautiful if:\\n\\nnums is a permutation of the integers in the range [1, n].\\nFor every 0 <= i < j < n, there is no index k with i < k < j where 2 * nums[k] == nums[i] + nums[j].\\n\\nGiven the integer n, return any beautiful array nums of length n. There will be at least one valid answer for the given n.\\n\\xc2\\xa0\\nExample 1:\\nInput: n = 4\\nOutput: [2,1,4,3]\\nExample 2:\\nInput: n = 5\\nOutput: [3,1,2,5,4]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= n <= 1000\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/number-of-recent-calls",
        "Title": "Number of Recent Calls ",
        "Description": "b'You have a RecentCounter class which counts the number of recent requests within a certain time frame.\\nImplement the RecentCounter class:\\n\\nRecentCounter() Initializes the counter with zero recent requests.\\nint ping(int t) Adds a new request at time t, where t represents some time in milliseconds, and returns the number of requests that has happened in the past 3000 milliseconds (including the new request). Specifically, return the number of requests that have happened in the inclusive range [t - 3000, t].\\n\\nIt is guaranteed that every call to ping uses a strictly larger value of t than the previous call.\\n\\xc2\\xa0\\nExample 1:\\nInput\\n[\"RecentCounter\", \"ping\", \"ping\", \"ping\", \"ping\"]\\n[[], [1], [100], [3001], [3002]]\\nOutput\\n[null, 1, 2, 3, 3]\\n\\nExplanation\\nRecentCounter recentCounter = new RecentCounter();\\nrecentCounter.ping(1);     // requests = [1], range is [-2999,1], return 1\\nrecentCounter.ping(100);   // requests = [1, 100], range is [-2900,100], return 2\\nrecentCounter.ping(3001);  // requests = [1, 100, 3001], range is [1,3001], return 3\\nrecentCounter.ping(3002);  // requests = [1, 100, 3001, 3002], range is [2,3002], return 3\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= t <= 109\\nEach test case will call ping with strictly increasing values of t.\\nAt most 104 calls will be made to ping.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/shortest-bridge",
        "Title": "Shortest Bridge ",
        "Description": "b\"You are given an n x n binary matrix grid where 1 represents land and 0 represents water.\\nAn island is a 4-directionally connected group of 1's not connected to any other 1's. There are exactly two islands in grid.\\nYou may change 0's to 1's to connect the two islands to form one island.\\nReturn the smallest number of 0's you must flip to connect the two islands.\\n\\xc2\\xa0\\nExample 1:\\nInput: grid = [[0,1],[1,0]]\\nOutput: 1\\n\\nExample 2:\\nInput: grid = [[0,1,0],[0,0,0],[0,0,1]]\\nOutput: 2\\n\\nExample 3:\\nInput: grid = [[1,1,1,1,1],[1,0,0,0,1],[1,0,1,0,1],[1,0,0,0,1],[1,1,1,1,1]]\\nOutput: 1\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nn == grid.length == grid[i].length\\n2 <= n <= 100\\ngrid[i][j] is either 0 or 1.\\nThere are exactly two islands in grid.\\n\\n\""
    },
    {
        "URL": "https://leetcode.com/problems/knight-dialer",
        "Title": "Knight Dialer ",
        "Description": "b'The chess knight has a unique movement,\\xc2\\xa0it may move two squares vertically and one square horizontally, or two squares horizontally and one square vertically (with both forming the shape of an L). The possible movements of chess knight are shown in this diagaram:\\nA chess knight can move as indicated in the chess diagram below:\\n\\nWe have a chess knight and a phone pad as shown below, the knight can only stand on a numeric cell\\xc2\\xa0(i.e. blue cell).\\n\\nGiven an integer n, return how many distinct phone numbers of length n we can dial.\\nYou are allowed to place the knight on any numeric cell initially and then you should perform n - 1 jumps to dial a number of length n. All jumps should be valid knight jumps.\\nAs the answer may be very large, return the answer modulo 109 + 7.\\n\\xc2\\xa0\\nExample 1:\\nInput: n = 1\\nOutput: 10\\nExplanation: We need to dial a number of length 1, so placing the knight over any numeric cell of the 10 cells is sufficient.\\n\\nExample 2:\\nInput: n = 2\\nOutput: 20\\nExplanation: All the valid number we can dial are [04, 06, 16, 18, 27, 29, 34, 38, 40, 43, 49, 60, 61, 67, 72, 76, 81, 83, 92, 94]\\n\\nExample 3:\\nInput: n = 3131\\nOutput: 136006598\\nExplanation: Please take care of the mod.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= n <= 5000\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/stamping-the-sequence",
        "Title": "Stamping The Sequence ",
        "Description": "b'You are given two strings stamp and target. Initially, there is a string s of length target.length with all s[i] == \\'?\\'.\\nIn one turn, you can place stamp over s and replace every letter in the s with the corresponding letter from stamp.\\n\\nFor example, if stamp = \"abc\" and target = \"abcba\", then s is \"?????\" initially. In one turn you can:\\n\\n\\t\\nplace stamp at index 0 of s to obtain \"abc??\",\\nplace stamp at index 1 of s to obtain \"?abc?\", or\\nplace stamp at index 2 of s to obtain \"??abc\".\\n\\n\\tNote that stamp must be fully contained in the boundaries of s in order to stamp (i.e., you cannot place stamp at index 3 of s).\\n\\nWe want to convert s to target using at most 10 * target.length turns.\\nReturn an array of the index of the left-most letter being stamped at each turn. If we cannot obtain target from s within 10 * target.length turns, return an empty array.\\n\\xc2\\xa0\\nExample 1:\\nInput: stamp = \"abc\", target = \"ababc\"\\nOutput: [0,2]\\nExplanation: Initially s = \"?????\".\\n- Place stamp at index 0 to get \"abc??\".\\n- Place stamp at index 2 to get \"ababc\".\\n[1,0,2] would also be accepted as an answer, as well as some other answers.\\n\\nExample 2:\\nInput: stamp = \"abca\", target = \"aabcaca\"\\nOutput: [3,0,1]\\nExplanation: Initially s = \"???????\".\\n- Place stamp at index 3 to get \"???abca\".\\n- Place stamp at index 0 to get \"abcabca\".\\n- Place stamp at index 1 to get \"aabcaca\".\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= stamp.length <= target.length <= 1000\\nstamp and target consist of lowercase English letters.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/reorder-data-in-log-files",
        "Title": "Reorder Data in Log Files ",
        "Description": "b'You are given an array of logs. Each log is a space-delimited string of words, where the first word is the identifier.\\nThere are two types of logs:\\n\\nLetter-logs: All words (except the identifier) consist of lowercase English letters.\\nDigit-logs: All words (except the identifier) consist of digits.\\n\\nReorder these logs so that:\\n\\nThe letter-logs come before all digit-logs.\\nThe letter-logs are sorted lexicographically by their contents. If their contents are the same, then sort them lexicographically by their identifiers.\\nThe digit-logs maintain their relative ordering.\\n\\nReturn the final order of the logs.\\n\\xc2\\xa0\\nExample 1:\\nInput: logs = [\"dig1 8 1 5 1\",\"let1 art can\",\"dig2 3 6\",\"let2 own kit dig\",\"let3 art zero\"]\\nOutput: [\"let1 art can\",\"let3 art zero\",\"let2 own kit dig\",\"dig1 8 1 5 1\",\"dig2 3 6\"]\\nExplanation:\\nThe letter-log contents are all different, so their ordering is \"art can\", \"art zero\", \"own kit dig\".\\nThe digit-logs have a relative order of \"dig1 8 1 5 1\", \"dig2 3 6\".\\n\\nExample 2:\\nInput: logs = [\"a1 9 2 3 1\",\"g1 act car\",\"zo4 4 7\",\"ab1 off key dog\",\"a8 act zoo\"]\\nOutput: [\"g1 act car\",\"a8 act zoo\",\"ab1 off key dog\",\"a1 9 2 3 1\",\"zo4 4 7\"]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= logs.length <= 100\\n3 <= logs[i].length <= 100\\nAll the tokens of logs[i] are separated by a single space.\\nlogs[i] is guaranteed to have an identifier and at least one word after the identifier.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/range-sum-of-bst",
        "Title": "Range Sum of BST ",
        "Description": "b'Given the root node of a binary search tree and two integers low and high, return the sum of values of all nodes with a value in the inclusive range [low, high].\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: root = [10,5,15,3,7,null,18], low = 7, high = 15\\nOutput: 32\\nExplanation: Nodes 7, 10, and 15 are in the range [7, 15]. 7 + 10 + 15 = 32.\\n\\nExample 2:\\n\\nInput: root = [10,5,15,3,7,13,18,1,null,6], low = 6, high = 10\\nOutput: 23\\nExplanation: Nodes 6, 7, and 10 are in the range [6, 10]. 6 + 7 + 10 = 23.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nThe number of nodes in the tree is in the range [1, 2 * 104].\\n1 <= Node.val <= 105\\n1 <= low <= high <= 105\\nAll Node.val are unique.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/minimum-area-rectangle",
        "Title": "Minimum Area Rectangle ",
        "Description": "b'You are given an array of points in the X-Y plane points where points[i] = [xi, yi].\\nReturn the minimum area of a rectangle formed from these points, with sides parallel to the X and Y axes. If there is not any such rectangle, return 0.\\n\\xc2\\xa0\\nExample 1:\\n\\nInput: points = [[1,1],[1,3],[3,1],[3,3],[2,2]]\\nOutput: 4\\n\\nExample 2:\\n\\nInput: points = [[1,1],[1,3],[3,1],[3,3],[4,1],[4,3]]\\nOutput: 2\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= points.length <= 500\\npoints[i].length == 2\\n0 <= xi, yi <= 4 * 104\\nAll the given points are unique.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/distinct-subsequences-ii",
        "Title": "Distinct Subsequences II ",
        "Description": "b'Given a string s, return the number of distinct non-empty subsequences of s. Since the answer may be very large, return it modulo 109 + 7.\\nA subsequence of a string is a new string that is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (i.e., \"ace\" is a subsequence of \"abcde\" while \"aec\" is not.\\n\\xc2\\xa0\\nExample 1:\\nInput: s = \"abc\"\\nOutput: 7\\nExplanation: The 7 distinct subsequences are \"a\", \"b\", \"c\", \"ab\", \"ac\", \"bc\", and \"abc\".\\n\\nExample 2:\\nInput: s = \"aba\"\\nOutput: 6\\nExplanation: The 6 distinct subsequences are \"a\", \"b\", \"ab\", \"aa\", \"ba\", and \"aba\".\\n\\nExample 3:\\nInput: s = \"aaa\"\\nOutput: 3\\nExplanation: The 3 distinct subsequences are \"a\", \"aa\" and \"aaa\".\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= s.length <= 2000\\ns consists of lowercase English letters.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/valid-mountain-array",
        "Title": "Valid Mountain Array ",
        "Description": "b'Given an array of integers arr, return true if and only if it is a valid mountain array.\\nRecall that arr is a mountain array if and only if:\\n\\narr.length >= 3\\nThere exists some i with 0 < i < arr.length - 1 such that:\\n\\t\\narr[0] < arr[1] < ... < arr[i - 1] < arr[i] \\narr[i] > arr[i + 1] > ... > arr[arr.length - 1]\\n\\n\\n\\n\\n\\xc2\\xa0\\nExample 1:\\nInput: arr = [2,1]\\nOutput: false\\nExample 2:\\nInput: arr = [3,5,5]\\nOutput: false\\nExample 3:\\nInput: arr = [0,3,2,1]\\nOutput: true\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= arr.length <= 104\\n0 <= arr[i] <= 104\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/di-string-match",
        "Title": "DI String Match ",
        "Description": "b'A permutation perm of n + 1 integers of all the integers in the range [0, n] can be represented as a string s of length n where:\\n\\ns[i] == \\'I\\' if perm[i] < perm[i + 1], and\\ns[i] == \\'D\\' if perm[i] > perm[i + 1].\\n\\nGiven a string s, reconstruct the permutation perm and return it. If there are multiple valid permutations perm, return any of them.\\n\\xc2\\xa0\\nExample 1:\\nInput: s = \"IDID\"\\nOutput: [0,4,1,3,2]\\nExample 2:\\nInput: s = \"III\"\\nOutput: [0,1,2,3]\\nExample 3:\\nInput: s = \"DDI\"\\nOutput: [3,2,0,1]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= s.length <= 105\\ns[i] is either \\'I\\' or \\'D\\'.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/find-the-shortest-superstring",
        "Title": "Find the Shortest Superstring ",
        "Description": "b'Given an array of strings words, return the smallest string that contains each string in words as a substring. If there are multiple valid strings of the smallest length, return any of them.\\nYou may assume that no string in words is a substring of another string in words.\\n\\xc2\\xa0\\nExample 1:\\nInput: words = [\"alex\",\"loves\",\"leetcode\"]\\nOutput: \"alexlovesleetcode\"\\nExplanation: All permutations of \"alex\",\"loves\",\"leetcode\" would also be accepted.\\n\\nExample 2:\\nInput: words = [\"catg\",\"ctaagt\",\"gcta\",\"ttca\",\"atgcatc\"]\\nOutput: \"gctaagttcatgcatc\"\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= words.length <= 12\\n1 <= words[i].length <= 20\\nwords[i] consists of lowercase English letters.\\nAll the strings of words are unique.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/delete-columns-to-make-sorted",
        "Title": "Delete Columns to Make Sorted ",
        "Description": "b'You are given an array of n strings strs, all of the same length.\\nThe strings can be arranged such that there is one on each line, making a grid. For example, strs = [\"abc\", \"bce\", \"cae\"] can be arranged as:\\nabc\\nbce\\ncae\\n\\nYou want to delete the columns that are not sorted lexicographically. In the above example (0-indexed), columns 0 (\\'a\\', \\'b\\', \\'c\\') and 2 (\\'c\\', \\'e\\', \\'e\\') are sorted while column 1 (\\'b\\', \\'c\\', \\'a\\') is not, so you would delete column 1.\\nReturn the number of columns that you will delete.\\n\\xc2\\xa0\\nExample 1:\\nInput: strs = [\"cba\",\"daf\",\"ghi\"]\\nOutput: 1\\nExplanation: The grid looks as follows:\\n  cba\\n  daf\\n  ghi\\nColumns 0 and 2 are sorted, but column 1 is not, so you only need to delete 1 column.\\n\\nExample 2:\\nInput: strs = [\"a\",\"b\"]\\nOutput: 0\\nExplanation: The grid looks as follows:\\n  a\\n  b\\nColumn 0 is the only column and is sorted, so you will not delete any columns.\\n\\nExample 3:\\nInput: strs = [\"zyx\",\"wvu\",\"tsr\"]\\nOutput: 3\\nExplanation: The grid looks as follows:\\n  zyx\\n  wvu\\n  tsr\\nAll 3 columns are not sorted, so you will delete all 3.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\nn == strs.length\\n1 <= n <= 100\\n1 <= strs[i].length <= 1000\\nstrs[i] consists of lowercase English letters.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/minimum-increment-to-make-array-unique",
        "Title": "Minimum Increment to Make Array Unique ",
        "Description": "b'You are given an integer array nums. In one move, you can pick an index i where 0 <= i < nums.length and increment nums[i] by 1.\\nReturn the minimum number of moves to make every value in nums unique.\\nThe test cases are generated so that the answer fits in a 32-bit integer.\\n\\xc2\\xa0\\nExample 1:\\nInput: nums = [1,2,2]\\nOutput: 1\\nExplanation: After 1 move, the array could be [1, 2, 3].\\n\\nExample 2:\\nInput: nums = [3,2,1,2,1,7]\\nOutput: 6\\nExplanation: After 6 moves, the array could be [3, 4, 1, 2, 5, 7].\\nIt can be shown with 5 or less moves that it is impossible for the array to have all unique values.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= nums.length <= 105\\n0 <= nums[i] <= 105\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/validate-stack-sequences",
        "Title": "Validate Stack Sequences ",
        "Description": "b'Given two integer arrays pushed and popped each with distinct values, return true if this could have been the result of a sequence of push and pop operations on an initially empty stack, or false otherwise.\\n\\xc2\\xa0\\nExample 1:\\nInput: pushed = [1,2,3,4,5], popped = [4,5,3,2,1]\\nOutput: true\\nExplanation: We might do the following sequence:\\npush(1), push(2), push(3), push(4),\\npop() -> 4,\\npush(5),\\npop() -> 5, pop() -> 3, pop() -> 2, pop() -> 1\\n\\nExample 2:\\nInput: pushed = [1,2,3,4,5], popped = [4,3,5,1,2]\\nOutput: false\\nExplanation: 1 cannot be popped before 2.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= pushed.length <= 1000\\n0 <= pushed[i] <= 1000\\nAll the elements of pushed are unique.\\npopped.length == pushed.length\\npopped is a permutation of pushed.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/most-stones-removed-with-same-row-or-column",
        "Title": "Most Stones Removed with Same Row or Column ",
        "Description": "b'On a 2D plane, we place n stones at some integer coordinate points. Each coordinate point may have at most one stone.\\nA stone can be removed if it shares either the same row or the same column as another stone that has not been removed.\\nGiven an array stones of length n where stones[i] = [xi, yi] represents the location of the ith stone, return the largest possible number of stones that can be removed.\\n\\xc2\\xa0\\nExample 1:\\nInput: stones = [[0,0],[0,1],[1,0],[1,2],[2,1],[2,2]]\\nOutput: 5\\nExplanation: One way to remove 5 stones is as follows:\\n1. Remove stone [2,2] because it shares the same row as [2,1].\\n2. Remove stone [2,1] because it shares the same column as [0,1].\\n3. Remove stone [1,2] because it shares the same row as [1,0].\\n4. Remove stone [1,0] because it shares the same column as [0,0].\\n5. Remove stone [0,1] because it shares the same row as [0,0].\\nStone [0,0] cannot be removed since it does not share a row/column with another stone still on the plane.\\n\\nExample 2:\\nInput: stones = [[0,0],[0,2],[1,1],[2,0],[2,2]]\\nOutput: 3\\nExplanation: One way to make 3 moves is as follows:\\n1. Remove stone [2,2] because it shares the same row as [2,0].\\n2. Remove stone [2,0] because it shares the same column as [0,0].\\n3. Remove stone [0,2] because it shares the same row as [0,0].\\nStones [0,0] and [1,1] cannot be removed since they do not share a row/column with another stone still on the plane.\\n\\nExample 3:\\nInput: stones = [[0,0]]\\nOutput: 0\\nExplanation: [0,0] is the only stone on the plane, so you cannot remove it.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= stones.length <= 1000\\n0 <= xi, yi <= 104\\nNo two stones are at the same coordinate point.\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/bag-of-tokens",
        "Title": "Bag of Tokens ",
        "Description": "b'You have an initial power of power, an initial score of 0, and a bag of tokens where tokens[i] is the value of the ith token (0-indexed).\\nYour goal is to maximize your total score by potentially playing each token in one of two ways:\\n\\nIf your current power is at least tokens[i], you may play the ith token face up, losing tokens[i] power and gaining 1 score.\\nIf your current score is at least 1, you may play the ith token face down, gaining tokens[i] power and losing 1 score.\\n\\nEach token may be played at most once and in any order. You do not have to play all the tokens.\\nReturn the largest possible score you can achieve after playing any number of tokens.\\n\\xc2\\xa0\\nExample 1:\\nInput: tokens = [100], power = 50\\nOutput: 0\\nExplanation: Playing the only token in the bag is impossible because you either have too little power or too little score.\\n\\nExample 2:\\nInput: tokens = [100,200], power = 150\\nOutput: 1\\nExplanation: Play the 0th token (100) face up, your power becomes 50 and score becomes 1.\\nThere is no need to play the 1st token since you cannot play it face up to add to your score.\\n\\nExample 3:\\nInput: tokens = [100,200,300,400], power = 200\\nOutput: 2\\nExplanation: Play the tokens in this order to get a score of 2:\\n1. Play the 0th token (100) face up, your power becomes 100 and score becomes 1.\\n2. Play the 3rd token (400) face down, your power becomes 500 and score becomes 0.\\n3. Play the 1st token (200) face up, your power becomes 300 and score becomes 1.\\n4. Play the 2nd token (300) face up, your power becomes 0 and score becomes 2.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n0 <= tokens.length <= 1000\\n0 <= tokens[i],\\xc2\\xa0power < 104\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/largest-time-for-given-digits",
        "Title": "Largest Time for Given Digits ",
        "Description": "b'Given an array arr of 4 digits, find the latest 24-hour time that can be made using each digit exactly once.\\n24-hour times are formatted as \"HH:MM\", where HH is between 00 and 23, and MM is between 00 and 59. The earliest 24-hour time is 00:00, and the latest is 23:59.\\nReturn the latest 24-hour time in \"HH:MM\" format. If no valid time can be made, return an empty string.\\n\\xc2\\xa0\\nExample 1:\\nInput: arr = [1,2,3,4]\\nOutput: \"23:41\"\\nExplanation: The valid 24-hour times are \"12:34\", \"12:43\", \"13:24\", \"13:42\", \"14:23\", \"14:32\", \"21:34\", \"21:43\", \"23:14\", and \"23:41\". Of these times, \"23:41\" is the latest.\\n\\nExample 2:\\nInput: arr = [5,5,5,5]\\nOutput: \"\"\\nExplanation: There are no valid 24-hour times as \"55:55\" is not valid.\\n\\n\\xc2\\xa0\\nConstraints:\\n\\narr.length == 4\\n0 <= arr[i] <= 9\\n\\n'"
    },
    {
        "URL": "https://leetcode.com/problems/reveal-cards-in-increasing-order",
        "Title": "Reveal Cards In Increasing Order ",
        "Description": "b'You are given an integer array deck. There is a deck of cards where every card has a unique integer. The integer on the ith card is deck[i].\\nYou can order the deck in any order you want. Initially, all the cards start face down (unrevealed) in one deck.\\nYou will do the following steps repeatedly until all cards are revealed:\\n\\nTake the top card of the deck, reveal it, and take it out of the deck.\\nIf there are still cards in the deck then put the next top card of the deck at the bottom of the deck.\\nIf there are still unrevealed cards, go back to step 1. Otherwise, stop.\\n\\nReturn an ordering of the deck that would reveal the cards in increasing order.\\nNote that the first entry in the answer is considered to be the top of the deck.\\n\\xc2\\xa0\\nExample 1:\\nInput: deck = [17,13,11,2,3,5,7]\\nOutput: [2,13,3,11,5,17,7]\\nExplanation: \\nWe get the deck in the order [17,13,11,2,3,5,7] (this order does not matter), and reorder it.\\nAfter reordering, the deck starts as [2,13,3,11,5,17,7], where 2 is the top of the deck.\\nWe reveal 2, and move 13 to the bottom.  The deck is now [3,11,5,17,7,13].\\nWe reveal 3, and move 11 to the bottom.  The deck is now [5,17,7,13,11].\\nWe reveal 5, and move 17 to the bottom.  The deck is now [7,13,11,17].\\nWe reveal 7, and move 13 to the bottom.  The deck is now [11,17,13].\\nWe reveal 11, and move 17 to the bottom.  The deck is now [13,17].\\nWe reveal 13, and move 17 to the bottom.  The deck is now [17].\\nWe reveal 17.\\nSince all the cards revealed are in increasing order, the answer is correct.\\n\\nExample 2:\\nInput: deck = [1,1000]\\nOutput: [1,1000]\\n\\n\\xc2\\xa0\\nConstraints:\\n\\n1 <= deck.length <= 1000\\n1 <= deck[i] <= 106\\nAll the values of deck are unique.\\n\\n'"
    }
]